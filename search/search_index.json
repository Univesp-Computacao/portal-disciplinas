{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eixo Computa\u00e7\u00e3o - UNIVESP - Grupo de estudos \u00b6 Disciplinas: \u00b6 Algoritmo e Programa\u00e7\u00e3o de Computadores I e II (COM110 e COM120) \u00b6 Objetivo: Compreender conceitos b\u00e1sicos de programa\u00e7\u00e3o e descrever algoritmos para resolver problemas utilizando a linguagem de programa\u00e7\u00e3o Python, incluindo depura\u00e7\u00e3o e testes automatizados b\u00e1sicos. Refor\u00e7ar a pr\u00e1tica de programa\u00e7\u00e3o em Python, composi\u00e7\u00e3o de programas com m\u00faltiplos arquivos de c\u00f3digo fonte, uso de bibliotecas, APIs (WEB) e GUIs. No\u00e7\u00f5es de programa\u00e7\u00e3o orientada a objetos. Banco de Dados (COM300) \u00b6 Objetivo: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM). Estruturas de Dados (EID001) \u00b6 Objetivo: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank. Fundamentos da Internet e Web (COM130) \u00b6 Objetivo: HTML5,CSS3: Estrutura do conte\u00fado versus apar\u00eancia do documento, tags HTML b\u00e1sicas (H1, P, etc) e e extens\u00edveis (div, span, etc), atributos b\u00e1sicos de CSS (color, text-align, etc); seletores CSS; Programa\u00e7\u00e3o Orientada a Objetos (EEP101) \u00b6 Objetivo: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es de padr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map,Filter, Fold, etc). Redes \u00b6","title":"Inicio"},{"location":"#eixo-computacao-univesp-grupo-de-estudos","text":"","title":"Eixo Computa\u00e7\u00e3o - UNIVESP - Grupo de estudos"},{"location":"#disciplinas","text":"","title":"Disciplinas:"},{"location":"#algoritmo-e-programacao-de-computadores-i-e-ii-com110-e-com120","text":"Objetivo: Compreender conceitos b\u00e1sicos de programa\u00e7\u00e3o e descrever algoritmos para resolver problemas utilizando a linguagem de programa\u00e7\u00e3o Python, incluindo depura\u00e7\u00e3o e testes automatizados b\u00e1sicos. Refor\u00e7ar a pr\u00e1tica de programa\u00e7\u00e3o em Python, composi\u00e7\u00e3o de programas com m\u00faltiplos arquivos de c\u00f3digo fonte, uso de bibliotecas, APIs (WEB) e GUIs. No\u00e7\u00f5es de programa\u00e7\u00e3o orientada a objetos.","title":"Algoritmo e Programa\u00e7\u00e3o de Computadores I e II (COM110 e COM120)"},{"location":"#banco-de-dados-com300","text":"Objetivo: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM).","title":"Banco de Dados (COM300)"},{"location":"#estruturas-de-dados-eid001","text":"Objetivo: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank.","title":"Estruturas de Dados (EID001)"},{"location":"#fundamentos-da-internet-e-web-com130","text":"Objetivo: HTML5,CSS3: Estrutura do conte\u00fado versus apar\u00eancia do documento, tags HTML b\u00e1sicas (H1, P, etc) e e extens\u00edveis (div, span, etc), atributos b\u00e1sicos de CSS (color, text-align, etc); seletores CSS;","title":"Fundamentos da Internet e Web (COM130)"},{"location":"#programacao-orientada-a-objetos-eep101","text":"Objetivo: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es de padr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map,Filter, Fold, etc).","title":"Programa\u00e7\u00e3o Orientada a Objetos (EEP101)"},{"location":"#redes","text":"","title":"Redes"},{"location":"sobre/","text":"Sobre \u00b6 Este site \u00e9 constru\u00eddo utilizando MKDocs Material. \ud83c\udf93 Eixo B\u00e1sico - Computa\u00e7\u00e3o Univesp \u00b6 O Projeto se baseia nas disciplinas que est\u00e3o sendo abordadas nos Cursos de Tecnologia da Informa\u00e7\u00e3o, Ci\u00eancia de Dados e Engenharia da Computa\u00e7\u00e3o.","title":"Sobre"},{"location":"sobre/#sobre","text":"Este site \u00e9 constru\u00eddo utilizando MKDocs Material.","title":"Sobre"},{"location":"sobre/#eixo-basico-computacao-univesp","text":"O Projeto se baseia nas disciplinas que est\u00e3o sendo abordadas nos Cursos de Tecnologia da Informa\u00e7\u00e3o, Ci\u00eancia de Dados e Engenharia da Computa\u00e7\u00e3o.","title":"\ud83c\udf93 Eixo B\u00e1sico - Computa\u00e7\u00e3o Univesp"},{"location":"OOP/classes/","text":"Classes \u00b6 O que s\u00e3o classes? \u00b6 Classes s\u00e3o a unidade b\u00e1sica da programa\u00e7\u00e3o orienta \u00e0 objetos. Se olharmos ao nosso redor encontraremos milhares de objetos e cada um pertence a uma classe. Podemos olhar a um livro e dizer que ele \u00e9 da classe de livros em geral e, mais especificamente, dizer se ele \u00e9 da classe de livro liter\u00e1rio, did\u00e1tico, infantil, etc. Podemos a olhar a n\u00f3s mesmos e afirmar que fazemos parte da classe humana, mas cada um de n\u00f3s tem propriedades e comportamentos \u00fanicos, como gostos, altura, nome, etc. Seria como se diss\u00e9ssemos que cada ser humano \u00e9 de uma inst\u00e2ncia da classe humana. Ent\u00e3o podemos dizer em primeiro que cada objeto \u00e9 uma entidade separada, e em segundo, que cada ojeto compartilha propriedades e comportamentos comuns com a classe origin\u00e1ria. Declarando Classes em Java \u00b6 A sintaxe gen\u00e9rica para declarar uma classe em java \u00e9: [ modificador ] class < nome - da - classe > { // Corpo da classe vai aqui } Modificadores s\u00e3o opcionais; eles s\u00e3o palavras-chave para definir o acesso \u00e0 classe. Uma classe pode ter zero ou mais modificadores. O nome-da-classe deve come\u00e7ar com mai\u00fasculo e se for nome composto, o primeiro caractere de cada palavra deve ser sempre mai\u00fasculo. O corpo da classe cont\u00e9m diferentes componentes como campos e m\u00e9todos. Declarando campos em uma classe \u00b6 Campos representam propriedades/atributos de um objeto. O tipo de dados precede o nome do campo. Opcionalmente um campo pode ser inicializado com um valor ou apenas ser declarado. \u00c9 um boa pr\u00e1tica declarar campos com a primeira letra min\u00fascula e, quando for composto, a pr\u00f3xima palavra come\u00e7ar com mai\u00fascula, por exemlo: nome , genero , primeiroNome , corPreferida . // Pessoa.java class Pessoa { String nome ; String genero ; int idade Todo objeto da classe Pessoa ter\u00e1 os atributos nome , genero e idade . Criando uma inst\u00e2ncia de uma classe \u00b6 Usamos o operador new para chamar o construtor da classe cuja inst\u00e2ncia est\u00e1 sendo criada e alocada no heap . O seguinte c\u00f3digo cria uma inst\u00e2ncia da classe Pessoa: new Pessoa (); Como nesse caso n\u00e3o criamos nenhum construtor para a classe Pessoa, o compilador do Java ir\u00e1 adicionar um construtor default . Mas na declara\u00e7\u00e3o acima, apesar de termos criado uma inst\u00e2ncia de Pessoa, n\u00e3o temos controle sobre ela pois n\u00e3o demos um nome a ela, ou mais propriamente, n\u00e3o atribu\u00edmos a essa inst\u00e2ncia nenhuma vari\u00e1vel. A maneira mais correta para criarmos uma inst\u00e2ncia seria: Pessoa jack = new Pessoa (); Usando a nota\u00e7\u00e3o ponto para acessar campos de uma classe \u00b6 Usamos o seguinte padr\u00e3o para referir a vari\u00e1veis contidas em classes: <nome-referencia-instancia>.<nome-da-variavel> Que no caso do nosso exemplo seria jack.nome . Para atribuirmos um valor ao nome far\u00edamos o seguinte: jack . nome = \"Jack Sparrow\" ; Refer\u00eancias \u00b6 https://www.devmedia.com.br/boas-praticas-de-programacao/21137 SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Classes"},{"location":"OOP/classes/#classes","text":"","title":"Classes"},{"location":"OOP/classes/#o-que-sao-classes","text":"Classes s\u00e3o a unidade b\u00e1sica da programa\u00e7\u00e3o orienta \u00e0 objetos. Se olharmos ao nosso redor encontraremos milhares de objetos e cada um pertence a uma classe. Podemos olhar a um livro e dizer que ele \u00e9 da classe de livros em geral e, mais especificamente, dizer se ele \u00e9 da classe de livro liter\u00e1rio, did\u00e1tico, infantil, etc. Podemos a olhar a n\u00f3s mesmos e afirmar que fazemos parte da classe humana, mas cada um de n\u00f3s tem propriedades e comportamentos \u00fanicos, como gostos, altura, nome, etc. Seria como se diss\u00e9ssemos que cada ser humano \u00e9 de uma inst\u00e2ncia da classe humana. Ent\u00e3o podemos dizer em primeiro que cada objeto \u00e9 uma entidade separada, e em segundo, que cada ojeto compartilha propriedades e comportamentos comuns com a classe origin\u00e1ria.","title":"O que s\u00e3o classes?"},{"location":"OOP/classes/#declarando-classes-em-java","text":"A sintaxe gen\u00e9rica para declarar uma classe em java \u00e9: [ modificador ] class < nome - da - classe > { // Corpo da classe vai aqui } Modificadores s\u00e3o opcionais; eles s\u00e3o palavras-chave para definir o acesso \u00e0 classe. Uma classe pode ter zero ou mais modificadores. O nome-da-classe deve come\u00e7ar com mai\u00fasculo e se for nome composto, o primeiro caractere de cada palavra deve ser sempre mai\u00fasculo. O corpo da classe cont\u00e9m diferentes componentes como campos e m\u00e9todos.","title":"Declarando Classes em Java"},{"location":"OOP/classes/#declarando-campos-em-uma-classe","text":"Campos representam propriedades/atributos de um objeto. O tipo de dados precede o nome do campo. Opcionalmente um campo pode ser inicializado com um valor ou apenas ser declarado. \u00c9 um boa pr\u00e1tica declarar campos com a primeira letra min\u00fascula e, quando for composto, a pr\u00f3xima palavra come\u00e7ar com mai\u00fascula, por exemlo: nome , genero , primeiroNome , corPreferida . // Pessoa.java class Pessoa { String nome ; String genero ; int idade Todo objeto da classe Pessoa ter\u00e1 os atributos nome , genero e idade .","title":"Declarando campos em uma classe"},{"location":"OOP/classes/#criando-uma-instancia-de-uma-classe","text":"Usamos o operador new para chamar o construtor da classe cuja inst\u00e2ncia est\u00e1 sendo criada e alocada no heap . O seguinte c\u00f3digo cria uma inst\u00e2ncia da classe Pessoa: new Pessoa (); Como nesse caso n\u00e3o criamos nenhum construtor para a classe Pessoa, o compilador do Java ir\u00e1 adicionar um construtor default . Mas na declara\u00e7\u00e3o acima, apesar de termos criado uma inst\u00e2ncia de Pessoa, n\u00e3o temos controle sobre ela pois n\u00e3o demos um nome a ela, ou mais propriamente, n\u00e3o atribu\u00edmos a essa inst\u00e2ncia nenhuma vari\u00e1vel. A maneira mais correta para criarmos uma inst\u00e2ncia seria: Pessoa jack = new Pessoa ();","title":"Criando uma inst\u00e2ncia de uma classe"},{"location":"OOP/classes/#usando-a-notacao-ponto-para-acessar-campos-de-uma-classe","text":"Usamos o seguinte padr\u00e3o para referir a vari\u00e1veis contidas em classes: <nome-referencia-instancia>.<nome-da-variavel> Que no caso do nosso exemplo seria jack.nome . Para atribuirmos um valor ao nome far\u00edamos o seguinte: jack . nome = \"Jack Sparrow\" ;","title":"Usando a nota\u00e7\u00e3o ponto para acessar campos de uma classe"},{"location":"OOP/classes/#referencias","text":"https://www.devmedia.com.br/boas-praticas-de-programacao/21137 SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Refer\u00eancias"},{"location":"OOP/construtores/","text":"Construtores \u00b6 Um construtor ( constuctor em ingl\u00eas) \u00e9 um bloco de c\u00f3digo usado para inicializar um objeto de uma classe. A sua sintaxe \u00e9 muito semelhante \u00e0 de um m\u00e9todo, por\u00e9m, os dois tem prop\u00f3sitos bem diferentes. O construtor \u00e9 utilizado com o operador new para inicializar/criar uma inst\u00e2ncia/objeto de uma classe Declarando um Construtor \u00b6 [modificador] <nome-construtor> (<lista-parametro){ // corpo do construtor entre chaves } come\u00e7a com um modificador de acesso ( public , private , protected , ou default ); o nome do construtor deve ter o mesmo nome da classe; os par\u00e2metros s\u00e3o opcionais; constructores n\u00e3o aceitam nenhum tipo de retorno, o que retorna apenas \u00e9 a inst\u00e2ncia da classe. Sobrecarregando um construtor ( Overload ) \u00b6 Se uma classe posui m\u00faltiplos construtores ela \u00e9 chamada de sobrecarregada (overloaded). Todos construtores ir\u00e3o possuir o mesmo nome que a classe o que muda \u00e9 somente a exist\u00eancia de par\u00e2metros, bem como sua quantidade, ordem, tipo de par\u00e2metro. // Example.java package exemplos ; public class Gato { // Construtor #1 public Gato () { System . out . println ( \"Um gato foi criado.\" ); } // Construtor #2 public Gato ( String cor ) { System . out . println ( \"Um gato \" + cor + \" foi criado.\" ); } } `` Ao chamar a ` main () ` com o seguinte c\u00f3digo : ``` java public static void main ( String [] args ){ Gato gato_1 = new Gato (); Gato gato_2 = new Gato ( \"amarelo\" ); Teremos a seguinte sa\u00edda: Um gato foi criado. Um gato amarelo foi criado. Estrutura de construtores \u00b6 //Declara\u00e7\u00e3o da classe public class Pessoa { //Atributos // Construtor(<lista-parametros>) #1 // Invoca\u00e7\u00e3o de m\u00e9todos comuns m\u00e9todos acessores/modificadores // Construtor(<outra-lista-parametros>) #2 // Invoca\u00e7\u00e3o de m\u00e9todos ... // Construtor(<n-parametros>) #n ... // // M\u00e9todo #1 // M\u00e9todo #2 // M\u00e9todo #n ... Refer\u00eancias \u00b6 https://www.javatpoint.com/java-constructor SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Construtores"},{"location":"OOP/construtores/#construtores","text":"Um construtor ( constuctor em ingl\u00eas) \u00e9 um bloco de c\u00f3digo usado para inicializar um objeto de uma classe. A sua sintaxe \u00e9 muito semelhante \u00e0 de um m\u00e9todo, por\u00e9m, os dois tem prop\u00f3sitos bem diferentes. O construtor \u00e9 utilizado com o operador new para inicializar/criar uma inst\u00e2ncia/objeto de uma classe","title":"Construtores"},{"location":"OOP/construtores/#declarando-um-construtor","text":"[modificador] <nome-construtor> (<lista-parametro){ // corpo do construtor entre chaves } come\u00e7a com um modificador de acesso ( public , private , protected , ou default ); o nome do construtor deve ter o mesmo nome da classe; os par\u00e2metros s\u00e3o opcionais; constructores n\u00e3o aceitam nenhum tipo de retorno, o que retorna apenas \u00e9 a inst\u00e2ncia da classe.","title":"Declarando um Construtor"},{"location":"OOP/construtores/#sobrecarregando-um-construtor-overload","text":"Se uma classe posui m\u00faltiplos construtores ela \u00e9 chamada de sobrecarregada (overloaded). Todos construtores ir\u00e3o possuir o mesmo nome que a classe o que muda \u00e9 somente a exist\u00eancia de par\u00e2metros, bem como sua quantidade, ordem, tipo de par\u00e2metro. // Example.java package exemplos ; public class Gato { // Construtor #1 public Gato () { System . out . println ( \"Um gato foi criado.\" ); } // Construtor #2 public Gato ( String cor ) { System . out . println ( \"Um gato \" + cor + \" foi criado.\" ); } } `` Ao chamar a ` main () ` com o seguinte c\u00f3digo : ``` java public static void main ( String [] args ){ Gato gato_1 = new Gato (); Gato gato_2 = new Gato ( \"amarelo\" ); Teremos a seguinte sa\u00edda: Um gato foi criado. Um gato amarelo foi criado.","title":"Sobrecarregando um construtor (Overload)"},{"location":"OOP/construtores/#estrutura-de-construtores","text":"//Declara\u00e7\u00e3o da classe public class Pessoa { //Atributos // Construtor(<lista-parametros>) #1 // Invoca\u00e7\u00e3o de m\u00e9todos comuns m\u00e9todos acessores/modificadores // Construtor(<outra-lista-parametros>) #2 // Invoca\u00e7\u00e3o de m\u00e9todos ... // Construtor(<n-parametros>) #n ... // // M\u00e9todo #1 // M\u00e9todo #2 // M\u00e9todo #n ...","title":"Estrutura de construtores"},{"location":"OOP/construtores/#referencias","text":"https://www.javatpoint.com/java-constructor SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Refer\u00eancias"},{"location":"OOP/heranca/","text":"Heran\u00e7a \u00b6 O conceito de heran\u00e7a ( inheritance ) em programa\u00e7\u00e3o orientada \u00e0 objetos se aplica na reutiliza\u00e7\u00e3o de c\u00f3digo em uma aplica\u00e7\u00e3o e na customiza\u00e7\u00e3o desse c\u00f3digo . Ao inv\u00e9s de repetir o c\u00f3digo diversas vezes, aplicamos o conceito de heran\u00e7a, no qual um nova classe \u00e9 formada a partir de uma classe anterior, reutilizando o c\u00f3digo. Como tamb\u00e9m, essa organiza\u00e7\u00e3o de classes que herdam, permite que um mesmo m\u00e9todo seja modificado apenas na classe origin\u00e1ria e que produza efeitos em todas as classes derivadas, facilitando a manuten\u00e7\u00e3o do c\u00f3digo . Herdando uma classe \u00b6 Atributos e m\u00e9todos podem ser herdados de uma classe pai para uma classe filho, ou, em outras palavras, de uma superclasse para uma subclasse. A linguagem Java usa a palavra-chave extends para indicar a rela\u00e7\u00e3o entre as classes, conforme a sintaxe geral: [ modificador ] class < nome - da - subclasse > extends < nome - da - superclasse > { //o c\u00f3digo da subclasse vai aqui } Se a subclasse e a superclasse n\u00e3o estiverem no mesmo pacote \u00e9 necess\u00e1rio importar o nome da superclasse. Importante: Java permite herdar de uma \u00fanica classe. Exemplo conceitual \u00b6 Um sistema de RH pode conter uma superclasse empregado com m\u00e9todos que atendem a todos os funcion\u00e1rios indistintamente tais como getNome() , setNome() , al\u00e9m de atributos como cpf , temFilhos , estadoCivil , entre outros. E, no mesmo sistema, ao precisarmos criar uma classe mais espec\u00edfica como por exemplo de gerentes , que herdaria os m\u00e9todos e atributos b\u00e1sicos da classe empregado , e acrescentaria m\u00e9todos espec\u00edficos como atingiuMeta , bonificacao , etc. Importante: Se um classe n\u00e3o especifica uma heran\u00e7a com a palavra-chave extends , ent\u00e3o ela herda da java.lang.Object class , portanto, estamos sempre usando a heran\u00e7a, mesmo que implicitamente. O operador instanceof \u00b6 Java possui um operador bin\u00e1rio chamado intanceof que verifica se um objeto \u00e9 de determinado tipo. A sintaxe geral \u00e9: < vari\u00e1vel - refer\u00eancia > instanceof < nome - tipo > Se a vari\u00e1vel de refer\u00eancia refere a um objeto do tipo indicado ent\u00e3o ela retorna verdadeiro, do contr\u00e1rio, ela ir\u00e1 retornar falso. Sobreposi\u00e7\u00e3o de m\u00e9todo ( Method Overriding ) \u00b6 A sobreposi\u00e7\u00e3o de m\u00e9todo ( overriding ) ocorre quando redefinimos um m\u00e9todo herdado de uma superclasse. Por exemplo: public class A { public void print () { System . out . println ( \"A\" ); } } public class B extends A { @Override public void print () { System . out . println ( \"B\" ); } } A classe B herda o m\u00e9todo print() da classe A, por\u00e9m, ele redefine seu comportamento. Se acaso tivermos uma classe C herdando de B, ent\u00e3o ela j\u00e1 ir\u00e1 herdar o m\u00e9todo redefinido em B, pois ela \u00e9 a superclasse imediata. Regras de Sobreposi\u00e7\u00e3o de M\u00e9todos \u00b6 A sobreposi\u00e7\u00e3o de m\u00e9todos n\u00e3o se aplica a m\u00e9todos est\u00e1ticos. O m\u00e9todo sobreposto deve ter o mesmo nome que o m\u00e9todo anterior. O m\u00e9todo sobreposto deve ter o mesmo n\u00famero de par\u00e2metros, e do mesmo tipo, que seu anterior. O n\u00edvel de acesso do m\u00e9todo sobreposto deve ser o mesmo ou um mais relaxado, conforme tabela: N\u00edvel de acesso do m\u00e9todo anterior N\u00edvel de acesso permitido para m\u00e9todo substitu\u00eddo public public protected public, protected package level public, protected, package level Sobrecarga de M\u00e9todo ( Method Overloading ) \u00b6 Ter mais de um m\u00e9todo com o mesmo nome em uma mesma classe \u00e9 chamado de sobrecarga de m\u00e9todo. A sobrecarga de m\u00e9todos ocorre quando temos um n\u00famero diferente de par\u00e2metos, diferentes tipos de par\u00e2metros, ou ambos. A sobrecarga de m\u00e9todos est\u00e1 mais relacionada com o polimorfismo do que com a heran\u00e7a. Diferen\u00e7as importantes entre sobrecarga e substitui\u00e7\u00e3o de m\u00e9todos \u00b6 Substitui\u00e7\u00e3o Sobrecarga Envolve heran\u00e7a e ao menos duas classes Envolve apnas uma classe. mesmo nome, mesmo n\u00famero, ordem e tipo de par\u00e2metro Diferentes par\u00e2metros (ordem, n\u00famero, tipo) Aplica-se apenas a m\u00e9todos da inst\u00e2ncia (n\u00e3o-est\u00e1ticos) Ap\u013aica-se a qualquer m\u00e9todo Refer\u00eancias \u00b6 SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress. Operador instanceof em Java","title":"Heran\u00e7a"},{"location":"OOP/heranca/#heranca","text":"O conceito de heran\u00e7a ( inheritance ) em programa\u00e7\u00e3o orientada \u00e0 objetos se aplica na reutiliza\u00e7\u00e3o de c\u00f3digo em uma aplica\u00e7\u00e3o e na customiza\u00e7\u00e3o desse c\u00f3digo . Ao inv\u00e9s de repetir o c\u00f3digo diversas vezes, aplicamos o conceito de heran\u00e7a, no qual um nova classe \u00e9 formada a partir de uma classe anterior, reutilizando o c\u00f3digo. Como tamb\u00e9m, essa organiza\u00e7\u00e3o de classes que herdam, permite que um mesmo m\u00e9todo seja modificado apenas na classe origin\u00e1ria e que produza efeitos em todas as classes derivadas, facilitando a manuten\u00e7\u00e3o do c\u00f3digo .","title":"Heran\u00e7a"},{"location":"OOP/heranca/#herdando-uma-classe","text":"Atributos e m\u00e9todos podem ser herdados de uma classe pai para uma classe filho, ou, em outras palavras, de uma superclasse para uma subclasse. A linguagem Java usa a palavra-chave extends para indicar a rela\u00e7\u00e3o entre as classes, conforme a sintaxe geral: [ modificador ] class < nome - da - subclasse > extends < nome - da - superclasse > { //o c\u00f3digo da subclasse vai aqui } Se a subclasse e a superclasse n\u00e3o estiverem no mesmo pacote \u00e9 necess\u00e1rio importar o nome da superclasse. Importante: Java permite herdar de uma \u00fanica classe.","title":"Herdando uma classe"},{"location":"OOP/heranca/#exemplo-conceitual","text":"Um sistema de RH pode conter uma superclasse empregado com m\u00e9todos que atendem a todos os funcion\u00e1rios indistintamente tais como getNome() , setNome() , al\u00e9m de atributos como cpf , temFilhos , estadoCivil , entre outros. E, no mesmo sistema, ao precisarmos criar uma classe mais espec\u00edfica como por exemplo de gerentes , que herdaria os m\u00e9todos e atributos b\u00e1sicos da classe empregado , e acrescentaria m\u00e9todos espec\u00edficos como atingiuMeta , bonificacao , etc. Importante: Se um classe n\u00e3o especifica uma heran\u00e7a com a palavra-chave extends , ent\u00e3o ela herda da java.lang.Object class , portanto, estamos sempre usando a heran\u00e7a, mesmo que implicitamente.","title":"Exemplo conceitual"},{"location":"OOP/heranca/#o-operador-instanceof","text":"Java possui um operador bin\u00e1rio chamado intanceof que verifica se um objeto \u00e9 de determinado tipo. A sintaxe geral \u00e9: < vari\u00e1vel - refer\u00eancia > instanceof < nome - tipo > Se a vari\u00e1vel de refer\u00eancia refere a um objeto do tipo indicado ent\u00e3o ela retorna verdadeiro, do contr\u00e1rio, ela ir\u00e1 retornar falso.","title":"O operador instanceof"},{"location":"OOP/heranca/#sobreposicao-de-metodo-method-overriding","text":"A sobreposi\u00e7\u00e3o de m\u00e9todo ( overriding ) ocorre quando redefinimos um m\u00e9todo herdado de uma superclasse. Por exemplo: public class A { public void print () { System . out . println ( \"A\" ); } } public class B extends A { @Override public void print () { System . out . println ( \"B\" ); } } A classe B herda o m\u00e9todo print() da classe A, por\u00e9m, ele redefine seu comportamento. Se acaso tivermos uma classe C herdando de B, ent\u00e3o ela j\u00e1 ir\u00e1 herdar o m\u00e9todo redefinido em B, pois ela \u00e9 a superclasse imediata.","title":"Sobreposi\u00e7\u00e3o de m\u00e9todo (Method Overriding)"},{"location":"OOP/heranca/#regras-de-sobreposicao-de-metodos","text":"A sobreposi\u00e7\u00e3o de m\u00e9todos n\u00e3o se aplica a m\u00e9todos est\u00e1ticos. O m\u00e9todo sobreposto deve ter o mesmo nome que o m\u00e9todo anterior. O m\u00e9todo sobreposto deve ter o mesmo n\u00famero de par\u00e2metros, e do mesmo tipo, que seu anterior. O n\u00edvel de acesso do m\u00e9todo sobreposto deve ser o mesmo ou um mais relaxado, conforme tabela: N\u00edvel de acesso do m\u00e9todo anterior N\u00edvel de acesso permitido para m\u00e9todo substitu\u00eddo public public protected public, protected package level public, protected, package level","title":"Regras de Sobreposi\u00e7\u00e3o de M\u00e9todos"},{"location":"OOP/heranca/#sobrecarga-de-metodo-method-overloading","text":"Ter mais de um m\u00e9todo com o mesmo nome em uma mesma classe \u00e9 chamado de sobrecarga de m\u00e9todo. A sobrecarga de m\u00e9todos ocorre quando temos um n\u00famero diferente de par\u00e2metos, diferentes tipos de par\u00e2metros, ou ambos. A sobrecarga de m\u00e9todos est\u00e1 mais relacionada com o polimorfismo do que com a heran\u00e7a.","title":"Sobrecarga de M\u00e9todo (Method Overloading)"},{"location":"OOP/heranca/#diferencas-importantes-entre-sobrecarga-e-substituicao-de-metodos","text":"Substitui\u00e7\u00e3o Sobrecarga Envolve heran\u00e7a e ao menos duas classes Envolve apnas uma classe. mesmo nome, mesmo n\u00famero, ordem e tipo de par\u00e2metro Diferentes par\u00e2metros (ordem, n\u00famero, tipo) Aplica-se apenas a m\u00e9todos da inst\u00e2ncia (n\u00e3o-est\u00e1ticos) Ap\u013aica-se a qualquer m\u00e9todo","title":"Diferen\u00e7as importantes entre sobrecarga e substitui\u00e7\u00e3o de m\u00e9todos"},{"location":"OOP/heranca/#referencias","text":"SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress. Operador instanceof em Java","title":"Refer\u00eancias"},{"location":"OOP/interface/","text":"Muitos softwares s\u00e3o utilizados para fazer simula\u00e7\u00f5es de problemas reais, tais como: mudan\u00e7as ambientais, previs\u00f5es clim\u00e1ticas, flutua\u00e7\u00f5es da bolsa de valores, tr\u00e1fego de uma cidade, etc. Vamos supor uma simula\u00e7\u00e3o da \u00e1rea de biologia do tipo predador-presa. Para simplificar pensemos na rela\u00e7\u00e3o de coelho-raposa dentro de uma localidade. Quanto maior o n\u00famero de coelhos, mais presas, maiores s\u00e3o as chances de as raposas se alimentarem e se reproduzirem, portanto, maior n\u00famero de raposas, o que levaria por consequ\u00eancia, a uma diminui\u00e7\u00e3o do n\u00famero de coelhos. Poder\u00edamos pensar na seguinte classe para coelho: public class Rabbit { //campos est\u00e1ticos omitidos. // Caracter\u00edsticas individuais (campos de inst\u00e2ncia). // A idade do coelho. private int age ; // Coelho vivo ou n\u00e3o. private boolean alive ; // A posi\u00e7\u00e3o do coelho private Location location ; // O campo ocupado private Field field ; //M\u00e9todos omitidos. } E a seguinte classe para raposas: public class Fox { //Campos est\u00e1ticos omitidos // A idade de uma raposa. private int age ; // Raposa viva ou n\u00e3o. private boolean alive ; // A posi\u00e7\u00e3o da raposa private Location location ; // O campo ocupado private Field field ; // O n\u00edvel de alimento da raposa que aumenta comendo coelhos. private int foodLevel ; //M\u00e9todos omitidos. } Facilmente enxergamos que ambos animais tem atributos em comum como age , alive e location . Isso nos permitiria criar uma superclasse Animal que possu\u00edsse esses atributos. Mas essa superclasse Animal n\u00e3o seria como as outras, pois, ela n\u00e3o ser\u00e1 o molde para nenhum objeto, portanto, ela seria ou uma interface ou mesmo uma classe abstrata. O que \u00e9 Interface? \u00b6 A interface \u00e9 como um template que outras classes podem seguir/implementar. Isso permite que classes de diferentes hierarquias tenham atributos iguais. Uma interface define um conjunto de assinaturas de m\u00e9todos que outras classes devem implementar, ela apenas define um comportamento base para um conjunto de classes. Implementando uma interface \u00b6 No exemplo que demos acima, de uma superclasse Animal e de duas subclasses raposa e coelho, ter\u00edamos a seguinte sintaxe de implementa\u00e7\u00e3o: public class Coelho implements Animal ; public class Raposa implements Animal ; O que \u00e9 Classe Abstrata? \u00b6 Muito parecida com a interface, a classe abstrata n\u00e3o \u00e9 o molde para nenhum objeto, mas sim, uma classe-pai, ou seja, ela cont\u00e9m m\u00e9todos e atributos que ser\u00e3o herdados por outras classes. As classes abstratas tamb\u00e9m n\u00e3o podem instanciar objetos, cabendo a instancia\u00e7\u00e3o \u00e0s classes concretas. Diferen\u00e7as entre Interface e Classe Abstrata \u00b6 Classe Abstrata Interface Pode possui atributos de inst\u00e2ncia Possui apenas constantes Possui m\u00e9todos de diversas visibilidade e m\u00e9todos implementados ou abstratos Todos os m\u00e9todos s\u00e3o public e abstract \u00c9 estendida por classes (sub-classes) \u00c9 implementada por classes Uma subclasse s\u00f3 pode estender uma \u00fanica classe abstrata Uma classe pode implementar mais de uma interface Hierarquia de heran\u00e7a com outras classes abstratas Hierarquia de heran\u00e7a com outras interfaces Refer\u00eancias \u00b6 Java - Classes Abstratas Classes Abstratas vs Interfaces USP - Prof. Marcio Delamaro - Interfaces POLIMORFISMO E INTERFACES - Dilvan Moreira","title":"Interface e Classe Abstrata"},{"location":"OOP/interface/#o-que-e-interface","text":"A interface \u00e9 como um template que outras classes podem seguir/implementar. Isso permite que classes de diferentes hierarquias tenham atributos iguais. Uma interface define um conjunto de assinaturas de m\u00e9todos que outras classes devem implementar, ela apenas define um comportamento base para um conjunto de classes.","title":"O que \u00e9 Interface?"},{"location":"OOP/interface/#implementando-uma-interface","text":"No exemplo que demos acima, de uma superclasse Animal e de duas subclasses raposa e coelho, ter\u00edamos a seguinte sintaxe de implementa\u00e7\u00e3o: public class Coelho implements Animal ; public class Raposa implements Animal ;","title":"Implementando uma interface"},{"location":"OOP/interface/#o-que-e-classe-abstrata","text":"Muito parecida com a interface, a classe abstrata n\u00e3o \u00e9 o molde para nenhum objeto, mas sim, uma classe-pai, ou seja, ela cont\u00e9m m\u00e9todos e atributos que ser\u00e3o herdados por outras classes. As classes abstratas tamb\u00e9m n\u00e3o podem instanciar objetos, cabendo a instancia\u00e7\u00e3o \u00e0s classes concretas.","title":"O que \u00e9 Classe Abstrata?"},{"location":"OOP/interface/#diferencas-entre-interface-e-classe-abstrata","text":"Classe Abstrata Interface Pode possui atributos de inst\u00e2ncia Possui apenas constantes Possui m\u00e9todos de diversas visibilidade e m\u00e9todos implementados ou abstratos Todos os m\u00e9todos s\u00e3o public e abstract \u00c9 estendida por classes (sub-classes) \u00c9 implementada por classes Uma subclasse s\u00f3 pode estender uma \u00fanica classe abstrata Uma classe pode implementar mais de uma interface Hierarquia de heran\u00e7a com outras classes abstratas Hierarquia de heran\u00e7a com outras interfaces","title":"Diferen\u00e7as entre Interface e Classe Abstrata"},{"location":"OOP/interface/#referencias","text":"Java - Classes Abstratas Classes Abstratas vs Interfaces USP - Prof. Marcio Delamaro - Interfaces POLIMORFISMO E INTERFACES - Dilvan Moreira","title":"Refer\u00eancias"},{"location":"OOP/java-intro/","text":"Java e Orienta\u00e7\u00e3o a Objetos \u00b6 Introdu\u00e7\u00e3o Java \u00b6 A primeira vers\u00e3o da linguagem Java surgiu em 1995, criada por alguns desenvolvedores da Sun Microsystem. A ideia inicial era desenvolver uma linguagem para controlar pequenos dispositivos, como televisores, videocassetes e aparelhos de TV a cabo. Mas JAVA acabou dominando a \u00e1rea de sistemas de informa\u00e7\u00e3o, principalmente sistemas para a Web. O c\u00f3digo Java \u00e9 convertido em bytecodes interpretados no ambiente de execu\u00e7\u00e3o do Java para execut\u00e1-los. Se for necess\u00e1rio mais desempenho, esse ambiente de execu\u00e7\u00e3o transforma os bytecodes em c\u00f3digo de m\u00e1quina nativo para a CPU espec\u00edfica, ganhando assim desempenho. A linguagem Java \u00e9 Compilada e Interpretada. Primeiramente, os arquivos de c\u00f3digo-fonte Java com extens\u00e3o \u201c.java\u201d s\u00e3o compilados para bytecodes, tamb\u00e9m conhecidos como arquivos de extens\u00e3o \u201c.class\u201d. Existe uma m\u00e1quina virtual, conhecida como JVM (Java Virtual Machine), que \u00e9 capaz de interpretar (executar) os arquivos Java compilados. Vari\u00e1veis e Tipos de Dados \u00b6 Vari\u00e1veis s\u00e3o espa\u00e7os na mem\u00f3ria onde se guardam dados. Java \u00e9 uma linguagem fortemente tipada, pois cada vari\u00e1vel precisa ter um tipo declarado. Existem oito tipos primitivos para armazenamento de informa\u00e7\u00f5es. Tipos primitivos n\u00e3o s\u00e3o objetos, eles s\u00e3o partes internas da linguage Para declarar uma vari\u00e1vel: Digite seu tipo: int , float , String , etc. D\u00ea um nome: nome , idade , i , etc. Use o sinal de atribui\u00e7\u00e3o = para atribuir um valor a vari\u00e1vel. (opcional) D\u00ea um valor a vari\u00e1vel: \"Paula\" , 19 , 1.88 , etc. (opcional) Java possui 8 tipos de dados primitivos: N\u00fameros inteiros \u00b6 Tipo Armazenamento Intervalo int 4 bytes \u20132.147.483.648 a 2.147.483.647 short 2 bytes \u201332.768 a 32.767 long 8 bytes \u20139.223.372.036.854.775.808 a 9.223.372.036.854.775.807 byte 1 byte -128 a 127 N\u00fameros decimais \u00b6 Tipo Armazenamento Intervalo float 4 bytes aprox \u00b1 3.40282347E+38F (6-7 d\u00edgitos decimais significativos) double 8 bytes aprox \u00b1 1.797693134862311570E+308 (15 d\u00edgitos decimais significativos) O tipo char \u00e9 utilizado para armazenar caracteres individuais, como letras, algarismos, sinais de pontua\u00e7\u00e3o, entre outros. O \u00faltimo tipo \u00e9 o boolean , que possui somente dois valores, verdadeiro ( true) ou falso ( false). No Java n\u00e3o \u00e9 poss\u00edvel converter n\u00fameros inteiros em valores booleanos. Tipos de Dados N\u00e3o Primitivos \u00b6 Al\u00e9m disso, temos tipos n\u00e3o primitivos de dados, caso de String que corresponde a uma cadeia de caracteres Unicode, e Object , que se refere a qualquer objeto gen\u00e9rico. Operadores Aritm\u00e9ticos \u00b6 Em Java temos os seguintes operadores: Soma: + Subtra\u00e7\u00e3o: - Multiplica\u00e7\u00e3o: * Divis\u00e3o: / M\u00f3dulo: % public class Main { public static void main ( String [] args ) { int a ; int b = 2 ; a = 3 ; int soma = a + b ; int subtracao = a - b ; int multiplicacao = a * b ; int divisao = a / b ; // o resultado ser\u00e1 int pois a vari\u00e1vel foi declarada como int int modulo = a % b ; System . out . println ( soma ); System . out . println ( subtracao ); System . out . println ( multiplicacao ); System . out . println ( divisao ); System . out . println ( modulo ); } } Cast \u00b6 \u00c9 quando convertemos um valor de um tipo para outro. Por exemplo, se queremos dividir os valores armazenados em 2 vari\u00e1veis do tipo inteiro, o resultado ser\u00e1 entendido como se tamb\u00e9m fosse do tipo inteiro. Por isso usamos o cast, para converter essa vari\u00e1vel para float (ou double) na hora da opera\u00e7\u00e3o. public class Main { public static void main ( String [] args ) { int a ; int b = 2 ; a = 3 ; int divisaoint = a / b ; // resultado int float aindaint = a / b ; // apesar de ser um float, as vari\u00e1veis a e b ainda s\u00e3o int float divisaocast = ( float ) a / ( float ) b ; // Ao fazer o cast, a e b s\u00e3o convertidos para float apenas na hora da opera\u00e7\u00e3o System . out . println ( divisaoint ); System . out . println ( aindaint ); System . out . println ( divisaocast ); } } /* Veja que apenas declarar a vari\u00e1vel como float n\u00e3o \u00e9 suficiente para fazer a opera\u00e7\u00e3o dar certo. \u00c9 necess\u00e1rio fazer o cast (convers\u00e3o). */ Estruturas Condicionais \u00b6 Usam condi\u00e7\u00f5es para decidir que caminho seguir. Para isso usamos operadores de compara\u00e7\u00e3o para comparar 2 express\u00f5es. Os operadores s\u00e3o: Igual: == Diferente: != Maior: > Menor: < Maior ou igual: >= Menor ou igual: <= if / else if / else \u00b6 public class Main { public static void main ( String [] args ) { int nota = 70 ; if ( nota >= 80 ) { System . out . println ( \"A\" ); } else if ( nota >= 60 ) { System . out . println ( \"B\" ); } else if ( nota >= 40 ) { System . out . println ( \"C\" ); } else { System . out . println ( \"D\" ); } } } Operador Tern\u00e1rio \u00b6 O operador tern\u00e1rio ( ? ) \u00e9 um recurso para tomada de decis\u00f5es com objetivo similar ao do if / else mas codificado em apenas uma linha. No c\u00f3digo, a express\u00e3o booleana isWeekend \u00e9 avaliada. Caso ela seja verdade, tudo que estiver entre o operador tern\u00e1rio ? e a pontua\u00e7\u00e3o : , ser\u00e1 executado. Caso contr\u00e1rio, ser\u00e1 executado tudo que estiver ap\u00f3s a pontua\u00e7\u00e3o : public class Main { public static void main ( String [] args ) { boolean isWeekend = false ; String message = isWeekend ? \"It is weekend\" : \"It is not weekend\" ; System . out . println ( message ); } } Switch \u00b6 public class Main { public static void main ( String [] args ) { String nota = \"E\" ; switch ( nota ) { case \"A\" : case \"B\" : System . out . println ( \"Aluno aprovado\" ); break ; case \"C\" : System . out . println ( \"Aluno em recupera\u00e7\u00e3o\" ); break ; case \"D\" : System . out . println ( \"Aluno reprovado\" ); break ; default : System . out . println ( \"Nota inv\u00e1lida\" ); } } } Estruturas de Repeti\u00e7\u00e3o \u00b6 While \u00b6 Usamos o while quando n\u00e3o sabemos exatamente quantas vezes o c\u00f3digo ser\u00e1 repetido A condi\u00e7\u00e3o para interrup\u00e7\u00e3o da repeti\u00e7\u00e3o se d\u00e1 atrav\u00e9s de uma condi\u00e7\u00e3o booleana. public class Main { public static void main ( String [] args ) { int i = 0 ; while ( i < 5 ) { System . out . println ( i ); i ++ ; } } } Do-While \u00b6 \u00c9 uma variante do while , com a diferen\u00e7a que o bloco de c\u00f3digo ser\u00e1 executado primeiro, e somente depois \u00e9 que ser\u00e1 analisada a condi\u00e7\u00e3o. Se a condi\u00e7\u00e3o for verdadeira ser\u00e1 executada mais uma vez, quando for falsa, ir\u00e1 interromper. public class Main { public static void main ( String [] args ) { int i = 0 ; do { System . out . println ( i ); i ++ ; } while ( i < 5 ); } } For \u00b6 Como par\u00e2metro coloca-se: uma vari\u00e1vel de controle uma compara\u00e7\u00e3o um incremento ou decremento public class Main { public static void main ( String [] args ) { for ( int i = 0 ; i <= 10 ; i ++ ) { System . out . println ( \u201c A vari\u00e1vel i agora vale \u201c + i ); } } } Classes do Java \u00b6 LocalDate \u00b6 LocalDate \u00e9 uma classe Java para datas. Usa o formato ISO-8601 \u00c9 necess\u00e1rio importar import java.time.LocalDate; // importa a classe LocalDate para trabalhar com data e hora import java.time.LocalDate ; public class Main { public static void main ( String [] args ) { // Recupera as informa\u00e7\u00f5es de data (ano, m\u00eas, dia) local e guarda em uma vari\u00e1vel do tipo LocalDate LocalDate hoje = LocalDate . now (); System . out . println ( hoje ); System . out . println ( hoje . getDayOfWeek ()); // Dia da semana System . out . println ( hoje . getDayOfMonth ()); // Dia do m\u00eas } } Locale \u00b6 Classe usada para a localidade (USA, Austr\u00e1lias, etc.) \u00c9 necess\u00e1rio importar import java.util.Locale; Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\") Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos getDisplayName Usamos tamb\u00e9m TextStyle para o modo de exibi\u00e7\u00e3o (deve ser importado) Por fim, usamos a localidade criada acima. // importa a classe LocalDate para trabalhar com data e hora import java.time.LocalDate ; // importa a classe TextStyle para o formato import java.time.format.TextStyle ; // importa a classe Locale import java.util.Locale ; public class Main { public static void main ( String [] args ) { LocalDate hoje = LocalDate . now (); /* Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\") */ Locale portugal = new Locale ( \"pt\" , \"PT\" ); /* Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos getDisplayName Usamos tamb\u00e9m TextStyle para o modo de exibi\u00e7\u00e3o (deve ser importado) Por fim, usamos a localidade criada acima */ System . out . println ( hoje . getDayOfWeek (). getDisplayName ( TextStyle . FULL , portugal )); } } IDEs para Java: \u00b6 Eclipse (IDE l\u00edder para Java) IntelliJ Netbeans JDeveloper","title":"Java - Intro"},{"location":"OOP/java-intro/#java-e-orientacao-a-objetos","text":"","title":"Java e Orienta\u00e7\u00e3o a Objetos"},{"location":"OOP/java-intro/#introducao-java","text":"A primeira vers\u00e3o da linguagem Java surgiu em 1995, criada por alguns desenvolvedores da Sun Microsystem. A ideia inicial era desenvolver uma linguagem para controlar pequenos dispositivos, como televisores, videocassetes e aparelhos de TV a cabo. Mas JAVA acabou dominando a \u00e1rea de sistemas de informa\u00e7\u00e3o, principalmente sistemas para a Web. O c\u00f3digo Java \u00e9 convertido em bytecodes interpretados no ambiente de execu\u00e7\u00e3o do Java para execut\u00e1-los. Se for necess\u00e1rio mais desempenho, esse ambiente de execu\u00e7\u00e3o transforma os bytecodes em c\u00f3digo de m\u00e1quina nativo para a CPU espec\u00edfica, ganhando assim desempenho. A linguagem Java \u00e9 Compilada e Interpretada. Primeiramente, os arquivos de c\u00f3digo-fonte Java com extens\u00e3o \u201c.java\u201d s\u00e3o compilados para bytecodes, tamb\u00e9m conhecidos como arquivos de extens\u00e3o \u201c.class\u201d. Existe uma m\u00e1quina virtual, conhecida como JVM (Java Virtual Machine), que \u00e9 capaz de interpretar (executar) os arquivos Java compilados.","title":"Introdu\u00e7\u00e3o Java"},{"location":"OOP/java-intro/#variaveis-e-tipos-de-dados","text":"Vari\u00e1veis s\u00e3o espa\u00e7os na mem\u00f3ria onde se guardam dados. Java \u00e9 uma linguagem fortemente tipada, pois cada vari\u00e1vel precisa ter um tipo declarado. Existem oito tipos primitivos para armazenamento de informa\u00e7\u00f5es. Tipos primitivos n\u00e3o s\u00e3o objetos, eles s\u00e3o partes internas da linguage Para declarar uma vari\u00e1vel: Digite seu tipo: int , float , String , etc. D\u00ea um nome: nome , idade , i , etc. Use o sinal de atribui\u00e7\u00e3o = para atribuir um valor a vari\u00e1vel. (opcional) D\u00ea um valor a vari\u00e1vel: \"Paula\" , 19 , 1.88 , etc. (opcional) Java possui 8 tipos de dados primitivos:","title":"Vari\u00e1veis e Tipos de Dados"},{"location":"OOP/java-intro/#numeros-inteiros","text":"Tipo Armazenamento Intervalo int 4 bytes \u20132.147.483.648 a 2.147.483.647 short 2 bytes \u201332.768 a 32.767 long 8 bytes \u20139.223.372.036.854.775.808 a 9.223.372.036.854.775.807 byte 1 byte -128 a 127","title":"N\u00fameros inteiros"},{"location":"OOP/java-intro/#numeros-decimais","text":"Tipo Armazenamento Intervalo float 4 bytes aprox \u00b1 3.40282347E+38F (6-7 d\u00edgitos decimais significativos) double 8 bytes aprox \u00b1 1.797693134862311570E+308 (15 d\u00edgitos decimais significativos) O tipo char \u00e9 utilizado para armazenar caracteres individuais, como letras, algarismos, sinais de pontua\u00e7\u00e3o, entre outros. O \u00faltimo tipo \u00e9 o boolean , que possui somente dois valores, verdadeiro ( true) ou falso ( false). No Java n\u00e3o \u00e9 poss\u00edvel converter n\u00fameros inteiros em valores booleanos.","title":"N\u00fameros decimais"},{"location":"OOP/java-intro/#tipos-de-dados-nao-primitivos","text":"Al\u00e9m disso, temos tipos n\u00e3o primitivos de dados, caso de String que corresponde a uma cadeia de caracteres Unicode, e Object , que se refere a qualquer objeto gen\u00e9rico.","title":"Tipos de Dados N\u00e3o Primitivos"},{"location":"OOP/java-intro/#operadores-aritmeticos","text":"Em Java temos os seguintes operadores: Soma: + Subtra\u00e7\u00e3o: - Multiplica\u00e7\u00e3o: * Divis\u00e3o: / M\u00f3dulo: % public class Main { public static void main ( String [] args ) { int a ; int b = 2 ; a = 3 ; int soma = a + b ; int subtracao = a - b ; int multiplicacao = a * b ; int divisao = a / b ; // o resultado ser\u00e1 int pois a vari\u00e1vel foi declarada como int int modulo = a % b ; System . out . println ( soma ); System . out . println ( subtracao ); System . out . println ( multiplicacao ); System . out . println ( divisao ); System . out . println ( modulo ); } }","title":"Operadores Aritm\u00e9ticos"},{"location":"OOP/java-intro/#cast","text":"\u00c9 quando convertemos um valor de um tipo para outro. Por exemplo, se queremos dividir os valores armazenados em 2 vari\u00e1veis do tipo inteiro, o resultado ser\u00e1 entendido como se tamb\u00e9m fosse do tipo inteiro. Por isso usamos o cast, para converter essa vari\u00e1vel para float (ou double) na hora da opera\u00e7\u00e3o. public class Main { public static void main ( String [] args ) { int a ; int b = 2 ; a = 3 ; int divisaoint = a / b ; // resultado int float aindaint = a / b ; // apesar de ser um float, as vari\u00e1veis a e b ainda s\u00e3o int float divisaocast = ( float ) a / ( float ) b ; // Ao fazer o cast, a e b s\u00e3o convertidos para float apenas na hora da opera\u00e7\u00e3o System . out . println ( divisaoint ); System . out . println ( aindaint ); System . out . println ( divisaocast ); } } /* Veja que apenas declarar a vari\u00e1vel como float n\u00e3o \u00e9 suficiente para fazer a opera\u00e7\u00e3o dar certo. \u00c9 necess\u00e1rio fazer o cast (convers\u00e3o). */","title":"Cast"},{"location":"OOP/java-intro/#estruturas-condicionais","text":"Usam condi\u00e7\u00f5es para decidir que caminho seguir. Para isso usamos operadores de compara\u00e7\u00e3o para comparar 2 express\u00f5es. Os operadores s\u00e3o: Igual: == Diferente: != Maior: > Menor: < Maior ou igual: >= Menor ou igual: <=","title":"Estruturas Condicionais"},{"location":"OOP/java-intro/#if-else-if-else","text":"public class Main { public static void main ( String [] args ) { int nota = 70 ; if ( nota >= 80 ) { System . out . println ( \"A\" ); } else if ( nota >= 60 ) { System . out . println ( \"B\" ); } else if ( nota >= 40 ) { System . out . println ( \"C\" ); } else { System . out . println ( \"D\" ); } } }","title":"if / else if / else"},{"location":"OOP/java-intro/#operador-ternario","text":"O operador tern\u00e1rio ( ? ) \u00e9 um recurso para tomada de decis\u00f5es com objetivo similar ao do if / else mas codificado em apenas uma linha. No c\u00f3digo, a express\u00e3o booleana isWeekend \u00e9 avaliada. Caso ela seja verdade, tudo que estiver entre o operador tern\u00e1rio ? e a pontua\u00e7\u00e3o : , ser\u00e1 executado. Caso contr\u00e1rio, ser\u00e1 executado tudo que estiver ap\u00f3s a pontua\u00e7\u00e3o : public class Main { public static void main ( String [] args ) { boolean isWeekend = false ; String message = isWeekend ? \"It is weekend\" : \"It is not weekend\" ; System . out . println ( message ); } }","title":"Operador Tern\u00e1rio"},{"location":"OOP/java-intro/#switch","text":"public class Main { public static void main ( String [] args ) { String nota = \"E\" ; switch ( nota ) { case \"A\" : case \"B\" : System . out . println ( \"Aluno aprovado\" ); break ; case \"C\" : System . out . println ( \"Aluno em recupera\u00e7\u00e3o\" ); break ; case \"D\" : System . out . println ( \"Aluno reprovado\" ); break ; default : System . out . println ( \"Nota inv\u00e1lida\" ); } } }","title":"Switch"},{"location":"OOP/java-intro/#estruturas-de-repeticao","text":"","title":"Estruturas de Repeti\u00e7\u00e3o"},{"location":"OOP/java-intro/#while","text":"Usamos o while quando n\u00e3o sabemos exatamente quantas vezes o c\u00f3digo ser\u00e1 repetido A condi\u00e7\u00e3o para interrup\u00e7\u00e3o da repeti\u00e7\u00e3o se d\u00e1 atrav\u00e9s de uma condi\u00e7\u00e3o booleana. public class Main { public static void main ( String [] args ) { int i = 0 ; while ( i < 5 ) { System . out . println ( i ); i ++ ; } } }","title":"While"},{"location":"OOP/java-intro/#do-while","text":"\u00c9 uma variante do while , com a diferen\u00e7a que o bloco de c\u00f3digo ser\u00e1 executado primeiro, e somente depois \u00e9 que ser\u00e1 analisada a condi\u00e7\u00e3o. Se a condi\u00e7\u00e3o for verdadeira ser\u00e1 executada mais uma vez, quando for falsa, ir\u00e1 interromper. public class Main { public static void main ( String [] args ) { int i = 0 ; do { System . out . println ( i ); i ++ ; } while ( i < 5 ); } }","title":"Do-While"},{"location":"OOP/java-intro/#for","text":"Como par\u00e2metro coloca-se: uma vari\u00e1vel de controle uma compara\u00e7\u00e3o um incremento ou decremento public class Main { public static void main ( String [] args ) { for ( int i = 0 ; i <= 10 ; i ++ ) { System . out . println ( \u201c A vari\u00e1vel i agora vale \u201c + i ); } } }","title":"For"},{"location":"OOP/java-intro/#classes-do-java","text":"","title":"Classes do Java"},{"location":"OOP/java-intro/#localdate","text":"LocalDate \u00e9 uma classe Java para datas. Usa o formato ISO-8601 \u00c9 necess\u00e1rio importar import java.time.LocalDate; // importa a classe LocalDate para trabalhar com data e hora import java.time.LocalDate ; public class Main { public static void main ( String [] args ) { // Recupera as informa\u00e7\u00f5es de data (ano, m\u00eas, dia) local e guarda em uma vari\u00e1vel do tipo LocalDate LocalDate hoje = LocalDate . now (); System . out . println ( hoje ); System . out . println ( hoje . getDayOfWeek ()); // Dia da semana System . out . println ( hoje . getDayOfMonth ()); // Dia do m\u00eas } }","title":"LocalDate"},{"location":"OOP/java-intro/#locale","text":"Classe usada para a localidade (USA, Austr\u00e1lias, etc.) \u00c9 necess\u00e1rio importar import java.util.Locale; Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\") Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos getDisplayName Usamos tamb\u00e9m TextStyle para o modo de exibi\u00e7\u00e3o (deve ser importado) Por fim, usamos a localidade criada acima. // importa a classe LocalDate para trabalhar com data e hora import java.time.LocalDate ; // importa a classe TextStyle para o formato import java.time.format.TextStyle ; // importa a classe Locale import java.util.Locale ; public class Main { public static void main ( String [] args ) { LocalDate hoje = LocalDate . now (); /* Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\") */ Locale portugal = new Locale ( \"pt\" , \"PT\" ); /* Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos getDisplayName Usamos tamb\u00e9m TextStyle para o modo de exibi\u00e7\u00e3o (deve ser importado) Por fim, usamos a localidade criada acima */ System . out . println ( hoje . getDayOfWeek (). getDisplayName ( TextStyle . FULL , portugal )); } }","title":"Locale"},{"location":"OOP/java-intro/#ides-para-java","text":"Eclipse (IDE l\u00edder para Java) IntelliJ Netbeans JDeveloper","title":"IDEs para Java:"},{"location":"OOP/metodos/","text":"M\u00e9todos \u00b6 Um m\u00e9todo em uma classe define o comportamento dos objetos ou mesmo o comportamento da classe em si. O m\u00e9todo pode ser invocado para que executemos seu c\u00f3digo. Opcionalmente um m\u00e9todo pode aceitar valores de entrada ( input values ) na hora de sua invoca\u00e7\u00e3o, que s\u00e3o conhecidos como par\u00e2metros. Declarando M\u00e9todos de uma Classe \u00b6 [modificador] <tipo-retorno> <nome-metodo> (<lista-parametro>) { // Corpo do m\u00e9todo vai aqui } modificador \u00e9 uma lista opcional de modificadores para o m\u00e9todo tipo-retorno \u00e9 o tipo de dado do valor a ser retornado pelo m\u00e9todo lista-parametro \u00e9 uma lista opcional de par\u00e2metros que o m\u00e9todo aceita. Quando tem mais de um eles s\u00e3o separados por v\u00edrgula. corpo do m\u00e9todo \u00e9 o c\u00f3digo que ser\u00e1 executado ao ser invocado tal m\u00e9todo. Convencionalmente um m\u00e9todo em Java come\u00e7a com uma letra min\u00fascula e a pr\u00f3xima palavra com mai\u00fascula, por exemplo, adicionarProduto , removerProduto , depositarDinheiro . Um m\u00e9todo tem uma assinatura que identifica tal m\u00e9todo em determinado contexto. A assinatura de um m\u00e9todo \u00e9 a combina\u00e7\u00e3o das seguintes partes: Nome do m\u00e9todo N\u00famero de Par\u00e2metros Tipo de dado dos par\u00e2metros Ordem dos par\u00e2metros Vari\u00e1veis Locais \u00b6 Uma vari\u00e1vel declarada dentro de um m\u00e9todo, de um construtor ou de um bloco de c\u00f3digo \u00e9 chamada de vari\u00e1vel local. Uma vari\u00e1vel local existe somente durante a execu\u00e7\u00e3o daquele m\u00e9todo, ou seja, ela \u00e9 tempor\u00e1ria e n\u00e3o pode ser utilizada fora do escopo. Obs: se uma vari\u00e1vel local de um m\u00e9todo possui o mesmo nome que uma vari\u00e1vel da classe em que o m\u00e9todo est\u00e1 contido, a vari\u00e1vel local possui preced\u00eancia. O M\u00e9todo main() \u00b6 O m\u00e9todo main se declara da seguinte maneira: public static void main(String[] args) { // corpo do m\u00e9todo vai aqui } Dois modificadores public e static s\u00e3o utilizados na declara\u00e7\u00e3o da main(). O public faz ele ser acess\u00edvel de qualquer lugar da aplica\u00e7\u00e3o desde que a classe na qual ele seja declarada esteja acess\u00edvel. O modificador static faz ele ser uma classe m\u00e9todo, ou seja, ele pode ser invocado usando o nome da classe. O tipo de retorno \u00e9 do tipo void que significa que ele n\u00e3o retorna nenhum valor ao seu invocador. O m\u00e9todo main() aceita um \u00fanico par\u00e2metro do tipo String array ( String[] ) e a palavra 'args' define o nome do par\u00e2metro. O m\u00e9todo main() \u00e9 respons\u00e1vel por inicar a execu\u00e7\u00e3o do c\u00f3digo na JVM (Java Virtual Machine). A Palavra-chave this \u00b6 A palavra-chave this \u00e9 uma refer\u00eancia a inst\u00e2ncia de uma classe e s\u00f3 pode ser utilizada no contexto de uma inst\u00e2ncia. This em ingl\u00eas significa \"isso\", \"isto\" e tem a finalidade de apontar para a pr\u00f3pria classe, distinguindo vari\u00e1veis de mesmo nome. Por exemplo: public Funcionario ( String nome , int ID , double salario ){ this . nome = nome ; this . ID = ID ; this . salario = salario ; } Visualizamos que o this.nome \u00e9 a vari\u00e1vel nome da classe Funcion\u00e1rio e nome \u00e9 o par\u00e2metro que foi recebido para criar um objeto. Veremos outros usos da palavra-chave this no artigo sobre Construtores. N\u00edvel de acesso para m\u00e9todos \u00b6 O n\u00edvel de acesso para os m\u00e9todos de uma classe determinam quais partes do programa podem ser acessados. S\u00e3o quatro os tipos de modificadores usados para m\u00e9todos (como tamb\u00e9m para atributos): public private protected default (package-level access) Quando declaramos um m\u00e9todo como public ele pode ser acessado de qualquer lugar desde que a classe tamb\u00e9m esteja acess\u00edvel. Quando declaramos um m\u00e9todo como private ele pode ser acessado apenas no corpo da classe declarada e em nenhum outro lugar. Quando declaramos um m\u00e9todo como protected ele pode ser acessado do mesmo pacote ou de descendentes da classe, mesmo se os descendentes estiverem em diferentes pacotes. Se n\u00e3o declararmos nenhum modificador de acesso, automaticamente ele ser\u00e1 declarado como default e o m\u00e9todo poder\u00e1 ser acessado pelo mesmo pacote. Refer\u00eancias \u00b6 https://www.javaprogressivo.net/2012/10/Auto-referencia-com-o-this-Invocando-metodos-de-Classes-e-Objetos.html SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"M\u00e9todos"},{"location":"OOP/metodos/#metodos","text":"Um m\u00e9todo em uma classe define o comportamento dos objetos ou mesmo o comportamento da classe em si. O m\u00e9todo pode ser invocado para que executemos seu c\u00f3digo. Opcionalmente um m\u00e9todo pode aceitar valores de entrada ( input values ) na hora de sua invoca\u00e7\u00e3o, que s\u00e3o conhecidos como par\u00e2metros.","title":"M\u00e9todos"},{"location":"OOP/metodos/#declarando-metodos-de-uma-classe","text":"[modificador] <tipo-retorno> <nome-metodo> (<lista-parametro>) { // Corpo do m\u00e9todo vai aqui } modificador \u00e9 uma lista opcional de modificadores para o m\u00e9todo tipo-retorno \u00e9 o tipo de dado do valor a ser retornado pelo m\u00e9todo lista-parametro \u00e9 uma lista opcional de par\u00e2metros que o m\u00e9todo aceita. Quando tem mais de um eles s\u00e3o separados por v\u00edrgula. corpo do m\u00e9todo \u00e9 o c\u00f3digo que ser\u00e1 executado ao ser invocado tal m\u00e9todo. Convencionalmente um m\u00e9todo em Java come\u00e7a com uma letra min\u00fascula e a pr\u00f3xima palavra com mai\u00fascula, por exemplo, adicionarProduto , removerProduto , depositarDinheiro . Um m\u00e9todo tem uma assinatura que identifica tal m\u00e9todo em determinado contexto. A assinatura de um m\u00e9todo \u00e9 a combina\u00e7\u00e3o das seguintes partes: Nome do m\u00e9todo N\u00famero de Par\u00e2metros Tipo de dado dos par\u00e2metros Ordem dos par\u00e2metros","title":"Declarando M\u00e9todos de uma Classe"},{"location":"OOP/metodos/#variaveis-locais","text":"Uma vari\u00e1vel declarada dentro de um m\u00e9todo, de um construtor ou de um bloco de c\u00f3digo \u00e9 chamada de vari\u00e1vel local. Uma vari\u00e1vel local existe somente durante a execu\u00e7\u00e3o daquele m\u00e9todo, ou seja, ela \u00e9 tempor\u00e1ria e n\u00e3o pode ser utilizada fora do escopo. Obs: se uma vari\u00e1vel local de um m\u00e9todo possui o mesmo nome que uma vari\u00e1vel da classe em que o m\u00e9todo est\u00e1 contido, a vari\u00e1vel local possui preced\u00eancia.","title":"Vari\u00e1veis Locais"},{"location":"OOP/metodos/#o-metodo-main","text":"O m\u00e9todo main se declara da seguinte maneira: public static void main(String[] args) { // corpo do m\u00e9todo vai aqui } Dois modificadores public e static s\u00e3o utilizados na declara\u00e7\u00e3o da main(). O public faz ele ser acess\u00edvel de qualquer lugar da aplica\u00e7\u00e3o desde que a classe na qual ele seja declarada esteja acess\u00edvel. O modificador static faz ele ser uma classe m\u00e9todo, ou seja, ele pode ser invocado usando o nome da classe. O tipo de retorno \u00e9 do tipo void que significa que ele n\u00e3o retorna nenhum valor ao seu invocador. O m\u00e9todo main() aceita um \u00fanico par\u00e2metro do tipo String array ( String[] ) e a palavra 'args' define o nome do par\u00e2metro. O m\u00e9todo main() \u00e9 respons\u00e1vel por inicar a execu\u00e7\u00e3o do c\u00f3digo na JVM (Java Virtual Machine).","title":"O M\u00e9todo main()"},{"location":"OOP/metodos/#a-palavra-chave-this","text":"A palavra-chave this \u00e9 uma refer\u00eancia a inst\u00e2ncia de uma classe e s\u00f3 pode ser utilizada no contexto de uma inst\u00e2ncia. This em ingl\u00eas significa \"isso\", \"isto\" e tem a finalidade de apontar para a pr\u00f3pria classe, distinguindo vari\u00e1veis de mesmo nome. Por exemplo: public Funcionario ( String nome , int ID , double salario ){ this . nome = nome ; this . ID = ID ; this . salario = salario ; } Visualizamos que o this.nome \u00e9 a vari\u00e1vel nome da classe Funcion\u00e1rio e nome \u00e9 o par\u00e2metro que foi recebido para criar um objeto. Veremos outros usos da palavra-chave this no artigo sobre Construtores.","title":"A Palavra-chave this"},{"location":"OOP/metodos/#nivel-de-acesso-para-metodos","text":"O n\u00edvel de acesso para os m\u00e9todos de uma classe determinam quais partes do programa podem ser acessados. S\u00e3o quatro os tipos de modificadores usados para m\u00e9todos (como tamb\u00e9m para atributos): public private protected default (package-level access) Quando declaramos um m\u00e9todo como public ele pode ser acessado de qualquer lugar desde que a classe tamb\u00e9m esteja acess\u00edvel. Quando declaramos um m\u00e9todo como private ele pode ser acessado apenas no corpo da classe declarada e em nenhum outro lugar. Quando declaramos um m\u00e9todo como protected ele pode ser acessado do mesmo pacote ou de descendentes da classe, mesmo se os descendentes estiverem em diferentes pacotes. Se n\u00e3o declararmos nenhum modificador de acesso, automaticamente ele ser\u00e1 declarado como default e o m\u00e9todo poder\u00e1 ser acessado pelo mesmo pacote.","title":"N\u00edvel de acesso para m\u00e9todos"},{"location":"OOP/metodos/#referencias","text":"https://www.javaprogressivo.net/2012/10/Auto-referencia-com-o-this-Invocando-metodos-de-Classes-e-Objetos.html SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Refer\u00eancias"},{"location":"OOP/oop/","text":"Programa\u00e7\u00e3o Orientada a Objetos \u00b6 Objetivos: No\u00e7\u00f5es de arquitetura de software com \u00eanfase em programa\u00e7\u00e3o orientada a objetos. Ementa: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es depadr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map, Filter, Fold, etc). Bibliografia Base: F\u00e9lix, Rafael. Programa\u00e7\u00e3o orientada a objetos. 2017. Pearson. Puga, Sandra; Rissetti, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java. 2016. Pearson. Sommerville, Ian. Engenharia de Software. 2007. Pearson. Bibliografia Complementar: Stephen, Samuel; Bocutiu, Stefan. Programando com Kotlin. 2017. Novatec. DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 8a Edi\u00e7\u00e3o, 2010. DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 6a Edi\u00e7\u00e3o, 2005. DEITEL, H. M.; DEITEL, P.J. C++: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 5a Edi\u00e7\u00e3o, 2006. MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 1. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006. MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 2. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006.","title":"OOP"},{"location":"OOP/oop/#programacao-orientada-a-objetos","text":"Objetivos: No\u00e7\u00f5es de arquitetura de software com \u00eanfase em programa\u00e7\u00e3o orientada a objetos. Ementa: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es depadr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map, Filter, Fold, etc). Bibliografia Base: F\u00e9lix, Rafael. Programa\u00e7\u00e3o orientada a objetos. 2017. Pearson. Puga, Sandra; Rissetti, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java. 2016. Pearson. Sommerville, Ian. Engenharia de Software. 2007. Pearson. Bibliografia Complementar: Stephen, Samuel; Bocutiu, Stefan. Programando com Kotlin. 2017. Novatec. DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 8a Edi\u00e7\u00e3o, 2010. DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 6a Edi\u00e7\u00e3o, 2005. DEITEL, H. M.; DEITEL, P.J. C++: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 5a Edi\u00e7\u00e3o, 2006. MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 1. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006. MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 2. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006.","title":"Programa\u00e7\u00e3o Orientada a Objetos"},{"location":"OOP/paradigma-programacao/","text":"Paradigmas de Programa\u00e7\u00e3o \u00b6 Programar \u00e9 providenciar solu\u00e7\u00f5es usando modelos computacionais suportados por uma linguagem de programa\u00e7\u00e3o. Antes mesmo de solucionar o problema j\u00e1 temos que ter uma vis\u00e3o do problema e da solu\u00e7\u00e3o. Conforme o dicion\u00e1rio Oxford o termo paradigma se traduz por \"um exemplo que serve como modelo; padr\u00e3o.\", logo paradigmas de programa\u00e7\u00e3o s\u00e3o um conjunto de conceitos e ideias que constituem um modelo de vis\u00e3o da realidade. Um \u00fanico problema pode ter mais de um meio de solu\u00e7\u00e3o, isso se d\u00e1, pois, podemos combinar dados e algoritmos de maneira que obtenhamos o mesmo resultado por caminhos complemente diferentes. As linguagens de programa\u00e7\u00e3o podem ter o vi\u00e9s de algum paradigma espec\u00edfico ou mesmo ser multiparadigma. Paradigma Imperativo \u00b6 Semelhante ao comportamento imperativo das linguagens naturais que expressam ordens, programas imperativos s\u00e3o uma sequ\u00eancia de comandos para o computador executar. Caracter\u00edsticas centrais das linguagens imperativas: * as vari\u00e1veis, que modelam as c\u00e9lulas de mem\u00f3ria; * comandos de atribui\u00e7\u00e3o, baseados nas opera\u00e7\u00f5es de transfer\u00eancia dos dados e instru\u00e7\u00f5es; * a execu\u00e7\u00e3o sequencial de instru\u00e7\u00f5es; * e a forma iterativa de repeti\u00e7\u00e3o, o m\u00e9todo mais eficiente desta arquitetura FORTRAN, COBOL, e C s\u00e3o alguns examplos de linguagem de programa\u00e7\u00e3o que suportam o paradigma imperativo. Paradigma Procedural \u00b6 Muito parecido com o paradigma imperativo com uma diferen\u00e7a: m\u00faltiplos comandos numa unidade s\u00e3o chamados procedimento , equipar\u00e1vel a m\u00e9todos, fun\u00e7\u00f5es, rotinas. A principal consequ\u00eancia disso \u00e9 a reutiliza\u00e7\u00e3o do c\u00f3digo em diferentes partes do programa, fazendo a invoca\u00e7\u00e3o do procedimento. Java, C++, PHP entre outras, s\u00e3o linguagens que suportam o paradigma procedural. Paradigma Declarativo \u00b6 Um contraste com o paradigma Imperativo, pois descrevemos o problema e o computador acha a solu\u00e7\u00e3o. \u00c9 mais importante pensar no que \u00e9 o problema do que em como resolv\u00ea-lo. D\u00e1 para pensar, por exemplo, num programa escrevendo num banco de dados SQL (Structured Query Language), onde voc\u00ea especifica o dado a ser salvo e o \"motor\" do banco de dados se encarrega de salvar aquele dado para voc\u00ea. O Foco n\u00e3o est\u00e1 no \"como\" e sim no \"que\". Neste paradigma, ao contr\u00e1rio do imperativo, o algoritmo produz novos dados ao inv\u00e9s de apenas manipul\u00e1-lo. Podemos citar o PROLOG como liguagem que utiliza esse paradigma. Paradigma Funcional \u00b6 Baseado no conceito de fun\u00e7\u00f5es matem\u00e1ticas. Enfatiza o processamento de valores atrav\u00e9s do uso de express\u00f5es e fun\u00e7\u00f5es. Tais fun\u00e7\u00f5es podem ser passadas como par\u00e2metros de outras fun\u00e7\u00f5es. Um exemplo de Linguagem que usa esse procedimento \u00e9 o LISP e seu dialeto Scheme, usada em softwares como AutoCAAD, Audacity, GIMP e Emacs. Outra linguagem funcinoal famosa \u00e9 o R, usado para estat\u00edstica. Uma caracter\u00edstica importante \u00e9 a recursividade, onde uma fun\u00e7\u00e3o invoca a si mesma, permitindo a cria\u00e7\u00e3o de um la\u00e7o. Paradigma Orientado \u00e0 Objetos \u00b6 Um objeto \u00e9 uma entidade abstrata que cont\u00e9m dados e algoritmos, dados s\u00e3o o estado de um objeto, j\u00e1 os algoritmos s\u00e3o o comportamento desse objeto. As classes s\u00e3o unidades b\u00e1sicas da Orienta\u00e7\u00e3o a Objetos. Objetos similares s\u00e3o agrupados em uma mesma classe, \u00e9 poss\u00edvel criar objetos a partir da classe, como tamb\u00e9m chamamos a cria\u00e7\u00e3o de um objeto de instancia\u00e7\u00e3o. Diferentes objetos de uma mesma classe podem conter valores de estado diferentes, ou seja, o estado de um objeto \u00e9 mantido privado de um outro objeto. E \u00e9 atrav\u00e9s dos m\u00e9todos que acessamos/alteramos esses valores (estados). Um m\u00e9todo especial \u00e9 o m\u00e9todo construtor de uma classe: ele fornece valores iniciais ao objeto, ou permite que tais valores sejam determinados na cria\u00e7\u00e3o. Uma classe pode ter mais de um construtor. O paradigma de Orienta\u00e7\u00e3o a Objetos \u00e9 pr\u00e1tico, natural e intuitivo, quando pensamos na rela\u00e7\u00e3o com os problemas reais. Mesmo assim, pode ser complexo seu aprendizado, levando algum tempo para compreender os seus principais conceitos: abstra\u00e7\u00e3o, encapsulamento, polimorfismo e heran\u00e7a. Refer\u00eancias \u00b6 PUCRS - Paradigma Imperativo Wikipedia - Programa\u00e7\u00e3o Imperativa guia.dev - Pradigmas de Programa\u00e7\u00e3o .) Profa. Isabel Harb Manssour - Paradigmas de Linguagem I","title":"Paradigmas de Programa\u00e7\u00e3o"},{"location":"OOP/paradigma-programacao/#paradigmas-de-programacao","text":"Programar \u00e9 providenciar solu\u00e7\u00f5es usando modelos computacionais suportados por uma linguagem de programa\u00e7\u00e3o. Antes mesmo de solucionar o problema j\u00e1 temos que ter uma vis\u00e3o do problema e da solu\u00e7\u00e3o. Conforme o dicion\u00e1rio Oxford o termo paradigma se traduz por \"um exemplo que serve como modelo; padr\u00e3o.\", logo paradigmas de programa\u00e7\u00e3o s\u00e3o um conjunto de conceitos e ideias que constituem um modelo de vis\u00e3o da realidade. Um \u00fanico problema pode ter mais de um meio de solu\u00e7\u00e3o, isso se d\u00e1, pois, podemos combinar dados e algoritmos de maneira que obtenhamos o mesmo resultado por caminhos complemente diferentes. As linguagens de programa\u00e7\u00e3o podem ter o vi\u00e9s de algum paradigma espec\u00edfico ou mesmo ser multiparadigma.","title":"Paradigmas de Programa\u00e7\u00e3o"},{"location":"OOP/paradigma-programacao/#paradigma-imperativo","text":"Semelhante ao comportamento imperativo das linguagens naturais que expressam ordens, programas imperativos s\u00e3o uma sequ\u00eancia de comandos para o computador executar. Caracter\u00edsticas centrais das linguagens imperativas: * as vari\u00e1veis, que modelam as c\u00e9lulas de mem\u00f3ria; * comandos de atribui\u00e7\u00e3o, baseados nas opera\u00e7\u00f5es de transfer\u00eancia dos dados e instru\u00e7\u00f5es; * a execu\u00e7\u00e3o sequencial de instru\u00e7\u00f5es; * e a forma iterativa de repeti\u00e7\u00e3o, o m\u00e9todo mais eficiente desta arquitetura FORTRAN, COBOL, e C s\u00e3o alguns examplos de linguagem de programa\u00e7\u00e3o que suportam o paradigma imperativo.","title":"Paradigma Imperativo"},{"location":"OOP/paradigma-programacao/#paradigma-procedural","text":"Muito parecido com o paradigma imperativo com uma diferen\u00e7a: m\u00faltiplos comandos numa unidade s\u00e3o chamados procedimento , equipar\u00e1vel a m\u00e9todos, fun\u00e7\u00f5es, rotinas. A principal consequ\u00eancia disso \u00e9 a reutiliza\u00e7\u00e3o do c\u00f3digo em diferentes partes do programa, fazendo a invoca\u00e7\u00e3o do procedimento. Java, C++, PHP entre outras, s\u00e3o linguagens que suportam o paradigma procedural.","title":"Paradigma Procedural"},{"location":"OOP/paradigma-programacao/#paradigma-declarativo","text":"Um contraste com o paradigma Imperativo, pois descrevemos o problema e o computador acha a solu\u00e7\u00e3o. \u00c9 mais importante pensar no que \u00e9 o problema do que em como resolv\u00ea-lo. D\u00e1 para pensar, por exemplo, num programa escrevendo num banco de dados SQL (Structured Query Language), onde voc\u00ea especifica o dado a ser salvo e o \"motor\" do banco de dados se encarrega de salvar aquele dado para voc\u00ea. O Foco n\u00e3o est\u00e1 no \"como\" e sim no \"que\". Neste paradigma, ao contr\u00e1rio do imperativo, o algoritmo produz novos dados ao inv\u00e9s de apenas manipul\u00e1-lo. Podemos citar o PROLOG como liguagem que utiliza esse paradigma.","title":"Paradigma Declarativo"},{"location":"OOP/paradigma-programacao/#paradigma-funcional","text":"Baseado no conceito de fun\u00e7\u00f5es matem\u00e1ticas. Enfatiza o processamento de valores atrav\u00e9s do uso de express\u00f5es e fun\u00e7\u00f5es. Tais fun\u00e7\u00f5es podem ser passadas como par\u00e2metros de outras fun\u00e7\u00f5es. Um exemplo de Linguagem que usa esse procedimento \u00e9 o LISP e seu dialeto Scheme, usada em softwares como AutoCAAD, Audacity, GIMP e Emacs. Outra linguagem funcinoal famosa \u00e9 o R, usado para estat\u00edstica. Uma caracter\u00edstica importante \u00e9 a recursividade, onde uma fun\u00e7\u00e3o invoca a si mesma, permitindo a cria\u00e7\u00e3o de um la\u00e7o.","title":"Paradigma Funcional"},{"location":"OOP/paradigma-programacao/#paradigma-orientado-a-objetos","text":"Um objeto \u00e9 uma entidade abstrata que cont\u00e9m dados e algoritmos, dados s\u00e3o o estado de um objeto, j\u00e1 os algoritmos s\u00e3o o comportamento desse objeto. As classes s\u00e3o unidades b\u00e1sicas da Orienta\u00e7\u00e3o a Objetos. Objetos similares s\u00e3o agrupados em uma mesma classe, \u00e9 poss\u00edvel criar objetos a partir da classe, como tamb\u00e9m chamamos a cria\u00e7\u00e3o de um objeto de instancia\u00e7\u00e3o. Diferentes objetos de uma mesma classe podem conter valores de estado diferentes, ou seja, o estado de um objeto \u00e9 mantido privado de um outro objeto. E \u00e9 atrav\u00e9s dos m\u00e9todos que acessamos/alteramos esses valores (estados). Um m\u00e9todo especial \u00e9 o m\u00e9todo construtor de uma classe: ele fornece valores iniciais ao objeto, ou permite que tais valores sejam determinados na cria\u00e7\u00e3o. Uma classe pode ter mais de um construtor. O paradigma de Orienta\u00e7\u00e3o a Objetos \u00e9 pr\u00e1tico, natural e intuitivo, quando pensamos na rela\u00e7\u00e3o com os problemas reais. Mesmo assim, pode ser complexo seu aprendizado, levando algum tempo para compreender os seus principais conceitos: abstra\u00e7\u00e3o, encapsulamento, polimorfismo e heran\u00e7a.","title":"Paradigma Orientado \u00e0 Objetos"},{"location":"OOP/paradigma-programacao/#referencias","text":"PUCRS - Paradigma Imperativo Wikipedia - Programa\u00e7\u00e3o Imperativa guia.dev - Pradigmas de Programa\u00e7\u00e3o .) Profa. Isabel Harb Manssour - Paradigmas de Linguagem I","title":"Refer\u00eancias"},{"location":"OOP/quatro-pilares/","text":"Paradigma Orientado \u00e0 Objetos e Java \u00b6 Apesar de ser comum ouvir falar em Java como uma linguagem orientada a objetos, isso n\u00e3o \u00e9 verdade, pois o Java tamb\u00e9m pode ser usado como uma linguagem procedural. A Orienta\u00e7\u00e3o a Objetos \u00e9 pertinente ao paradigma, enquanto a linguagem \u00e9 respons\u00e1vel por fornecer meios de implementar aquele paradigma. Iremos ver em resumo os quatro pilares da POO. Abstra\u00e7\u00e3o \u00b6 Programas de computador podem variar de algumas linhas \u00e0 centenas de milhares de linhas. Para facilitar a manuten\u00e7\u00e3o de um programa monolito \u00e9 comum decompor o programa em subprogramas menores. A abstra\u00e7\u00e3o \u00e9 o processo de expor detalhes essenciais de uma entidade, enquanto os detalhes irrelevantes s\u00e3o ignorados, facilitando a manuten\u00e7\u00e3o e o entendimento. A relev\u00e2ncia de um detalhe est\u00e1 ligada a seu contexto, por exemplo, pensemos num teclado, o contexto para o usu\u00e1rio \u00e9 o mais simples poss\u00edvel, ele apenas deve ter acesso \u00e0s teclas e pronto, j\u00e1 para o contexto da m\u00e1quina o mais importante \u00e9 o circuito el\u00e9trico interno do teclado, aquilo que fica por tr\u00e1s das teclas, oculto ao usu\u00e1rio. Encapsulamento \u00b6 Linguagens de programa\u00e7\u00e3o d\u00e3o suporte a encapsulamento de diversas maneiras: um procedimento \u00e9 um encapsulamento de um conjunto de passos para executar uma tarefa; um vetor ( array ) \u00e9 o encapsulamento de diversos elementos; etc. Na Programa\u00e7\u00e3o Orientada \u00e0 Objetos, o encapsulamento \u00e9 o processo de agrupar dados e procedimentos em uma entidade chamada de classe. No Java voc\u00ea pode encapsular dados e procedimentos dentro de uma classe , \u00e9 poss\u00edvel encapsular classes dentro de pacotes ( packages ) e pacotes dentro de um m\u00f3dulo . Heran\u00e7a \u00b6 O mecanismo de heran\u00e7a permite que voc\u00ea defina uma nova abstra\u00e7\u00e3o atrav\u00e9s de uma abstra\u00e7\u00e3o j\u00e1 existente. A nova abstra\u00e7\u00e3o pode ser chamada de subtipo, subclasse ou classe derivada, enquanto a classe origin\u00e1ria \u00e9 chamada de supertipo, superclasse, como tamb\u00e9m, costuma-se referenciar esta por classe-pai e aquela por classe-filha. Ao n\u00edvel da programa\u00e7\u00e3o, a heran\u00e7a prov\u00ea um mecanismo de reutiliza\u00e7\u00e3o de c\u00f3digo. A partir da deriva\u00e7\u00e3o de uma classe gen\u00e9rica \u00e9 poss\u00edvel criar classes espec\u00edficas. Polimorfismo \u00b6 Permite que uma entidade assuma diferentes significados em diferentes contextos, com o prop\u00f3sito de se escrever c\u00f3digos que sejam reutiliz\u00e1veis e de f\u00e1cil manuten\u00e7\u00e3o. A capacidade polim\u00f3rfica decorre diretamente da heran\u00e7a, pois permite que uma vari\u00e1vel de refer\u00eancia e o objeto sejam diferentes, isso ocorre atrav\u00e9s da sobrescrita de m\u00e9todos, quando a subclasse sobrescreve o m\u00e9todo implementado na superclasse. O polimorfismo ainda pode ser dividido em dois tipos: Ad hoc: define uma interface comum para um conjunto arbitr\u00e1rio de tipos especificados individualmente. Universal : n\u00e3o especifica tipos concretos e, em vez disso, usa s\u00edmbolos abstratos que podem substituir qualquer tipo. Refer\u00eancias \u00b6 https://en.wikipedia.org/wiki/Polymorphism_(computer_science) FIAP - Nano Cursos - Java Fundamentos - https://on.fiap.com.br/ SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"04 pilares da POO"},{"location":"OOP/quatro-pilares/#paradigma-orientado-a-objetos-e-java","text":"Apesar de ser comum ouvir falar em Java como uma linguagem orientada a objetos, isso n\u00e3o \u00e9 verdade, pois o Java tamb\u00e9m pode ser usado como uma linguagem procedural. A Orienta\u00e7\u00e3o a Objetos \u00e9 pertinente ao paradigma, enquanto a linguagem \u00e9 respons\u00e1vel por fornecer meios de implementar aquele paradigma. Iremos ver em resumo os quatro pilares da POO.","title":"Paradigma Orientado \u00e0 Objetos e Java"},{"location":"OOP/quatro-pilares/#abstracao","text":"Programas de computador podem variar de algumas linhas \u00e0 centenas de milhares de linhas. Para facilitar a manuten\u00e7\u00e3o de um programa monolito \u00e9 comum decompor o programa em subprogramas menores. A abstra\u00e7\u00e3o \u00e9 o processo de expor detalhes essenciais de uma entidade, enquanto os detalhes irrelevantes s\u00e3o ignorados, facilitando a manuten\u00e7\u00e3o e o entendimento. A relev\u00e2ncia de um detalhe est\u00e1 ligada a seu contexto, por exemplo, pensemos num teclado, o contexto para o usu\u00e1rio \u00e9 o mais simples poss\u00edvel, ele apenas deve ter acesso \u00e0s teclas e pronto, j\u00e1 para o contexto da m\u00e1quina o mais importante \u00e9 o circuito el\u00e9trico interno do teclado, aquilo que fica por tr\u00e1s das teclas, oculto ao usu\u00e1rio.","title":"Abstra\u00e7\u00e3o"},{"location":"OOP/quatro-pilares/#encapsulamento","text":"Linguagens de programa\u00e7\u00e3o d\u00e3o suporte a encapsulamento de diversas maneiras: um procedimento \u00e9 um encapsulamento de um conjunto de passos para executar uma tarefa; um vetor ( array ) \u00e9 o encapsulamento de diversos elementos; etc. Na Programa\u00e7\u00e3o Orientada \u00e0 Objetos, o encapsulamento \u00e9 o processo de agrupar dados e procedimentos em uma entidade chamada de classe. No Java voc\u00ea pode encapsular dados e procedimentos dentro de uma classe , \u00e9 poss\u00edvel encapsular classes dentro de pacotes ( packages ) e pacotes dentro de um m\u00f3dulo .","title":"Encapsulamento"},{"location":"OOP/quatro-pilares/#heranca","text":"O mecanismo de heran\u00e7a permite que voc\u00ea defina uma nova abstra\u00e7\u00e3o atrav\u00e9s de uma abstra\u00e7\u00e3o j\u00e1 existente. A nova abstra\u00e7\u00e3o pode ser chamada de subtipo, subclasse ou classe derivada, enquanto a classe origin\u00e1ria \u00e9 chamada de supertipo, superclasse, como tamb\u00e9m, costuma-se referenciar esta por classe-pai e aquela por classe-filha. Ao n\u00edvel da programa\u00e7\u00e3o, a heran\u00e7a prov\u00ea um mecanismo de reutiliza\u00e7\u00e3o de c\u00f3digo. A partir da deriva\u00e7\u00e3o de uma classe gen\u00e9rica \u00e9 poss\u00edvel criar classes espec\u00edficas.","title":"Heran\u00e7a"},{"location":"OOP/quatro-pilares/#polimorfismo","text":"Permite que uma entidade assuma diferentes significados em diferentes contextos, com o prop\u00f3sito de se escrever c\u00f3digos que sejam reutiliz\u00e1veis e de f\u00e1cil manuten\u00e7\u00e3o. A capacidade polim\u00f3rfica decorre diretamente da heran\u00e7a, pois permite que uma vari\u00e1vel de refer\u00eancia e o objeto sejam diferentes, isso ocorre atrav\u00e9s da sobrescrita de m\u00e9todos, quando a subclasse sobrescreve o m\u00e9todo implementado na superclasse. O polimorfismo ainda pode ser dividido em dois tipos: Ad hoc: define uma interface comum para um conjunto arbitr\u00e1rio de tipos especificados individualmente. Universal : n\u00e3o especifica tipos concretos e, em vez disso, usa s\u00edmbolos abstratos que podem substituir qualquer tipo.","title":"Polimorfismo"},{"location":"OOP/quatro-pilares/#referencias","text":"https://en.wikipedia.org/wiki/Polymorphism_(computer_science) FIAP - Nano Cursos - Java Fundamentos - https://on.fiap.com.br/ SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals : Object-Oriented Programming in Java 17. Third edition. Apress.","title":"Refer\u00eancias"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/algo/","text":"Algoritmos e Programa\u00e7\u00e3o de Computadores \u00b6 estudos referente a COM110 e COM120 Ementa: Algoritmos: caracteriza\u00e7\u00e3o, nota\u00e7\u00e3o, estruturas b\u00e1sicas. Conceitos de linguagens algor\u00edtmicas: express\u00f5es; comandos sequenciais, seletivos e repetitivos; entrada/sa\u00edda; vari\u00e1veis; constantes; listas, vetores (listas em Python), matrizes, strings; fun\u00e7\u00f5es; escopo de vari\u00e1veis; Desenvolvimento, depura\u00e7\u00e3o, no\u00e7\u00f5es de testes automatizados e documenta\u00e7\u00e3o de programas utilizando linguagem Python. Depura\u00e7\u00e3o de programas. Conceito e uso de pilhas, filas, listas, \u00e1rvores. Recurs\u00e3o. Algoritmos de Ordena\u00e7\u00e3o e Busca. No\u00e7\u00f5es de gerenciamento de mem\u00f3ria e manipula\u00e7\u00e3o de listas. M\u00f3dulos e no\u00e7\u00f5es de objetos, arquivos. Modulariza\u00e7\u00e3o (m\u00f3dulos, bibliotecas, interfaces). Uso de APIs b\u00e1sicas da WEB e manipula\u00e7\u00e3o de dados (JSON).Cria\u00e7\u00e3o de interfaces gr\u00e1ficas simples. Controle de Vers\u00e3o (git). Testes automatizados. Bibliografia Base: PERKOVIC, Ljubomir. Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Usando Python - Um Foco no Desenvolvimento de Aplica\u00e7\u00f5es. 1 ed. LTC. 2016. Miller, Brad; Ranum, David. Como Pensar como um Cientista da Computa\u00e7\u00e3o. 2019. Dispon\u00edvel em: https://panda.ime.usp.br/pensepy/static/pensepy/index.html Bibliografia Complementar: FREEMAN, Eric. Use a Cabe\u00e7a! Aprenda Programar. 1 ed. Alta Books. 2019. DOWNEY, Allen. Pense Python: pense como um Cientista da Computa\u00e7\u00e3o. 1 ed. Novatec. 2016. Kon, Fabio. Introdu\u00e7\u00e3o \u00e0 Ci\u00eancia da Computa\u00e7\u00e3o em Python. Coursera. 2019. Dispon\u00edvel online em: https://www.coursera.org/learn/ciencia-computacao- python-conceitos Shaw, Zed A. Aprenda Python 3 do Jeito Certo: uma Introdu\u00e7\u00e3o Muito Simples ao Incr\u00edvel Mundo dos Computadores e da Codifica\u00e7\u00e3o. 2019. Alta Books","title":"Ementa"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/algo/#algoritmos-e-programacao-de-computadores","text":"estudos referente a COM110 e COM120 Ementa: Algoritmos: caracteriza\u00e7\u00e3o, nota\u00e7\u00e3o, estruturas b\u00e1sicas. Conceitos de linguagens algor\u00edtmicas: express\u00f5es; comandos sequenciais, seletivos e repetitivos; entrada/sa\u00edda; vari\u00e1veis; constantes; listas, vetores (listas em Python), matrizes, strings; fun\u00e7\u00f5es; escopo de vari\u00e1veis; Desenvolvimento, depura\u00e7\u00e3o, no\u00e7\u00f5es de testes automatizados e documenta\u00e7\u00e3o de programas utilizando linguagem Python. Depura\u00e7\u00e3o de programas. Conceito e uso de pilhas, filas, listas, \u00e1rvores. Recurs\u00e3o. Algoritmos de Ordena\u00e7\u00e3o e Busca. No\u00e7\u00f5es de gerenciamento de mem\u00f3ria e manipula\u00e7\u00e3o de listas. M\u00f3dulos e no\u00e7\u00f5es de objetos, arquivos. Modulariza\u00e7\u00e3o (m\u00f3dulos, bibliotecas, interfaces). Uso de APIs b\u00e1sicas da WEB e manipula\u00e7\u00e3o de dados (JSON).Cria\u00e7\u00e3o de interfaces gr\u00e1ficas simples. Controle de Vers\u00e3o (git). Testes automatizados. Bibliografia Base: PERKOVIC, Ljubomir. Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Usando Python - Um Foco no Desenvolvimento de Aplica\u00e7\u00f5es. 1 ed. LTC. 2016. Miller, Brad; Ranum, David. Como Pensar como um Cientista da Computa\u00e7\u00e3o. 2019. Dispon\u00edvel em: https://panda.ime.usp.br/pensepy/static/pensepy/index.html Bibliografia Complementar: FREEMAN, Eric. Use a Cabe\u00e7a! Aprenda Programar. 1 ed. Alta Books. 2019. DOWNEY, Allen. Pense Python: pense como um Cientista da Computa\u00e7\u00e3o. 1 ed. Novatec. 2016. Kon, Fabio. Introdu\u00e7\u00e3o \u00e0 Ci\u00eancia da Computa\u00e7\u00e3o em Python. Coursera. 2019. Dispon\u00edvel online em: https://www.coursera.org/learn/ciencia-computacao- python-conceitos Shaw, Zed A. Aprenda Python 3 do Jeito Certo: uma Introdu\u00e7\u00e3o Muito Simples ao Incr\u00edvel Mundo dos Computadores e da Codifica\u00e7\u00e3o. 2019. Alta Books","title":"Algoritmos e Programa\u00e7\u00e3o de Computadores"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/","text":"Manipula\u00e7\u00e3o de Arquivos \u00b6 A manipula\u00e7\u00e3o de arquivos sempre foi um tema central na computa\u00e7\u00e3o, pois afinal, n\u00e3o \u00e9 muito \u00fatil ter que executar repetidas vezes o mesmo c\u00f3digo para manter um hist\u00f3rico de resultados, j\u00e1 que, a linguagem de programa\u00e7\u00e3o em si, n\u00e3o \u00e9 capaz de armazenar dados. A manipula\u00e7\u00e3o de arquivos \u00e9 um recurso poderoso que serve basicamente para transferir informa\u00e7\u00e3o para algum arquivo de texto, que seja facilmente guardado por qualquer tipo de Sistema Operacional (*.html, *.txt, *.csv, *.md, etc.). Mas por se tratar do uso direto de recursos da m\u00e1quina, devemos monitorar esse uso para n\u00e3o prejudicar apenas a aplica\u00e7\u00e3o mas o sistema operacional de quem a usa. Mas por que manipular arquivos \u00e9 t\u00e3o especial? Porque permite de maneira simples a persist\u00eancia dos dados, ou seja, estamos transferindo o que o Python armazena na RAM para um HD/SSD. Como no simples exemplo abaixo: mensagem = \"Variavel para gravar informacao em tipo string\" with open ( \"output.txt\" , 'w' ) as arquivo : arquivo . write ( mensagem ) Como resultado deste comando temos a transfer\u00eancia do valor de string que a vari\u00e1vel mensagem assumiu temporariamente na mem\u00f3ria RAM e escrevemos em um HD/SSD, de modo a preservar a informa\u00e7\u00e3o, visto que o linguagens de programa\u00e7\u00e3o isoladas n\u00e3o possuem poder de persist\u00eancia de dados, precisando armazenar em arquivos diretamente no Sistema Operacional, ou, em softwares especializadas, como Bancos de Dados. Sem precisar importar nenhum m\u00f3dulo espec\u00edfico utilizamos a fun\u00e7\u00e3o open() que retorna um objeto de manipula\u00e7\u00e3o de arquivos. Dentro da fun\u00e7\u00e3o open() , passamos apenas dois par\u00e2metros: o nome do arquivo e o modo de abertura , e este arquivo ficou armazenada em uma vari\u00e1vel do nosso programa ( arquivo ) Alguns podem pensar que a fun\u00e7\u00e7\u00e3o open() ir\u00e1 abrir o arquivo no sistema operacional, mas n\u00e3o, ela apenas cria uma conex\u00e3o entre a mem\u00f3ria RAM e o HD/SSD. Usamos o m\u00e9todo write() para escrever dentro do arquivo, passando como argumento uma string ou mesmo uma outra vari\u00e1vel que aponte para uma string. Com o with no in\u00edcio da express\u00e3o estamos indicando que estamos trabalhando em contexto , ou seja, o arquivo ser\u00e1 automaticamente fechado ap\u00f3s o uso. Isso simplesmente nos ajuda a usar com precis\u00e3o os recursos da m\u00e1quina. Criando um arquivo .txt a partir de uma API \u00b6 Para tornar o uso de arquivos veross\u00edmil \u00e0 realidade vamos dar um exemplo bem casual. Suponha que voc\u00ea precise consultar um CEP e armazenaro bairro, a cidade e a UF. import requests mensagem = \" \\n Ol\u00e1, digite o cep que desejas armazenar: \\n \" cep = input ( mensagem ) url = f \"http://viacep.com.br/ws/ { cep } /json/\" retorno = requests . get ( url ) conteudo = retorno . json () bairro = conteudo [ 'bairro' ] localidade = conteudo [ 'localidade' ] uf = conteudo [ 'uf' ] endereco = f \" { bairro } \\t { localidade } \\t { uf } \" with open ( 'enderecos.txt' , 'a' ) as arquivo : arquivo . write ( endereco ) arquivo . write ( ' \\n ' ) Com o m\u00f3dulo requests fazemos uma requisi\u00e7\u00e3o \u00e0 URL da API ViaCep, e passamos atrav\u00e9s de uma f-string , a vari\u00e1vel contendo o n\u00famero do CEP em formato string. Recebemos dessa requisi\u00e7\u00e3o um objeto <class 'requests.models.Response'> , que cont\u00e9m justamente o c\u00f3digo da resposta. Se recebermos <Response [200]> , perfeito, podemos prosseguir. O pr\u00f3ximo passo \u00e9 transformar esse requests.models em um dicion\u00e1rio no python utilizando o m\u00e9todo json() . A partir de agora podemos manipular o conte\u00fado propriamente dito da nossa requisi\u00e7\u00e3o, pois agora estamos trabalhando com um objeto de tipo <class 'dict'> . A cada vez que executarmos este c\u00f3digo e passarmos um cep v\u00e1lido, ficar\u00e1 salvo em um arquivo chamado 'enderecos.txt' as informa\u00e7\u00f5es que selecionamos. Observa\u00e7\u00e3o \u00b6 A proposta desse c\u00f3digo era apenas para explorar um pouco da combina\u00e7\u00e3o do m\u00f3dulo requests (que deve ser instalado via pip) e a manipula\u00e7\u00e3o de arquivos, usando m\u00e9todos diretamente do Python, como o open(), write(), readlines() entre outros. H\u00e1 muito a se fazer com respeito da tratativa de exce\u00e7\u00f5es. A primeira e mais \u00f3bvia seria que dentro do input apenas fosem aceitos apenas n\u00fameros e que o tamanho dessa string fosse igual a 8. Refer\u00eancias e links \u00fateis \u00b6 https://pypi.org/project/requests/ https://viacep.com.br","title":"Manipulando arquivos"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#manipulacao-de-arquivos","text":"A manipula\u00e7\u00e3o de arquivos sempre foi um tema central na computa\u00e7\u00e3o, pois afinal, n\u00e3o \u00e9 muito \u00fatil ter que executar repetidas vezes o mesmo c\u00f3digo para manter um hist\u00f3rico de resultados, j\u00e1 que, a linguagem de programa\u00e7\u00e3o em si, n\u00e3o \u00e9 capaz de armazenar dados. A manipula\u00e7\u00e3o de arquivos \u00e9 um recurso poderoso que serve basicamente para transferir informa\u00e7\u00e3o para algum arquivo de texto, que seja facilmente guardado por qualquer tipo de Sistema Operacional (*.html, *.txt, *.csv, *.md, etc.). Mas por se tratar do uso direto de recursos da m\u00e1quina, devemos monitorar esse uso para n\u00e3o prejudicar apenas a aplica\u00e7\u00e3o mas o sistema operacional de quem a usa. Mas por que manipular arquivos \u00e9 t\u00e3o especial? Porque permite de maneira simples a persist\u00eancia dos dados, ou seja, estamos transferindo o que o Python armazena na RAM para um HD/SSD. Como no simples exemplo abaixo: mensagem = \"Variavel para gravar informacao em tipo string\" with open ( \"output.txt\" , 'w' ) as arquivo : arquivo . write ( mensagem ) Como resultado deste comando temos a transfer\u00eancia do valor de string que a vari\u00e1vel mensagem assumiu temporariamente na mem\u00f3ria RAM e escrevemos em um HD/SSD, de modo a preservar a informa\u00e7\u00e3o, visto que o linguagens de programa\u00e7\u00e3o isoladas n\u00e3o possuem poder de persist\u00eancia de dados, precisando armazenar em arquivos diretamente no Sistema Operacional, ou, em softwares especializadas, como Bancos de Dados. Sem precisar importar nenhum m\u00f3dulo espec\u00edfico utilizamos a fun\u00e7\u00e3o open() que retorna um objeto de manipula\u00e7\u00e3o de arquivos. Dentro da fun\u00e7\u00e3o open() , passamos apenas dois par\u00e2metros: o nome do arquivo e o modo de abertura , e este arquivo ficou armazenada em uma vari\u00e1vel do nosso programa ( arquivo ) Alguns podem pensar que a fun\u00e7\u00e7\u00e3o open() ir\u00e1 abrir o arquivo no sistema operacional, mas n\u00e3o, ela apenas cria uma conex\u00e3o entre a mem\u00f3ria RAM e o HD/SSD. Usamos o m\u00e9todo write() para escrever dentro do arquivo, passando como argumento uma string ou mesmo uma outra vari\u00e1vel que aponte para uma string. Com o with no in\u00edcio da express\u00e3o estamos indicando que estamos trabalhando em contexto , ou seja, o arquivo ser\u00e1 automaticamente fechado ap\u00f3s o uso. Isso simplesmente nos ajuda a usar com precis\u00e3o os recursos da m\u00e1quina.","title":"Manipula\u00e7\u00e3o de Arquivos"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#criando-um-arquivo-txt-a-partir-de-uma-api","text":"Para tornar o uso de arquivos veross\u00edmil \u00e0 realidade vamos dar um exemplo bem casual. Suponha que voc\u00ea precise consultar um CEP e armazenaro bairro, a cidade e a UF. import requests mensagem = \" \\n Ol\u00e1, digite o cep que desejas armazenar: \\n \" cep = input ( mensagem ) url = f \"http://viacep.com.br/ws/ { cep } /json/\" retorno = requests . get ( url ) conteudo = retorno . json () bairro = conteudo [ 'bairro' ] localidade = conteudo [ 'localidade' ] uf = conteudo [ 'uf' ] endereco = f \" { bairro } \\t { localidade } \\t { uf } \" with open ( 'enderecos.txt' , 'a' ) as arquivo : arquivo . write ( endereco ) arquivo . write ( ' \\n ' ) Com o m\u00f3dulo requests fazemos uma requisi\u00e7\u00e3o \u00e0 URL da API ViaCep, e passamos atrav\u00e9s de uma f-string , a vari\u00e1vel contendo o n\u00famero do CEP em formato string. Recebemos dessa requisi\u00e7\u00e3o um objeto <class 'requests.models.Response'> , que cont\u00e9m justamente o c\u00f3digo da resposta. Se recebermos <Response [200]> , perfeito, podemos prosseguir. O pr\u00f3ximo passo \u00e9 transformar esse requests.models em um dicion\u00e1rio no python utilizando o m\u00e9todo json() . A partir de agora podemos manipular o conte\u00fado propriamente dito da nossa requisi\u00e7\u00e3o, pois agora estamos trabalhando com um objeto de tipo <class 'dict'> . A cada vez que executarmos este c\u00f3digo e passarmos um cep v\u00e1lido, ficar\u00e1 salvo em um arquivo chamado 'enderecos.txt' as informa\u00e7\u00f5es que selecionamos.","title":"Criando um arquivo .txt a partir de uma API"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#observacao","text":"A proposta desse c\u00f3digo era apenas para explorar um pouco da combina\u00e7\u00e3o do m\u00f3dulo requests (que deve ser instalado via pip) e a manipula\u00e7\u00e3o de arquivos, usando m\u00e9todos diretamente do Python, como o open(), write(), readlines() entre outros. H\u00e1 muito a se fazer com respeito da tratativa de exce\u00e7\u00f5es. A primeira e mais \u00f3bvia seria que dentro do input apenas fosem aceitos apenas n\u00fameros e que o tamanho dessa string fosse igual a 8.","title":"Observa\u00e7\u00e3o"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#referencias-e-links-uteis","text":"https://pypi.org/project/requests/ https://viacep.com.br","title":"Refer\u00eancias e links \u00fateis"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/","text":"Lista de Exerc\u00edcios Simples \u00b6 Exerc\u00edcios cl\u00e1ssicos da programa\u00e7\u00e3o resolvidos com poucas linhas de c\u00f3digo. A resolu\u00e7\u00e3o comentada voc\u00ea encontra no reposit\u00f3rio do Github . Caso voc\u00ea encontre um erro ou outra maneira de fazer, e quiser colaborar, voc\u00ea pode abrir uma Issue ou mesmo enviar um Pull Request. Entre em contato para saber mais. Lista Exerc\u00edcios: \u00b6 exerc_01 - Calcular a dura\u00e7\u00e3o de anos de um planeta. exerc_02 - Calcular a soma de d\u00edgitos de um n\u00famero rand\u00f4mico de 03 d\u00edgitos. exerc_03 - Achar a \u00e1rea e o per\u00edmetro de um tri\u00e2ngulo reto. exerc_04 - Achar \u00e1rea de superf\u00edcie de um cilindro. exerc_05 - Achar per\u00edmetro e \u00e1rea de um c\u00edrculo. exerc_06 - Achar a equa\u00e7\u00e3o da linha (y=kx+b) passando por dois pontos conhecidos. exerc_07 - Determinar o n\u00famero da letra no alfabeto. exerc_08 - O n\u00famero \u00e9 negativo ou positivo? exerc_09 - O n\u00famero \u00e9 par ou \u00edmpar? exerc_10 - Determinar o m\u00e1ximo inteiro de tr\u00eas. exerc_11 - Checando a divisibilidade de um inteiro por outro. exerc_12 - Convertendo Celsiu para Farenheit. exerc_13 - Calcular massa, densidade ou volume. exerc_14 - Em qual quadrante est\u00e1 o ponto? exerc_15 - Determinar quando um ano \u00e9 bissexto. exerc_16 - Resolver equa\u00e7\u00e3o de segundo grau. exerc_17 - Adivinhar o n\u00famero rand\u00f4mico exerc_18 - Sa\u00edda dos caracteres da tabela ASCII. exerc_19 - Imprimir uma tabuada. exerc_20 - A soma e o produto dos d\u00edgitos de um n\u00famero. exerc_21 - Facorial. exerc_22 - Sequ\u00eancia de Fibonacci. exerc_23 - Achar uma equa\u00e7\u00e3o quadr\u00e1tica que tenha solu\u00e7\u00f5es em uma faixa espec\u00edfica de coeficientes. exerc_24 - Inverter a ordem dos d\u00edgitos de um n\u00famero inteiro. exerc_25 - Selecionando inteiros de uma string. exerc_26 - Determinar a porcentagem de min\u00fasculas e mai\u00fasculas de uma string. exerc_27 - Preencher uma array com n\u00fameros rand\u00f4micos. exerc_28 - Separar positivos e negativos de uma array. exerc_29 - Disribuir valores por faixa. exerc_30 - Achar a palavra mais longa de uma string. exerc_31 - Converter um texto para uma lista de palavras sem pontua\u00e7\u00e3o. exerc_32 - Bubble sort - exerc_33 - Selection sort exerc_34 - O Crivo de Erat\u00f3stenes exerc_35 - Classificar palavras em uma string pelo n\u00famero de caract\u00e9res. exerc_36 - Preencher uma matrix com n\u00fameros rand\u00f4micos. exerc_37 - Somar itens de todas linhas e colunas de uma matriz. exerc_38 - A soma de elementos da diagonal de uma matriz. exerc_39 - D\u00edgitos estilizados com Unicode. exerc_40 - Calcular pre\u00e7o por quantidade de produtos. exerc_41 - Criar dicion\u00e1rio de duas listas. exerc_42 - Deletar um item rand\u00f4mico de um dicion\u00e1rios. Exerc\u00edcios utilizando fun\u00e7\u00f5es: \u00b6 exerc_43 - Achar m\u00e9dia de dois n\u00fameros. exerc_44 - Preencher uma lista com n\u00fameros. exerc_45 - Calcular m\u00e9dia aritm\u00e9tica de uma lista de elementos. exerc_46 - Sequ\u00eancia de Fibonacci. exerc_47 - Sequ\u00eancia de FIbonacci (recurs\u00e3o). exerc_48 - Fatorial (recurs\u00e3o). exerc_49 - Inverter a ordem de uma string. exerc_50 - Busca Bin\u00e1ria. exerc_51 - Checar se um n\u00famero \u00e9 primo.","title":"Exerc\u00edcio Simples"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/#lista-de-exercicios-simples","text":"Exerc\u00edcios cl\u00e1ssicos da programa\u00e7\u00e3o resolvidos com poucas linhas de c\u00f3digo. A resolu\u00e7\u00e3o comentada voc\u00ea encontra no reposit\u00f3rio do Github . Caso voc\u00ea encontre um erro ou outra maneira de fazer, e quiser colaborar, voc\u00ea pode abrir uma Issue ou mesmo enviar um Pull Request. Entre em contato para saber mais.","title":"Lista de Exerc\u00edcios Simples"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/#lista-exercicios","text":"exerc_01 - Calcular a dura\u00e7\u00e3o de anos de um planeta. exerc_02 - Calcular a soma de d\u00edgitos de um n\u00famero rand\u00f4mico de 03 d\u00edgitos. exerc_03 - Achar a \u00e1rea e o per\u00edmetro de um tri\u00e2ngulo reto. exerc_04 - Achar \u00e1rea de superf\u00edcie de um cilindro. exerc_05 - Achar per\u00edmetro e \u00e1rea de um c\u00edrculo. exerc_06 - Achar a equa\u00e7\u00e3o da linha (y=kx+b) passando por dois pontos conhecidos. exerc_07 - Determinar o n\u00famero da letra no alfabeto. exerc_08 - O n\u00famero \u00e9 negativo ou positivo? exerc_09 - O n\u00famero \u00e9 par ou \u00edmpar? exerc_10 - Determinar o m\u00e1ximo inteiro de tr\u00eas. exerc_11 - Checando a divisibilidade de um inteiro por outro. exerc_12 - Convertendo Celsiu para Farenheit. exerc_13 - Calcular massa, densidade ou volume. exerc_14 - Em qual quadrante est\u00e1 o ponto? exerc_15 - Determinar quando um ano \u00e9 bissexto. exerc_16 - Resolver equa\u00e7\u00e3o de segundo grau. exerc_17 - Adivinhar o n\u00famero rand\u00f4mico exerc_18 - Sa\u00edda dos caracteres da tabela ASCII. exerc_19 - Imprimir uma tabuada. exerc_20 - A soma e o produto dos d\u00edgitos de um n\u00famero. exerc_21 - Facorial. exerc_22 - Sequ\u00eancia de Fibonacci. exerc_23 - Achar uma equa\u00e7\u00e3o quadr\u00e1tica que tenha solu\u00e7\u00f5es em uma faixa espec\u00edfica de coeficientes. exerc_24 - Inverter a ordem dos d\u00edgitos de um n\u00famero inteiro. exerc_25 - Selecionando inteiros de uma string. exerc_26 - Determinar a porcentagem de min\u00fasculas e mai\u00fasculas de uma string. exerc_27 - Preencher uma array com n\u00fameros rand\u00f4micos. exerc_28 - Separar positivos e negativos de uma array. exerc_29 - Disribuir valores por faixa. exerc_30 - Achar a palavra mais longa de uma string. exerc_31 - Converter um texto para uma lista de palavras sem pontua\u00e7\u00e3o. exerc_32 - Bubble sort - exerc_33 - Selection sort exerc_34 - O Crivo de Erat\u00f3stenes exerc_35 - Classificar palavras em uma string pelo n\u00famero de caract\u00e9res. exerc_36 - Preencher uma matrix com n\u00fameros rand\u00f4micos. exerc_37 - Somar itens de todas linhas e colunas de uma matriz. exerc_38 - A soma de elementos da diagonal de uma matriz. exerc_39 - D\u00edgitos estilizados com Unicode. exerc_40 - Calcular pre\u00e7o por quantidade de produtos. exerc_41 - Criar dicion\u00e1rio de duas listas. exerc_42 - Deletar um item rand\u00f4mico de um dicion\u00e1rios.","title":"Lista Exerc\u00edcios:"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/#exercicios-utilizando-funcoes","text":"exerc_43 - Achar m\u00e9dia de dois n\u00fameros. exerc_44 - Preencher uma lista com n\u00fameros. exerc_45 - Calcular m\u00e9dia aritm\u00e9tica de uma lista de elementos. exerc_46 - Sequ\u00eancia de Fibonacci. exerc_47 - Sequ\u00eancia de FIbonacci (recurs\u00e3o). exerc_48 - Fatorial (recurs\u00e3o). exerc_49 - Inverter a ordem de uma string. exerc_50 - Busca Bin\u00e1ria. exerc_51 - Checar se um n\u00famero \u00e9 primo.","title":"Exerc\u00edcios utilizando fun\u00e7\u00f5es:"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/","text":"Python - Perguntas e Respostas \u00b6 O que \u00e9 Python? \u00b6 \u00c9 uma linguagem de alto n\u00edvel, interpretada, interativa e orientada a objetos. Python foi projetado para ser leg\u00edvel. Ela usa palavras em ingl\u00eas frequentemente onde as outras linguagens do tipo C usam pontua\u00e7\u00e3o, e tem menos elementos sint\u00e1ticos. Qual o nome de alguns recursos do Python? \u00b6 Suporte a Orienta\u00e7\u00e3o a Objeto mas tamb\u00e9m a programa\u00e7\u00e3o procedural. pode ser usada como linguagem de script ou como c\u00f3digo compilado para aplica\u00e7\u00f5es maiores. Alto n\u00edvel de dinamismo da tipagem de dados e da checagem do tipo de dados. Coletor de lixo, mecanismo de limpar a mem\u00f3rio do programa, \u00e9 autom\u00e1tico, nativo da linguagem. Qual \u00e9 o prop\u00f3sito da vari\u00e1vel de ambiente PYTHONPATH ? \u00b6 Tem um papel similar ao PATH. Essas vari\u00e1veis dizem ao Python onde locar os arquivos de m\u00f3dulos importados. Tamb\u00e9m deve incluir o diret\u00f3rio da biblioteca fonte e os diret\u00f3rios contendo o c\u00f3digo fonte do Python. PYTHONPATH \u00e9 pr\u00e9-configurado durante a instala\u00e7\u00e3o. Quais s\u00e3o os tipos de dados mais importantes do Python? \u00b6 Numbers , String, List, Tuple, Dictionary. Qual a diferen\u00e7a entre listas e tuplas ? \u00b6 A principal diferen\u00e7a entre listas e tuplas est\u00e1 na sintaxe: listas usam \"[ ]\" e tuplas usam \"( )\". Outra import\u00e2ncia fundamental \u00e9 que tuplas s\u00e3o apenas dados de leitura, elas s\u00e3o inalter\u00e1veis. O que s\u00e3o dicion\u00e1rios em Python ? \u00b6 \u00c9 um tipo de tabela hash. Dicion\u00e1rios trabalham como arrays associativos consistindo de pares de chave-valor. Uma chave ser\u00e1 um tipo de dado e um valor, por sua vez, pode ser um Objeto arbitr\u00e1rio. Como criar um dicion\u00e1rio ? \u00b6 Dicion\u00e1rios s\u00e3o identificados por serem envolvidos com {} e a sintaxe \u00e9: Como acessar chaves de um dicion\u00e1rios ? \u00b6 Como converter um dado tipo string para do tipo int ? \u00b6 Como pegar um n\u00famero ramd\u00f4mico dentro de um certo alcance? \u00b6 Como checar que todos os caracteres de uma string s\u00e3o alfanum\u00e9ricos ou apenas num\u00e9ricos? \u00b6 O Python possui um compilador pr\u00f3prio ? \u00b6 Sim, e n\u00e3o precisamos nos procupar com isso, pois o compilador do Pyhton \u00e9 autom\u00e1tico. Qual vers\u00e3o do Python devo usar ? \u00b6 Em ambiente de estudos/testes \u00e9 comum usar a vers\u00e3o mais recente (no momento 3.10), mas a depender do projeto voc\u00ea poder\u00e1 usar alguma 3.x, e at\u00e9 mesmo 2.x.","title":"Perguntas e Respostas"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#python-perguntas-e-respostas","text":"","title":"Python - Perguntas e Respostas"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-que-e-python","text":"\u00c9 uma linguagem de alto n\u00edvel, interpretada, interativa e orientada a objetos. Python foi projetado para ser leg\u00edvel. Ela usa palavras em ingl\u00eas frequentemente onde as outras linguagens do tipo C usam pontua\u00e7\u00e3o, e tem menos elementos sint\u00e1ticos.","title":"O que \u00e9 Python?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-o-nome-de-alguns-recursos-do-python","text":"Suporte a Orienta\u00e7\u00e3o a Objeto mas tamb\u00e9m a programa\u00e7\u00e3o procedural. pode ser usada como linguagem de script ou como c\u00f3digo compilado para aplica\u00e7\u00f5es maiores. Alto n\u00edvel de dinamismo da tipagem de dados e da checagem do tipo de dados. Coletor de lixo, mecanismo de limpar a mem\u00f3rio do programa, \u00e9 autom\u00e1tico, nativo da linguagem.","title":"Qual o nome de alguns recursos do Python?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-e-o-proposito-da-variavel-de-ambiente-pythonpath","text":"Tem um papel similar ao PATH. Essas vari\u00e1veis dizem ao Python onde locar os arquivos de m\u00f3dulos importados. Tamb\u00e9m deve incluir o diret\u00f3rio da biblioteca fonte e os diret\u00f3rios contendo o c\u00f3digo fonte do Python. PYTHONPATH \u00e9 pr\u00e9-configurado durante a instala\u00e7\u00e3o.","title":"Qual \u00e9 o prop\u00f3sito da vari\u00e1vel de ambiente PYTHONPATH ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#quais-sao-os-tipos-de-dados-mais-importantes-do-python","text":"Numbers , String, List, Tuple, Dictionary.","title":"Quais s\u00e3o os tipos de dados mais importantes do Python?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-a-diferenca-entre-listas-e-tuplas","text":"A principal diferen\u00e7a entre listas e tuplas est\u00e1 na sintaxe: listas usam \"[ ]\" e tuplas usam \"( )\". Outra import\u00e2ncia fundamental \u00e9 que tuplas s\u00e3o apenas dados de leitura, elas s\u00e3o inalter\u00e1veis.","title":"Qual a diferen\u00e7a entre listas e tuplas ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-que-sao-dicionarios-em-python","text":"\u00c9 um tipo de tabela hash. Dicion\u00e1rios trabalham como arrays associativos consistindo de pares de chave-valor. Uma chave ser\u00e1 um tipo de dado e um valor, por sua vez, pode ser um Objeto arbitr\u00e1rio.","title":"O que s\u00e3o dicion\u00e1rios em Python ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-criar-um-dicionario","text":"Dicion\u00e1rios s\u00e3o identificados por serem envolvidos com {} e a sintaxe \u00e9:","title":"Como criar um dicion\u00e1rio ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-acessar-chaves-de-um-dicionarios","text":"","title":"Como acessar chaves de um dicion\u00e1rios ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-converter-um-dado-tipo-string-para-do-tipo-int","text":"","title":"Como converter um dado tipo string para do tipo int ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-pegar-um-numero-ramdomico-dentro-de-um-certo-alcance","text":"","title":"Como pegar um n\u00famero ramd\u00f4mico dentro de um certo alcance?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-checar-que-todos-os-caracteres-de-uma-string-sao-alfanumericos-ou-apenas-numericos","text":"","title":"Como checar que todos os caracteres de uma string s\u00e3o alfanum\u00e9ricos ou apenas num\u00e9ricos?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-python-possui-um-compilador-proprio","text":"Sim, e n\u00e3o precisamos nos procupar com isso, pois o compilador do Pyhton \u00e9 autom\u00e1tico.","title":"O Python possui um compilador pr\u00f3prio ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-versao-do-python-devo-usar","text":"Em ambiente de estudos/testes \u00e9 comum usar a vers\u00e3o mais recente (no momento 3.10), mas a depender do projeto voc\u00ea poder\u00e1 usar alguma 3.x, e at\u00e9 mesmo 2.x.","title":"Qual vers\u00e3o do Python devo usar ?"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/teste/","text":"Teste \u00b6 exemplioficando cria\u00e7\u00e3o de uma page para p o portal \u00b6 item 01 item 02 item 03 \ud83d\udc0d \u2615","title":"Teste"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/teste/#teste","text":"","title":"Teste"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/teste/#exemplioficando-criacao-de-uma-page-para-p-o-portal","text":"item 01 item 02 item 03 \ud83d\udc0d \u2615","title":"exemplioficando cria\u00e7\u00e3o de uma page para p o portal"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/","text":"O M\u00f3dulo Turtle \u00b6 Turtle \u00e9 um m\u00f3dulo embutido (built-in) do Python que tem por objetivo ensinar programa\u00e7\u00e3o \u00e0 crian\u00e7as. Com este m\u00f3dulo temos essencialmente duas classes: Screen() e Turtle(). Aqui est\u00e3o alguns exemplos do que \u00e9 poss\u00edvel fazer com a Tartaruga. Estes exemplos foram retirados do Portal Acervo Lima , que por sua vez s\u00e3o tradu\u00e7\u00f5es do portal GeeksforGeeks . Todos exemplos est\u00e3o sob licen\u00e7a CreativeCommons . Rel\u00f3gio Digital \u00b6 import time import datetime as dt import turtle # cria duas inst\u00e2ncias do objeto turtle t = turtle . Turtle () # para a hora em si t1 = turtle . Turtle () # para a borda # cria a tela (SCREEN) s = turtle . Screen () # escolhe a cor de fundo da tela s . bgcolor ( \"green\" ) # cria tr\u00eas vari\u00e1veis que armazenam a hora atual segundos = dt . datetime . now () . second minutos = dt . datetime . now () . minute hora = dt . datetime . now () . hour # define a grossura (width) e a cor da caneta da borda para a inst\u00e2ncia t1 t1 . pensize ( 3 ) t1 . color ( 'black' ) t1 . penup () t1 . goto ( - 20 , 0 ) t1 . pendown () # desenha a borda for i in range ( 2 ): t1 . forward ( 200 ) # dist\u00e2ncia horizontal t1 . left ( 90 ) # graus para a esquerda t1 . forward ( 70 ) # dist\u00e2ncia vertical t1 . left ( 90 ) # retorna para direita # esconde a tartaruga t1 t1 . hideturtle () # cria um loop infinito que mant\u00e9m a hora atualizada while True : # mant\u00e9m escondida a tartaruga t t . hideturtle () t . clear () # usa o m\u00e9todo write() passando as horas, minutos e segundo # usa-se o zfill() para que sempre tenham duas casas, p.ex. quando for \"2 horas\" mostrar\u00e1 \"02 horas\" # e define o par\u00e2metro font=() t . write ( str ( hora ) . zfill ( 2 ) + \":\" + str ( minutos ) . zfill ( 2 ) + \":\" + str ( segundos ) . zfill ( 2 ), font = ( \"Arial Narrow\" , 35 , \"bold\" )) # pausa o programa por 01 segundo time . sleep ( 1 ) # aumenta manualmente os segundos segundos += 1 # l\u00f3gica de um rel\u00f3gio digital if segundos == 60 : segundos = 0 minutos += 1 if minutos == 60 : minutos = 0 hora += 1 if hora == 24 : hora = 1 Arco-\u00edris \u00b6 import turtle import time sc = turtle . Screen () pen = turtle . Turtle () def semi_circle ( col , rad , val ): # atribui cor \u00e0 caneta pen . color ( col ) # desenha um semicirculo com o m\u00e9todo circle() # no caso, -180 \u00e9 um par\u00e2metro opcional, por default circle() desenha um circulo completo. pen . circle ( rad , - 180 ) # levanta a caneta, ou seja, N\u00c3O desenha enquanto se move pen . up () # reposiciona a caneta pen . setpos ( val , 0 ) # abaixa a caneta e reposiciona o \u00e2ngulo pen . down () pen . right ( 180 ) col = [ 'violet' , 'indigo' , 'blue' , 'green' , 'yellow' , 'orange' , 'red' ] # tamanho da tela sc . setup ( 600 , 600 ) # cor de fundo sc . bgcolor ( '#d6ffff' ) pen . right ( 90 ) # angulo a direita pen . width ( 10 ) # espessura do contorno pen . speed ( 7 ) # velocidade do desenho # cria um la\u00e7o iterativo que ir\u00e1 ser executadoi 07 vezes # para cada itera\u00e7\u00e3o ser\u00e1 selecionado uma cor diferente e # a caneta ser\u00e1 reposicionada for i in range ( 7 ): semi_circle ( col [ i ], 10 * ( i + 8 ), - 10 * ( i + 1 )) time . sleep ( 1 ) pen . hideturtle () Oct\u00f3gono \u00b6 import turtle import time ws = turtle . Screen () t = turtle . Turtle () t . pencolor ( \"blue\" ) t . speed ( 3 ) t . pensize ( 5 ) # o loop abaixo ser\u00e1 executado 08 vezes # a cada itera\u00e7\u00e3o a caneta andar\u00e1 100 e depois girar\u00e1 45\u00ba \u00e0 esquerda for i in range ( 8 ): t . forward ( 100 ) t . left ( 45 ) time . sleep ( 2 ) Teia de aranha \u00b6 \"\"\"\" O la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia, enquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas. \"\"\" # importando o m\u00f3dulo turtle como \"t\", n\u00e3o precisamos instanciar a classe import turtle as t import time t . speed ( 2 ) # A tartaruga \u00e9 movida para frente e para tr\u00e1s para construir primeiro os fios. # A tartaruga \u00e9 girada em um \u00e2ngulo de 60 graus para desenhar cada fio . for i in range ( 6 ): t . forward ( 100 ) t . backward ( 100 ) t . right ( 60 ) side = 50 # O comprimento da rosca espiral \u00e9 definido como 50 t . fillcolor ( \"Yellow\" ) t . begin_fill () # O la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia, # enquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas. for i in range ( 10 ): t . penup () t . goto ( 0 , 0 ) t . pendown () t . setheading ( 0 ) t . forward ( side ) t . right ( 120 ) for j in range ( 6 ): t . forward ( side - 2 ) t . right ( 60 ) side = side - 10 # reduzimos o tamanho em 10 a cada itera\u00e7\u00e3o. t . end_fill () time . sleep ( 2 ) Gr\u00e1fico de Barras \u00b6 # Python program to draw a turtle import turtle # Function that draws the turtle def desenha_barras ( t , height , color ): # Come\u00e7a o preenchimento t . fillcolor ( color ) t . begin_fill () t . left ( 90 ) t . forward ( height ) t . write ( str ( height )) t . right ( 90 ) t . forward ( 40 ) t . right ( 90 ) t . forward ( height ) t . left ( 90 ) # para o preenchimento t . end_fill () # xs \u00e9 uma lista que recebe n\u00famero de barras e suas alturas xs = [ 48 , 117 , 150 , 96 , 134 , 160 , 90 ] clrs = [ \"green\" , \"red\" , \"yellow\" , \"black\" , \"pink\" , \"brown\" , \"blue\" ] maxheight = max ( xs ) numbars = len ( xs ) border = 7 # Set up the window and its # attributes wn = turtle . Screen () wn . setworldcoordinates ( 0 - border , 0 - border , 80 * numbars + border , maxheight + border ) # Cria inst\u00e2ncia da classe tess = turtle . Turtle () tess . pensize ( 3 ) for i in range ( len ( xs )): desenha_barras ( tess , xs [ i ], clrs [ i ]) wn . exitonclick () ``` ## Estrela ! [ estrela ]( https : // user - images . githubusercontent . com / 72423464 / 163490419 - 5e9 b995a - 5e73 - 4065 - b7f1 - a2a4ce163318 . gif ) ``` python estrela . py Smile \u00b6 import turtle import time pen = turtle . Turtle () def eye ( col , rad ): pen . down () pen . fillcolor ( col ) pen . begin_fill () pen . circle ( rad ) pen . end_fill () pen . up () pen . fillcolor ( 'yellow' ) pen . begin_fill () pen . circle ( 100 ) pen . end_fill () pen . up () pen . goto ( - 40 , 120 ) eye ( 'white' , 15 ) pen . goto ( - 37 , 125 ) eye ( 'black' , 5 ) pen . goto ( 40 , 120 ) eye ( 'white' , 15 ) pen . goto ( 40 , 125 ) eye ( 'black' , 5 ) pen . goto ( 0 , 75 ) eye ( 'black' , 6 ) pen . goto ( - 40 , 85 ) pen . down () pen . right ( 90 ) pen . circle ( 40 , 180 ) pen . up () pen . goto ( - 10 , 45 ) pen . down () pen . right ( 180 ) pen . fillcolor ( 'red' ) pen . begin_fill () pen . circle ( 10 , 180 ) pen . end_fill () pen . hideturtle () time . sleep ( 2 ) Rel\u00f3gio \u00b6 import turtle import time screen = turtle . Screen () # configura\u00e7\u00e3o da tela screen . setup ( 500 , 500 ) # inst\u00e2ncia turtle clk = turtle . Turtle () # cor da tartaruga clk . color ( 'Green' ) # espessura contorno clk . width ( 4 ) def draw_hour_hand (): clk . penup () clk . home () clk . right ( 90 ) clk . pendown () clk . forward ( 100 ) # valores numericos do relogio val = 0 # loop para imprimir numeros for i in range ( 12 ): # incrementa 1 val += 1 # move a tartaruga clk . penup () # movimento circular clk . setheading ( - 30 * ( i + 3 ) + 75 ) clk . forward ( 22 ) # coloca caneta na superf\u00edcie clk . pendown () # move para linha tracejada clk . forward ( 15 ) clk . penup () clk . forward ( 20 ) # escreve numeros clk . write ( str ( val ), align = \"center\" , font = ( \"Arial\" , 12 , \"normal\" )) clk . setpos ( 2 , - 112 ) clk . pendown () clk . width ( 2 ) # preencher de verde clk . fillcolor ( 'Green' ) # come\u00e7a preenchimento clk . begin_fill () # faz circulo de radius 5 clk . circle ( 5 ) # fim preenchimento clk . end_fill () clk . penup () draw_hour_hand () clk . setpos ( - 20 , - 64 ) clk . pendown () clk . penup () # seleciona posi\u00e7\u00e3o e escreve texto clk . setpos ( - 30 , - 170 ) clk . pendown () clk . write ( ' Rel\u00f3gio com \\n Turtle' , font = ( \"Arial\" , 12 , \"normal\" )) clk . hideturtle () turtle . done () time . sleep ( 2 ) Espir\u00f3grafo \u00b6 import turtle as tt import time tt . bgcolor ( 'black' ) tt . pensize ( 2 ) tt . speed ( 15 ) for i in range ( 6 ): for color in ( 'red' , 'magenta' , 'blue' , 'cyan' , 'green' , 'white' , 'yellow' ): tt . color ( color ) tt . circle ( 100 ) tt . left ( 10 ) tt . hideturtle () time . sleep ( 2 )","title":"Exemplos m\u00f3dulo Turtle"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#o-modulo-turtle","text":"Turtle \u00e9 um m\u00f3dulo embutido (built-in) do Python que tem por objetivo ensinar programa\u00e7\u00e3o \u00e0 crian\u00e7as. Com este m\u00f3dulo temos essencialmente duas classes: Screen() e Turtle(). Aqui est\u00e3o alguns exemplos do que \u00e9 poss\u00edvel fazer com a Tartaruga. Estes exemplos foram retirados do Portal Acervo Lima , que por sua vez s\u00e3o tradu\u00e7\u00f5es do portal GeeksforGeeks . Todos exemplos est\u00e3o sob licen\u00e7a CreativeCommons .","title":"O M\u00f3dulo Turtle"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#relogio-digital","text":"import time import datetime as dt import turtle # cria duas inst\u00e2ncias do objeto turtle t = turtle . Turtle () # para a hora em si t1 = turtle . Turtle () # para a borda # cria a tela (SCREEN) s = turtle . Screen () # escolhe a cor de fundo da tela s . bgcolor ( \"green\" ) # cria tr\u00eas vari\u00e1veis que armazenam a hora atual segundos = dt . datetime . now () . second minutos = dt . datetime . now () . minute hora = dt . datetime . now () . hour # define a grossura (width) e a cor da caneta da borda para a inst\u00e2ncia t1 t1 . pensize ( 3 ) t1 . color ( 'black' ) t1 . penup () t1 . goto ( - 20 , 0 ) t1 . pendown () # desenha a borda for i in range ( 2 ): t1 . forward ( 200 ) # dist\u00e2ncia horizontal t1 . left ( 90 ) # graus para a esquerda t1 . forward ( 70 ) # dist\u00e2ncia vertical t1 . left ( 90 ) # retorna para direita # esconde a tartaruga t1 t1 . hideturtle () # cria um loop infinito que mant\u00e9m a hora atualizada while True : # mant\u00e9m escondida a tartaruga t t . hideturtle () t . clear () # usa o m\u00e9todo write() passando as horas, minutos e segundo # usa-se o zfill() para que sempre tenham duas casas, p.ex. quando for \"2 horas\" mostrar\u00e1 \"02 horas\" # e define o par\u00e2metro font=() t . write ( str ( hora ) . zfill ( 2 ) + \":\" + str ( minutos ) . zfill ( 2 ) + \":\" + str ( segundos ) . zfill ( 2 ), font = ( \"Arial Narrow\" , 35 , \"bold\" )) # pausa o programa por 01 segundo time . sleep ( 1 ) # aumenta manualmente os segundos segundos += 1 # l\u00f3gica de um rel\u00f3gio digital if segundos == 60 : segundos = 0 minutos += 1 if minutos == 60 : minutos = 0 hora += 1 if hora == 24 : hora = 1","title":"Rel\u00f3gio Digital"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#arco-iris","text":"import turtle import time sc = turtle . Screen () pen = turtle . Turtle () def semi_circle ( col , rad , val ): # atribui cor \u00e0 caneta pen . color ( col ) # desenha um semicirculo com o m\u00e9todo circle() # no caso, -180 \u00e9 um par\u00e2metro opcional, por default circle() desenha um circulo completo. pen . circle ( rad , - 180 ) # levanta a caneta, ou seja, N\u00c3O desenha enquanto se move pen . up () # reposiciona a caneta pen . setpos ( val , 0 ) # abaixa a caneta e reposiciona o \u00e2ngulo pen . down () pen . right ( 180 ) col = [ 'violet' , 'indigo' , 'blue' , 'green' , 'yellow' , 'orange' , 'red' ] # tamanho da tela sc . setup ( 600 , 600 ) # cor de fundo sc . bgcolor ( '#d6ffff' ) pen . right ( 90 ) # angulo a direita pen . width ( 10 ) # espessura do contorno pen . speed ( 7 ) # velocidade do desenho # cria um la\u00e7o iterativo que ir\u00e1 ser executadoi 07 vezes # para cada itera\u00e7\u00e3o ser\u00e1 selecionado uma cor diferente e # a caneta ser\u00e1 reposicionada for i in range ( 7 ): semi_circle ( col [ i ], 10 * ( i + 8 ), - 10 * ( i + 1 )) time . sleep ( 1 ) pen . hideturtle ()","title":"Arco-\u00edris"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#octogono","text":"import turtle import time ws = turtle . Screen () t = turtle . Turtle () t . pencolor ( \"blue\" ) t . speed ( 3 ) t . pensize ( 5 ) # o loop abaixo ser\u00e1 executado 08 vezes # a cada itera\u00e7\u00e3o a caneta andar\u00e1 100 e depois girar\u00e1 45\u00ba \u00e0 esquerda for i in range ( 8 ): t . forward ( 100 ) t . left ( 45 ) time . sleep ( 2 )","title":"Oct\u00f3gono"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#teia-de-aranha","text":"\"\"\"\" O la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia, enquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas. \"\"\" # importando o m\u00f3dulo turtle como \"t\", n\u00e3o precisamos instanciar a classe import turtle as t import time t . speed ( 2 ) # A tartaruga \u00e9 movida para frente e para tr\u00e1s para construir primeiro os fios. # A tartaruga \u00e9 girada em um \u00e2ngulo de 60 graus para desenhar cada fio . for i in range ( 6 ): t . forward ( 100 ) t . backward ( 100 ) t . right ( 60 ) side = 50 # O comprimento da rosca espiral \u00e9 definido como 50 t . fillcolor ( \"Yellow\" ) t . begin_fill () # O la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia, # enquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas. for i in range ( 10 ): t . penup () t . goto ( 0 , 0 ) t . pendown () t . setheading ( 0 ) t . forward ( side ) t . right ( 120 ) for j in range ( 6 ): t . forward ( side - 2 ) t . right ( 60 ) side = side - 10 # reduzimos o tamanho em 10 a cada itera\u00e7\u00e3o. t . end_fill () time . sleep ( 2 )","title":"Teia de aranha"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#grafico-de-barras","text":"# Python program to draw a turtle import turtle # Function that draws the turtle def desenha_barras ( t , height , color ): # Come\u00e7a o preenchimento t . fillcolor ( color ) t . begin_fill () t . left ( 90 ) t . forward ( height ) t . write ( str ( height )) t . right ( 90 ) t . forward ( 40 ) t . right ( 90 ) t . forward ( height ) t . left ( 90 ) # para o preenchimento t . end_fill () # xs \u00e9 uma lista que recebe n\u00famero de barras e suas alturas xs = [ 48 , 117 , 150 , 96 , 134 , 160 , 90 ] clrs = [ \"green\" , \"red\" , \"yellow\" , \"black\" , \"pink\" , \"brown\" , \"blue\" ] maxheight = max ( xs ) numbars = len ( xs ) border = 7 # Set up the window and its # attributes wn = turtle . Screen () wn . setworldcoordinates ( 0 - border , 0 - border , 80 * numbars + border , maxheight + border ) # Cria inst\u00e2ncia da classe tess = turtle . Turtle () tess . pensize ( 3 ) for i in range ( len ( xs )): desenha_barras ( tess , xs [ i ], clrs [ i ]) wn . exitonclick () ``` ## Estrela ! [ estrela ]( https : // user - images . githubusercontent . com / 72423464 / 163490419 - 5e9 b995a - 5e73 - 4065 - b7f1 - a2a4ce163318 . gif ) ``` python estrela . py","title":"Gr\u00e1fico de Barras"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#smile","text":"import turtle import time pen = turtle . Turtle () def eye ( col , rad ): pen . down () pen . fillcolor ( col ) pen . begin_fill () pen . circle ( rad ) pen . end_fill () pen . up () pen . fillcolor ( 'yellow' ) pen . begin_fill () pen . circle ( 100 ) pen . end_fill () pen . up () pen . goto ( - 40 , 120 ) eye ( 'white' , 15 ) pen . goto ( - 37 , 125 ) eye ( 'black' , 5 ) pen . goto ( 40 , 120 ) eye ( 'white' , 15 ) pen . goto ( 40 , 125 ) eye ( 'black' , 5 ) pen . goto ( 0 , 75 ) eye ( 'black' , 6 ) pen . goto ( - 40 , 85 ) pen . down () pen . right ( 90 ) pen . circle ( 40 , 180 ) pen . up () pen . goto ( - 10 , 45 ) pen . down () pen . right ( 180 ) pen . fillcolor ( 'red' ) pen . begin_fill () pen . circle ( 10 , 180 ) pen . end_fill () pen . hideturtle () time . sleep ( 2 )","title":"Smile"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#relogio","text":"import turtle import time screen = turtle . Screen () # configura\u00e7\u00e3o da tela screen . setup ( 500 , 500 ) # inst\u00e2ncia turtle clk = turtle . Turtle () # cor da tartaruga clk . color ( 'Green' ) # espessura contorno clk . width ( 4 ) def draw_hour_hand (): clk . penup () clk . home () clk . right ( 90 ) clk . pendown () clk . forward ( 100 ) # valores numericos do relogio val = 0 # loop para imprimir numeros for i in range ( 12 ): # incrementa 1 val += 1 # move a tartaruga clk . penup () # movimento circular clk . setheading ( - 30 * ( i + 3 ) + 75 ) clk . forward ( 22 ) # coloca caneta na superf\u00edcie clk . pendown () # move para linha tracejada clk . forward ( 15 ) clk . penup () clk . forward ( 20 ) # escreve numeros clk . write ( str ( val ), align = \"center\" , font = ( \"Arial\" , 12 , \"normal\" )) clk . setpos ( 2 , - 112 ) clk . pendown () clk . width ( 2 ) # preencher de verde clk . fillcolor ( 'Green' ) # come\u00e7a preenchimento clk . begin_fill () # faz circulo de radius 5 clk . circle ( 5 ) # fim preenchimento clk . end_fill () clk . penup () draw_hour_hand () clk . setpos ( - 20 , - 64 ) clk . pendown () clk . penup () # seleciona posi\u00e7\u00e3o e escreve texto clk . setpos ( - 30 , - 170 ) clk . pendown () clk . write ( ' Rel\u00f3gio com \\n Turtle' , font = ( \"Arial\" , 12 , \"normal\" )) clk . hideturtle () turtle . done () time . sleep ( 2 )","title":"Rel\u00f3gio"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#espirografo","text":"import turtle as tt import time tt . bgcolor ( 'black' ) tt . pensize ( 2 ) tt . speed ( 15 ) for i in range ( 6 ): for color in ( 'red' , 'magenta' , 'blue' , 'cyan' , 'green' , 'white' , 'yellow' ): tt . color ( color ) tt . circle ( 100 ) tt . left ( 10 ) tt . hideturtle () time . sleep ( 2 )","title":"Espir\u00f3grafo"},{"location":"banco_de_dados/ini/","text":"Banco de Dados \u00b6 Objetivos: Projetos e implementa\u00e7\u00f5es de bancos de dados. Ementa: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM). Bibliografia Base: - Elmasri, Ramez; Navathe, Shamkant B. Sistema de Banco de Dados. 2018. Pearson. - DATE, C. J. Introdu\u00e7\u00e3o a Sistemas de Bancos de Dados. Rio de Janeiro: Elsevier, 2003. - ELMASRI, R.; NAVATHE, S. B. Sistemas de Banco de Dados. S\u00e3o Paulo: Pearson Addison Wesley, 2011. Bibliografia Complementar: - Sadalage, P. J., & Fowler, M. NoSQL distilled: a brief guide to the emerging world of polyglot persistence. 2013. Pearson Education. - Date, C. J. An introduction to database systems. 1981. Pearson Education India. - Neeraj, N. (2013). Mastering Apache Cassandra. Packt Publishing Ltd. - Banker, K. (2011). MongoDB in action. Manning Publications Co.","title":"inicio"},{"location":"banco_de_dados/ini/#banco-de-dados","text":"Objetivos: Projetos e implementa\u00e7\u00f5es de bancos de dados. Ementa: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM). Bibliografia Base: - Elmasri, Ramez; Navathe, Shamkant B. Sistema de Banco de Dados. 2018. Pearson. - DATE, C. J. Introdu\u00e7\u00e3o a Sistemas de Bancos de Dados. Rio de Janeiro: Elsevier, 2003. - ELMASRI, R.; NAVATHE, S. B. Sistemas de Banco de Dados. S\u00e3o Paulo: Pearson Addison Wesley, 2011. Bibliografia Complementar: - Sadalage, P. J., & Fowler, M. NoSQL distilled: a brief guide to the emerging world of polyglot persistence. 2013. Pearson Education. - Date, C. J. An introduction to database systems. 1981. Pearson Education India. - Neeraj, N. (2013). Mastering Apache Cassandra. Packt Publishing Ltd. - Banker, K. (2011). MongoDB in action. Manning Publications Co.","title":"Banco de Dados"},{"location":"banco_de_dados/nosql/","text":"NOSQL - Not Only SQL [em constru\u00e7\u00e3o] \u00b6 NoSQL fornece um modelo de dados que se adapta melhor \u00e0s necessidades da aplica\u00e7\u00e3o (modelagem mais r\u00e1pida e menos c\u00f3digo). Grande quantidade de dados: Necessita de processamento em cluster (armazenamento dividido entre v\u00e1rios servidores). Favorece replica\u00e7\u00e3o de dados e escalabilidade. Replica\u00e7\u00e3o \u00b6 Master-Slave O slave ter\u00e1 a c\u00f3pia dos dados do master. Escrita ocorre apenas no master e leitura em ambos. \u00e9 importante avaliar a quest\u00e3o sobre consist\u00eancia e performance quando n\u00e3o h\u00e1 falhas na comunica\u00e7\u00e3o. Masterless muitos bancos NoSQL s\u00e3o baseados na ideia de que qualquer servidor pode receber requisi\u00e7\u00f5es de leitura e escrita. Assim, mesmo com falha em um dos servidores do cluster, o servi\u00e7o se mantem dispon\u00edvel. Teorema CAP (CAP Theorem): * Consist\u00eancia (C - Consistency); * Alta disponibilidade (A - Availability); * Toler\u00e2ncia a particionamento dos dados na rede (P - Partition-tolerance) Tipos de Banco de Dados NOSQL \u00b6 Banco de dados chave-valor: os registros pertencem a mesma cole\u00e7\u00e3o de elementos, e todos possuem uma chave \u00fanica. (Redis) Fam\u00edlia de colunas (colunares): todos os registros fazem parte da mesma tabela, mas podem conter diferentes colunas. (cassandra) Documento: registros em cole\u00e7\u00f5es espec\u00edficas, mas n\u00e3o h\u00e1 esquema fixo de registros (MongoDB) Grafo: registros s\u00e3o n\u00f3s de um grafo e s\u00e3o interligados por relacionamentos.(Neo4j)","title":"NoSQL"},{"location":"banco_de_dados/nosql/#nosql-not-only-sql-em-construcao","text":"NoSQL fornece um modelo de dados que se adapta melhor \u00e0s necessidades da aplica\u00e7\u00e3o (modelagem mais r\u00e1pida e menos c\u00f3digo). Grande quantidade de dados: Necessita de processamento em cluster (armazenamento dividido entre v\u00e1rios servidores). Favorece replica\u00e7\u00e3o de dados e escalabilidade.","title":"NOSQL - Not Only SQL [em constru\u00e7\u00e3o]"},{"location":"banco_de_dados/nosql/#replicacao","text":"Master-Slave O slave ter\u00e1 a c\u00f3pia dos dados do master. Escrita ocorre apenas no master e leitura em ambos. \u00e9 importante avaliar a quest\u00e3o sobre consist\u00eancia e performance quando n\u00e3o h\u00e1 falhas na comunica\u00e7\u00e3o. Masterless muitos bancos NoSQL s\u00e3o baseados na ideia de que qualquer servidor pode receber requisi\u00e7\u00f5es de leitura e escrita. Assim, mesmo com falha em um dos servidores do cluster, o servi\u00e7o se mantem dispon\u00edvel. Teorema CAP (CAP Theorem): * Consist\u00eancia (C - Consistency); * Alta disponibilidade (A - Availability); * Toler\u00e2ncia a particionamento dos dados na rede (P - Partition-tolerance)","title":"Replica\u00e7\u00e3o"},{"location":"banco_de_dados/nosql/#tipos-de-banco-de-dados-nosql","text":"Banco de dados chave-valor: os registros pertencem a mesma cole\u00e7\u00e3o de elementos, e todos possuem uma chave \u00fanica. (Redis) Fam\u00edlia de colunas (colunares): todos os registros fazem parte da mesma tabela, mas podem conter diferentes colunas. (cassandra) Documento: registros em cole\u00e7\u00f5es espec\u00edficas, mas n\u00e3o h\u00e1 esquema fixo de registros (MongoDB) Grafo: registros s\u00e3o n\u00f3s de um grafo e s\u00e3o interligados por relacionamentos.(Neo4j)","title":"Tipos de Banco de Dados NOSQL"},{"location":"banco_de_dados/relacional/","text":"Banco de Dados Relacional [em constru\u00e7\u00e3o] \u00b6 O modelo de dados relacional foi introduzido por Edgar Codd em 1970 (IBM). \u00c9 um modelo formal, baseado na teoria matem\u00e1tica das rela\u00e7\u00f5es entre conjuntos. O modelo de dados relacional \u00e9 uma linguagem unificada para defini\u00e7\u00e3o e manipula\u00e7\u00e3o de dados. Os SGBDs Relacionais mais conhecidos hoje s\u00e3o MySQL (Oracle), Oracle (Oracle) e SQL Server (Microsoft). A ideia de modelo relacional era representar entidade e relacionamento de maneira uniforme. No modelo relacional, cada linha na tabela corresponde a uma entidade ou relacionamento do mundo real. As colunas no modelo relacional (atributos de uma entidade), especificam como interpretar os valores de dados em cada linha. ACID \u00b6 Atomicidade (a transa\u00e7\u00e3o \u00e9 executada totalmente ou \u00e9 executada) Consist\u00eancia (sistema sempre consistente ap\u00f3s uma opera\u00e7\u00e3o) Isolamento (transa\u00e7\u00e3o n\u00e3o sofre interfer\u00eancia de outra transa\u00e7\u00e3o concorrente) Durabilidade (o que foi salvo n\u00e3o \u00e9 mais perdido) For\u00e7a a consist\u00eancia ao final de cada transa\u00e7\u00e3o SGBD \u00b6 Pacote de software que facilita a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de um banco de dados. \u2022 A manipula\u00e7\u00e3o dos dados \u00e9 atrav\u00e9s da realiza\u00e7\u00e3o de opera\u00e7\u00f5es como consultas, altera\u00e7\u00e3o de dados, emiss\u00e3o de relat\u00f3rios, etc. Sistema de Banco de Dados \u00b6 Sistemas de BD s\u00e3o sistemas desenvolvidos com fun\u00e7\u00f5es espec\u00edficas, que usam Banco de dados, desenvolvidos em SGBDs. Sozinho um SGBD n\u00e3o significa nada, com um BD e um programa escrito para sua manipula\u00e7\u00e3o forma-se um sistema de BD. Modelo de Dados \u00b6 Modelos de dados conceituais (alto n\u00edvel) Modelos de dados f\u00edsicos (baixo n\u00edvel) Modelos de dados l\u00f3gicos (representativos ou de implementa\u00e7\u00e3o) Instancias \u00b6 Os dados no banco de dados em um determinado momento s\u00e3o chamados estado do banco de dados (snapshot) ou inst\u00e2ncias. A cada novo registro inserido ou removido, o estado (inst\u00e2ncia) do banco se altera. Restri\u00e7\u00f5es / Chaves \u00b6 Uma chave \u00e9 um conjunto m\u00ednimo de valores dos atributos que identifica unicamente uma tupla (linha). Garante a restri\u00e7\u00e3o de unicidade entre as tuplas de uma rela\u00e7\u00e3o SQL \u00b6 SQL tem uma liga\u00e7\u00e3o com o modelo relacional pois o resultado de uma consulta SQL \u00e9 uma tabela (tamb\u00e9m chamada de conjunto resultado). A linguagem SQL se divide em subgrupos: DDL: - \u00c9 a linguagem que define a ESTRUTURA do BD. - Seus comandos permitem a cria\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de objetos em um banco de dados. - Exemplo: CREATE, ALTER, DROP DML(Linguagem de Manipula\u00e7\u00e3o de Dados): - Linguagem que manipula os dados no banco. - Seus comandos permitem a recupera\u00e7\u00e3o, inser\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de dados. - Exemplo: INSERT. UPDATE, DELETE DQL (Linguagem de consulta de Dados): - Comando SELECT \u00e9 a instru\u00e7\u00e3o B\u00e1sica para recuperar informa\u00e7\u00f5es. - O formato b\u00e1sico da declara\u00e7\u00e3o SELECT \u00e9 composto por tr\u00eas cl\u00e1usulas (SELECT, FROM e WHERE).","title":"Modelo Relacional"},{"location":"banco_de_dados/relacional/#banco-de-dados-relacional-em-construcao","text":"O modelo de dados relacional foi introduzido por Edgar Codd em 1970 (IBM). \u00c9 um modelo formal, baseado na teoria matem\u00e1tica das rela\u00e7\u00f5es entre conjuntos. O modelo de dados relacional \u00e9 uma linguagem unificada para defini\u00e7\u00e3o e manipula\u00e7\u00e3o de dados. Os SGBDs Relacionais mais conhecidos hoje s\u00e3o MySQL (Oracle), Oracle (Oracle) e SQL Server (Microsoft). A ideia de modelo relacional era representar entidade e relacionamento de maneira uniforme. No modelo relacional, cada linha na tabela corresponde a uma entidade ou relacionamento do mundo real. As colunas no modelo relacional (atributos de uma entidade), especificam como interpretar os valores de dados em cada linha.","title":"Banco de Dados Relacional [em constru\u00e7\u00e3o]"},{"location":"banco_de_dados/relacional/#acid","text":"Atomicidade (a transa\u00e7\u00e3o \u00e9 executada totalmente ou \u00e9 executada) Consist\u00eancia (sistema sempre consistente ap\u00f3s uma opera\u00e7\u00e3o) Isolamento (transa\u00e7\u00e3o n\u00e3o sofre interfer\u00eancia de outra transa\u00e7\u00e3o concorrente) Durabilidade (o que foi salvo n\u00e3o \u00e9 mais perdido) For\u00e7a a consist\u00eancia ao final de cada transa\u00e7\u00e3o","title":"ACID"},{"location":"banco_de_dados/relacional/#sgbd","text":"Pacote de software que facilita a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de um banco de dados. \u2022 A manipula\u00e7\u00e3o dos dados \u00e9 atrav\u00e9s da realiza\u00e7\u00e3o de opera\u00e7\u00f5es como consultas, altera\u00e7\u00e3o de dados, emiss\u00e3o de relat\u00f3rios, etc.","title":"SGBD"},{"location":"banco_de_dados/relacional/#sistema-de-banco-de-dados","text":"Sistemas de BD s\u00e3o sistemas desenvolvidos com fun\u00e7\u00f5es espec\u00edficas, que usam Banco de dados, desenvolvidos em SGBDs. Sozinho um SGBD n\u00e3o significa nada, com um BD e um programa escrito para sua manipula\u00e7\u00e3o forma-se um sistema de BD.","title":"Sistema de Banco de Dados"},{"location":"banco_de_dados/relacional/#modelo-de-dados","text":"Modelos de dados conceituais (alto n\u00edvel) Modelos de dados f\u00edsicos (baixo n\u00edvel) Modelos de dados l\u00f3gicos (representativos ou de implementa\u00e7\u00e3o)","title":"Modelo de Dados"},{"location":"banco_de_dados/relacional/#instancias","text":"Os dados no banco de dados em um determinado momento s\u00e3o chamados estado do banco de dados (snapshot) ou inst\u00e2ncias. A cada novo registro inserido ou removido, o estado (inst\u00e2ncia) do banco se altera.","title":"Instancias"},{"location":"banco_de_dados/relacional/#restricoes-chaves","text":"Uma chave \u00e9 um conjunto m\u00ednimo de valores dos atributos que identifica unicamente uma tupla (linha). Garante a restri\u00e7\u00e3o de unicidade entre as tuplas de uma rela\u00e7\u00e3o","title":"Restri\u00e7\u00f5es / Chaves"},{"location":"banco_de_dados/relacional/#sql","text":"SQL tem uma liga\u00e7\u00e3o com o modelo relacional pois o resultado de uma consulta SQL \u00e9 uma tabela (tamb\u00e9m chamada de conjunto resultado). A linguagem SQL se divide em subgrupos: DDL: - \u00c9 a linguagem que define a ESTRUTURA do BD. - Seus comandos permitem a cria\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de objetos em um banco de dados. - Exemplo: CREATE, ALTER, DROP DML(Linguagem de Manipula\u00e7\u00e3o de Dados): - Linguagem que manipula os dados no banco. - Seus comandos permitem a recupera\u00e7\u00e3o, inser\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de dados. - Exemplo: INSERT. UPDATE, DELETE DQL (Linguagem de consulta de Dados): - Comando SELECT \u00e9 a instru\u00e7\u00e3o B\u00e1sica para recuperar informa\u00e7\u00f5es. - O formato b\u00e1sico da declara\u00e7\u00e3o SELECT \u00e9 composto por tr\u00eas cl\u00e1usulas (SELECT, FROM e WHERE).","title":"SQL"},{"location":"estrutura_dados/arvores/","text":"\u00c1rvores \u00b6 Conceitos \u00b6 Uma \u00e1rvore \u00e9 um \u00fanico n\u00f3 ou um n\u00f3 raiz conectado a um conjunto de \u00e1rvores. \u00c1rvores s\u00e3o estrutura de dados n\u00e3o lineares e n\u00e3o sequenciais , onde os elementos (n\u00f3s) est\u00e3o organizados de forma hier\u00e1quica e interconectados por meio de arestas (v\u00e9rtices). Os n\u00f3s representam espa\u00e7os onde podem ser armazenados quaisquer tipos de informa\u00e7\u00f5es, enquanto as arestas representam o relacionamento entre os n\u00f3s. O elemento que n\u00e3o tem predecessor e que fica no topo da \u00e1rvore \u00e9 chamado de raiz , enquanto os elementos que est\u00e3o a ele subordinados s\u00e3o chamados de n\u00f3s filho . J\u00e1 os elementos que n\u00e3o possuem filho s\u00e3o chamados n\u00f3s folha . Conforme imagem: Altura, profundidade e Ordem \u00b6 Altura do n\u00f3 \u00b6 Comprimento do caminho mais longo entre o n\u00f3 at\u00e9 uma folha. A altura depende dos filhos daquele n\u00f3. Profundidade de um n\u00f3 \u00b6 Tamb\u00e9m chamado de n\u00edvel de um n\u00f3 , corresponde a dist\u00e2ncia percorrida do n\u00f3 at\u00e9 a raiz, logo, a raiz ter\u00e1 profundidade 0 (zero). Grau de um n\u00f3 \u00b6 O grau de um n\u00f3 corresponde ao n\u00famero de filhos/ n\u00famero de sub\u00e1rvores que aquele n\u00f3 possui: \u00c1rvore Bin\u00e1ria \u00b6 Uma \u00e1rvore bin\u00e1ria \u00e9 uma \u00e1rvore ordenada, na qual cada n\u00f3 tem 0 , 1 , ou 2 filhos e cada filho corresponde a uma sub\u00e1rvore bin\u00e1ria; a \u00e1rvore bin\u00e1ria pode estar vazia ou particionada em 3 subconjuntos disjuntos: - A Raiz - A sub-arvore esquerda - A sub-arvore direita Classifica\u00e7\u00e3o de \u00e1rvores bin\u00e1rias: \u00b6 \u00c1rvore bin\u00e1ria completa/estritamente bin\u00e1ria: Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos \u00c1rvore bin\u00e1ria completa: Cada n\u00edvel, exceto o \u00faltimo n\u00edvel, \u00e9 completamente preenchido e todos os n\u00f3s s\u00e3o justificados \u00e0 esquerda. \u00c1rvore bin\u00e1ria perfeita: Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos e cada n\u00edvel (tamb\u00e9m o \u00faltimo n\u00edvel) \u00e9 completamente preenchido. Percursos \u00b6 Pr\u00e9-ordem: \u00b6 Partindo da raiz, visitamos a raiz e seguimos para os n\u00f3s da esquerda e depois os da direita. P\u00f3s-ordem: \u00b6 Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois os da direita e por fim, visitamos o n\u00f3 raiz. In-ordem: \u00b6 Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois visitamos o n\u00f3 raiz, e depois visitamos os n\u00f3s da direita. Refer\u00eancias \u00b6 Prof. Fernando De Siqueira - Estrutura de Dados Stack Overflow - Difference between \"Complete binary tree\", \"strict binary tree\",\"full binary Tree\"? IME - USP - \u00c1rvores Bin\u00e1rias","title":"\u00c1rvores"},{"location":"estrutura_dados/arvores/#arvores","text":"","title":"\u00c1rvores"},{"location":"estrutura_dados/arvores/#conceitos","text":"Uma \u00e1rvore \u00e9 um \u00fanico n\u00f3 ou um n\u00f3 raiz conectado a um conjunto de \u00e1rvores. \u00c1rvores s\u00e3o estrutura de dados n\u00e3o lineares e n\u00e3o sequenciais , onde os elementos (n\u00f3s) est\u00e3o organizados de forma hier\u00e1quica e interconectados por meio de arestas (v\u00e9rtices). Os n\u00f3s representam espa\u00e7os onde podem ser armazenados quaisquer tipos de informa\u00e7\u00f5es, enquanto as arestas representam o relacionamento entre os n\u00f3s. O elemento que n\u00e3o tem predecessor e que fica no topo da \u00e1rvore \u00e9 chamado de raiz , enquanto os elementos que est\u00e3o a ele subordinados s\u00e3o chamados de n\u00f3s filho . J\u00e1 os elementos que n\u00e3o possuem filho s\u00e3o chamados n\u00f3s folha . Conforme imagem:","title":"Conceitos"},{"location":"estrutura_dados/arvores/#altura-profundidade-e-ordem","text":"","title":"Altura, profundidade e Ordem"},{"location":"estrutura_dados/arvores/#altura-do-no","text":"Comprimento do caminho mais longo entre o n\u00f3 at\u00e9 uma folha. A altura depende dos filhos daquele n\u00f3.","title":"Altura do n\u00f3"},{"location":"estrutura_dados/arvores/#profundidade-de-um-no","text":"Tamb\u00e9m chamado de n\u00edvel de um n\u00f3 , corresponde a dist\u00e2ncia percorrida do n\u00f3 at\u00e9 a raiz, logo, a raiz ter\u00e1 profundidade 0 (zero).","title":"Profundidade de um n\u00f3"},{"location":"estrutura_dados/arvores/#grau-de-um-no","text":"O grau de um n\u00f3 corresponde ao n\u00famero de filhos/ n\u00famero de sub\u00e1rvores que aquele n\u00f3 possui:","title":"Grau de um n\u00f3"},{"location":"estrutura_dados/arvores/#arvore-binaria","text":"Uma \u00e1rvore bin\u00e1ria \u00e9 uma \u00e1rvore ordenada, na qual cada n\u00f3 tem 0 , 1 , ou 2 filhos e cada filho corresponde a uma sub\u00e1rvore bin\u00e1ria; a \u00e1rvore bin\u00e1ria pode estar vazia ou particionada em 3 subconjuntos disjuntos: - A Raiz - A sub-arvore esquerda - A sub-arvore direita","title":"\u00c1rvore Bin\u00e1ria"},{"location":"estrutura_dados/arvores/#classificacao-de-arvores-binarias","text":"\u00c1rvore bin\u00e1ria completa/estritamente bin\u00e1ria: Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos \u00c1rvore bin\u00e1ria completa: Cada n\u00edvel, exceto o \u00faltimo n\u00edvel, \u00e9 completamente preenchido e todos os n\u00f3s s\u00e3o justificados \u00e0 esquerda. \u00c1rvore bin\u00e1ria perfeita: Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos e cada n\u00edvel (tamb\u00e9m o \u00faltimo n\u00edvel) \u00e9 completamente preenchido.","title":"Classifica\u00e7\u00e3o de \u00e1rvores bin\u00e1rias:"},{"location":"estrutura_dados/arvores/#percursos","text":"","title":"Percursos"},{"location":"estrutura_dados/arvores/#pre-ordem","text":"Partindo da raiz, visitamos a raiz e seguimos para os n\u00f3s da esquerda e depois os da direita.","title":"Pr\u00e9-ordem:"},{"location":"estrutura_dados/arvores/#pos-ordem","text":"Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois os da direita e por fim, visitamos o n\u00f3 raiz.","title":"P\u00f3s-ordem:"},{"location":"estrutura_dados/arvores/#in-ordem","text":"Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois visitamos o n\u00f3 raiz, e depois visitamos os n\u00f3s da direita.","title":"In-ordem:"},{"location":"estrutura_dados/arvores/#referencias","text":"Prof. Fernando De Siqueira - Estrutura de Dados Stack Overflow - Difference between \"Complete binary tree\", \"strict binary tree\",\"full binary Tree\"? IME - USP - \u00c1rvores Bin\u00e1rias","title":"Refer\u00eancias"},{"location":"estrutura_dados/avltree/","text":"\u00c1rvores AVL \u00b6 Defini\u00e7\u00e3o \u00b6 Criada \u00c1rvore AVL se trata de uma estrutura de dados que obedece a todas as propriedades da \u00e1rvore bin\u00e1ria e que em cada n\u00f3 a diferen\u00e7a entre a altura da sub\u00e1rvora da direita e da esquerda \u00e9 de 1 , 0 ou -1 . Esta diferen\u00e7a \u00e9 chamada Fator de Balanceamento . O balanceamento facilita efetivamente a busca de um elemento, por exemplo, se temos uma \u00e1rvore balanceada com 10.000 elementos, precisar\u00edamos fazer apenas 14 compara\u00e7\u00f5es para encontrar um elemento. Calculando melhor n\u00f3 raiz de um \u00e1rvore AVL \u00b6 Ao se analisar uma \u00e1rvore, dentre os seus n\u00f3s, qual n\u00f3 seria uma raiz adequada para torn\u00e1-la perfeitamente balanceada? O n\u00f3 cuja chave representa a mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero impar de n\u00f3s. Ou o n\u00f3 cuja chave representa um dentre os dois valores mais pr\u00f3ximos da mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero par de n\u00f3s. Rota\u00e7\u00e3o \u00b6 Quando a diferen\u00e7a de altura de um n\u00f3 for maior que 1 ou menor que -1, ent\u00e3o, a \u00e1rvore est\u00e1 desbalanceada e necessita de uma rota\u00e7\u00e3o, simples ou dupla, conforme tabela: N\u00f3 Desbalanceado Filho do N\u00f3 Desbalanceado Tipo de Rota\u00e7\u00e3o +2 +1 Simples \u00e0 esquerda +2 0 Simples \u00e0 esquerda +2 -1 Dupla com filho para a direita e pai para a esquerda -2 +1 Dupla com filho para a esquerda e pai para a direita -2 0 Simples \u00e0 direita -2 -1 Simples \u00e0 direita Exemplo de Balanceamento \u00b6 Tomemos, por exemplo, a seguinte \u00e1rvore: Se quisermos adicionar o valor 055, ele iria parar \u00e1 direita no n\u00f3 050, gerando um desbalanceamento na sub\u00e1rvore cuja raiz \u00e9 o 045. Portanto, para balancear a \u00e1rvore \u00e9 necess\u00e1rio uma rota\u00e7\u00e3o simples \u00e0 esquerda, conforme anima\u00e7\u00e3o: https://user-images.githubusercontent.com/72423464/192525507-89e42325-1f4d-4493-8243-214dbae4882e.mp4 Refer\u00eancias \u00b6 Algoritmos e Estruturas de Dados/\u00c1rvores AVL UNIVESP - Estruturas de Dados - \u00c1rvores AVL","title":"\u00c1rvore AVL"},{"location":"estrutura_dados/avltree/#arvores-avl","text":"","title":"\u00c1rvores AVL"},{"location":"estrutura_dados/avltree/#definicao","text":"Criada \u00c1rvore AVL se trata de uma estrutura de dados que obedece a todas as propriedades da \u00e1rvore bin\u00e1ria e que em cada n\u00f3 a diferen\u00e7a entre a altura da sub\u00e1rvora da direita e da esquerda \u00e9 de 1 , 0 ou -1 . Esta diferen\u00e7a \u00e9 chamada Fator de Balanceamento . O balanceamento facilita efetivamente a busca de um elemento, por exemplo, se temos uma \u00e1rvore balanceada com 10.000 elementos, precisar\u00edamos fazer apenas 14 compara\u00e7\u00f5es para encontrar um elemento.","title":"Defini\u00e7\u00e3o"},{"location":"estrutura_dados/avltree/#calculando-melhor-no-raiz-de-um-arvore-avl","text":"Ao se analisar uma \u00e1rvore, dentre os seus n\u00f3s, qual n\u00f3 seria uma raiz adequada para torn\u00e1-la perfeitamente balanceada? O n\u00f3 cuja chave representa a mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero impar de n\u00f3s. Ou o n\u00f3 cuja chave representa um dentre os dois valores mais pr\u00f3ximos da mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero par de n\u00f3s.","title":"Calculando melhor n\u00f3 raiz de um \u00e1rvore AVL"},{"location":"estrutura_dados/avltree/#rotacao","text":"Quando a diferen\u00e7a de altura de um n\u00f3 for maior que 1 ou menor que -1, ent\u00e3o, a \u00e1rvore est\u00e1 desbalanceada e necessita de uma rota\u00e7\u00e3o, simples ou dupla, conforme tabela: N\u00f3 Desbalanceado Filho do N\u00f3 Desbalanceado Tipo de Rota\u00e7\u00e3o +2 +1 Simples \u00e0 esquerda +2 0 Simples \u00e0 esquerda +2 -1 Dupla com filho para a direita e pai para a esquerda -2 +1 Dupla com filho para a esquerda e pai para a direita -2 0 Simples \u00e0 direita -2 -1 Simples \u00e0 direita","title":"Rota\u00e7\u00e3o"},{"location":"estrutura_dados/avltree/#exemplo-de-balanceamento","text":"Tomemos, por exemplo, a seguinte \u00e1rvore: Se quisermos adicionar o valor 055, ele iria parar \u00e1 direita no n\u00f3 050, gerando um desbalanceamento na sub\u00e1rvore cuja raiz \u00e9 o 045. Portanto, para balancear a \u00e1rvore \u00e9 necess\u00e1rio uma rota\u00e7\u00e3o simples \u00e0 esquerda, conforme anima\u00e7\u00e3o: https://user-images.githubusercontent.com/72423464/192525507-89e42325-1f4d-4493-8243-214dbae4882e.mp4","title":"Exemplo de Balanceamento"},{"location":"estrutura_dados/avltree/#referencias","text":"Algoritmos e Estruturas de Dados/\u00c1rvores AVL UNIVESP - Estruturas de Dados - \u00c1rvores AVL","title":"Refer\u00eancias"},{"location":"estrutura_dados/conceitosbasicos/","text":"Conceitos B\u00e1sicos C++ \u00b6 Criada como uma extens\u00e3o da linguagem C pelo dinamarqu\u00eas Bjarne Stroustrup, o \"C com classes\" \u00e9 uma linguagem multiparadigma, quase sempre implementada de modo compilado,considerada uma linguagem de n\u00edvel m\u00e9dio. Apareceu pela primeira vez em 1985 e ainda hoje \u00e9 amplamente utilizada em sistemas embarcados, jogos, bibliotecas gr\u00e1ficas, sistemas operacionais entre outros. Hello World em C++ \u00b6 #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; } #include <iostream> : biblioteca utilizada para declarar objetos que realizam o controle do input e do output estabelecidos no c\u00f3digo. int main() : fun\u00e7\u00e3o utilizada para demonstrar o ponto de in\u00edcio de execu\u00e7\u00e3o do programa. std::cout << \"string\"; : fun\u00e7\u00e3o padr\u00e3o para enviar dados para o console imprimi-los em forma de texto. Tipos de Dados em C++ \u00b6 Bool: valores True or False, em geral armazenam 1 byte Char: aramazena um \u00fanico caracter tamb\u00e9m de um byte, como \"a\", ou \"b\" e assim por diante Int: utiliza 4 bytes e armazenam n\u00fameros inteiros entre -2.147.483.648 a 2.147.483.647 Double: 8 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 15 casas decimais Float: 4 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 06 casas decimais Palavras reservadas ao C++ \u00b6 Palavras reservadas s\u00e3o um conjunto de 92 palavras que s\u00e3o excluivas para uso do C++, entre elas podemos citar - - - - and or if for else do true false this int long case double char catch break const private return void Entre outras. Operadores em C++ \u00b6 Operadores em programa\u00e7\u00e3o \u00e9 um c\u00e1lculo matem\u00e1tico envolvendo zero ou mais valores que originam um novo valor. A opera\u00e7\u00e3o em espec\u00edfico \u00e9 determinado por um s\u00edmbolo (ou par de s\u00edmbolos) chamado operador . Adi\u00e7\u00e3o: + Subtra\u00e7\u00e3o: - Multiplica\u00e7\u00e3o: * Divis\u00e3o: / Atribui\u00e7\u00e3o: = Inser\u00e7\u00e3o: << Extra\u00e7\u00e3o: >> Igualdade: == M\u00f3dulo: % Fun\u00e7\u00f5es \u00b6 Uma fun\u00e7\u00e3o \u00e9 uma cole\u00e7\u00e3o de statements (instru\u00e7\u00f5es) que s\u00e3o executadas sequencialmente. Todo programa em C++ deve incluir uma fun\u00e7\u00e3o chamada main() . Quando voc\u00ea roda o programa a execu\u00e7\u00e3o come\u00e7a no topo da main. A chamada de uma fun\u00e7\u00e3o \u00e9 uma express\u00e3o que diz ao CPU par interromper a fun\u00e7\u00e3o corrente e executar outra fun\u00e7\u00e3o. Depois de executada, o CPU retoma as instru\u00e7\u00f5es do ponto em que parou. Aqui est\u00e1 um simples c\u00f3digo que mostra como uma fun\u00e7\u00e3o \u00e9 definida e invocada: #include <iostream> // para o std::cout // Defini\u00e7\u00e3o de uma fun\u00e7\u00e3o imprimir() void imprimir () // imprimir() \u00e9 o nome da fun\u00e7\u00e3o { std :: cout << \"Dentro da fun\u00e7\u00e3o imprimir() \\n \" ; } // Defini\u00e7\u00e3o da fun\u00e7\u00e3o main() int main () { std :: cout << \"Come\u00e7ando a main() \\n \" ; imprimir (); // Interrompendo a main() por chamar a fun\u00e7\u00e3o imprimir(). std :: cout << \"Encerrando a main() \\n \" ; // esta instru\u00e7\u00e3o \u00e9 feita depois da conclus\u00e3o da fun\u00e7\u00e3o imprimir() return 0 ; } O output ser\u00e1: Come\u00e7ando a main() Dentro da fun\u00e7\u00e3o imprimir() Encerrando a main() Refer\u00eancias \u00b6 Betrybe - C++ Wikipedia - C++ Learn C++","title":"Conceitos B\u00e1sicos C++"},{"location":"estrutura_dados/conceitosbasicos/#conceitos-basicos-c","text":"Criada como uma extens\u00e3o da linguagem C pelo dinamarqu\u00eas Bjarne Stroustrup, o \"C com classes\" \u00e9 uma linguagem multiparadigma, quase sempre implementada de modo compilado,considerada uma linguagem de n\u00edvel m\u00e9dio. Apareceu pela primeira vez em 1985 e ainda hoje \u00e9 amplamente utilizada em sistemas embarcados, jogos, bibliotecas gr\u00e1ficas, sistemas operacionais entre outros.","title":"Conceitos B\u00e1sicos C++"},{"location":"estrutura_dados/conceitosbasicos/#hello-world-em-c","text":"#include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; } #include <iostream> : biblioteca utilizada para declarar objetos que realizam o controle do input e do output estabelecidos no c\u00f3digo. int main() : fun\u00e7\u00e3o utilizada para demonstrar o ponto de in\u00edcio de execu\u00e7\u00e3o do programa. std::cout << \"string\"; : fun\u00e7\u00e3o padr\u00e3o para enviar dados para o console imprimi-los em forma de texto.","title":"Hello World em C++"},{"location":"estrutura_dados/conceitosbasicos/#tipos-de-dados-em-c","text":"Bool: valores True or False, em geral armazenam 1 byte Char: aramazena um \u00fanico caracter tamb\u00e9m de um byte, como \"a\", ou \"b\" e assim por diante Int: utiliza 4 bytes e armazenam n\u00fameros inteiros entre -2.147.483.648 a 2.147.483.647 Double: 8 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 15 casas decimais Float: 4 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 06 casas decimais","title":"Tipos de Dados em C++"},{"location":"estrutura_dados/conceitosbasicos/#palavras-reservadas-ao-c","text":"Palavras reservadas s\u00e3o um conjunto de 92 palavras que s\u00e3o excluivas para uso do C++, entre elas podemos citar - - - - and or if for else do true false this int long case double char catch break const private return void Entre outras.","title":"Palavras reservadas ao C++"},{"location":"estrutura_dados/conceitosbasicos/#operadores-em-c","text":"Operadores em programa\u00e7\u00e3o \u00e9 um c\u00e1lculo matem\u00e1tico envolvendo zero ou mais valores que originam um novo valor. A opera\u00e7\u00e3o em espec\u00edfico \u00e9 determinado por um s\u00edmbolo (ou par de s\u00edmbolos) chamado operador . Adi\u00e7\u00e3o: + Subtra\u00e7\u00e3o: - Multiplica\u00e7\u00e3o: * Divis\u00e3o: / Atribui\u00e7\u00e3o: = Inser\u00e7\u00e3o: << Extra\u00e7\u00e3o: >> Igualdade: == M\u00f3dulo: %","title":"Operadores em C++"},{"location":"estrutura_dados/conceitosbasicos/#funcoes","text":"Uma fun\u00e7\u00e3o \u00e9 uma cole\u00e7\u00e3o de statements (instru\u00e7\u00f5es) que s\u00e3o executadas sequencialmente. Todo programa em C++ deve incluir uma fun\u00e7\u00e3o chamada main() . Quando voc\u00ea roda o programa a execu\u00e7\u00e3o come\u00e7a no topo da main. A chamada de uma fun\u00e7\u00e3o \u00e9 uma express\u00e3o que diz ao CPU par interromper a fun\u00e7\u00e3o corrente e executar outra fun\u00e7\u00e3o. Depois de executada, o CPU retoma as instru\u00e7\u00f5es do ponto em que parou. Aqui est\u00e1 um simples c\u00f3digo que mostra como uma fun\u00e7\u00e3o \u00e9 definida e invocada: #include <iostream> // para o std::cout // Defini\u00e7\u00e3o de uma fun\u00e7\u00e3o imprimir() void imprimir () // imprimir() \u00e9 o nome da fun\u00e7\u00e3o { std :: cout << \"Dentro da fun\u00e7\u00e3o imprimir() \\n \" ; } // Defini\u00e7\u00e3o da fun\u00e7\u00e3o main() int main () { std :: cout << \"Come\u00e7ando a main() \\n \" ; imprimir (); // Interrompendo a main() por chamar a fun\u00e7\u00e3o imprimir(). std :: cout << \"Encerrando a main() \\n \" ; // esta instru\u00e7\u00e3o \u00e9 feita depois da conclus\u00e3o da fun\u00e7\u00e3o imprimir() return 0 ; } O output ser\u00e1: Come\u00e7ando a main() Dentro da fun\u00e7\u00e3o imprimir() Encerrando a main()","title":"Fun\u00e7\u00f5es"},{"location":"estrutura_dados/conceitosbasicos/#referencias","text":"Betrybe - C++ Wikipedia - C++ Learn C++","title":"Refer\u00eancias"},{"location":"estrutura_dados/est/","text":"Estruturas de Dados \u00b6 Objetivo: Familiarizar-se com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las. Objetivos: Familiarizar os alunos com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las. Ementa: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank Bibliografia Base: - SZWARCFITER, Jayme Luiz; MARKENZON, Lilian. Estruturas de Dados e Seus Algoritmos. 2010. LTC. - EDELWEISS, Nina; GALANTE, Renata. Estruturas de Dados. 2011. Bookman. - AGUILAR, Luis Joyanes. Fundamentos de Programa\u00e7\u00e3o: Algoritmos, estruturas de dados e objetos. 2008. AMGH. Bibliografia Complementar: - Cormen, Thomas; Leiserson, Charles; Rivest, Ronald; Stein, Clifford. Algoritmos: Teoria e Pr\u00e1tica. 2012. LTC. - Thomas, Cormen. Desmistificando Algoritmos. 2017. LTC. - Maner, Udi. Introduction to Algorithms: A Creative Approach. 1989. Addison- Wesley Professional.","title":"Ementa"},{"location":"estrutura_dados/est/#estruturas-de-dados","text":"Objetivo: Familiarizar-se com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las. Objetivos: Familiarizar os alunos com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las. Ementa: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank Bibliografia Base: - SZWARCFITER, Jayme Luiz; MARKENZON, Lilian. Estruturas de Dados e Seus Algoritmos. 2010. LTC. - EDELWEISS, Nina; GALANTE, Renata. Estruturas de Dados. 2011. Bookman. - AGUILAR, Luis Joyanes. Fundamentos de Programa\u00e7\u00e3o: Algoritmos, estruturas de dados e objetos. 2008. AMGH. Bibliografia Complementar: - Cormen, Thomas; Leiserson, Charles; Rivest, Ronald; Stein, Clifford. Algoritmos: Teoria e Pr\u00e1tica. 2012. LTC. - Thomas, Cormen. Desmistificando Algoritmos. 2017. LTC. - Maner, Udi. Introduction to Algorithms: A Creative Approach. 1989. Addison- Wesley Professional.","title":"Estruturas de Dados"},{"location":"estrutura_dados/fila_pilha/","text":"Fila e Pilha \u00b6 Tanto fila como pilha s\u00e3o estrutura de dados lineares , ou seja, possuem liga\u00e7\u00e3o com um \u00fanico antecedente e com um \u00fanico sucessor, desse modo: Pilha (vetorial) \u00b6 Uma pilha (ou stack em ingl\u00eas) \u00e9 uma estrutura linear na qual inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo da pilha . Numa pilha, a manipula\u00e7\u00e3o dos elementos \u00e9 realizada em apenas uma das extremidades, chamada de topo, em oposi\u00e7\u00e3o a outra extremidade, chamada de base. Caracter\u00edsticas: O \u00faltimo elemento a entrar tem que ser o primeiro a sair ( Last-In-First-Out ). Permitem acesso a apenas o \u00faltimo item inserido. Inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo. Principais fun\u00e7\u00f5es: isEmpty() : chamada para verificar se a pilha est\u00e1 vazia. isFull() : chamada para verificar se a estrutura est\u00e1 completa (quando possui tamanho fixo). push() : inser\u00e7\u00e3o de elementos no topo da pilha; empilhar. pop() : remo\u00e7\u00e3o do elemento que est\u00e1 no opo da pilha; desempilhar. Principais usos O comando de desfazer a \u00faltima opera\u00e7\u00e3o (ctrl+z / cmd+z) Navega\u00e7\u00e3o entre p\u00e1ginas. Fun\u00e7\u00e3o recursiva; Fila (vetorial) \u00b6 Uma fila (ou queue ) \u00e9 uma estrutura linear na qual as inser\u00e7\u00f5es ocorrem no final e as exclus\u00f5es ocorrem no in\u00edcio . Todas as opera\u00e7\u00f5es em uma fila podem ser imaginadas como as que ocorre numa fila de pessoas num banco, exceto que os elementos n\u00e3o se movem na fila, conforme o primeiro elemento \u00e9 retirado. Isto seria muito custoso para o computador. O que se faz na realidade \u00e9 indicar quem \u00e9 o primeiro. Caracter\u00edsiticas O primeiro elemento a entrar na estrutura tem que ser o primeiro a sair ( First-In-First-Out ). Inser\u00e7\u00f5es ocorrem no final e remo\u00e7\u00f5es ocorrem no in\u00edcio. Principais fun\u00e7\u00f5es queue() - enfileirar dequeue() - desinfileirar Al\u00e9m das fun\u00e7\u00f5es isEmpty() e isFull() , semelhantes \u00e0 pilha. Principais usos Documentos enviados para impress\u00f5es. Troca de mensagens entre processos em Sistemas Operacionais. Troca de mensagens entre computadores em uma rede. Refer\u00eancias \u00b6 https://www.cos.ufrj.br/~rfarias/cos121/pilhas.html https://www.cos.ufrj.br/~rfarias/cos121/filas.html https://cathyatseneca.github.io/DSAnim/web/llstack.html","title":"Fila e Pilha - conceitos"},{"location":"estrutura_dados/fila_pilha/#fila-e-pilha","text":"Tanto fila como pilha s\u00e3o estrutura de dados lineares , ou seja, possuem liga\u00e7\u00e3o com um \u00fanico antecedente e com um \u00fanico sucessor, desse modo:","title":"Fila e Pilha"},{"location":"estrutura_dados/fila_pilha/#pilha-vetorial","text":"Uma pilha (ou stack em ingl\u00eas) \u00e9 uma estrutura linear na qual inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo da pilha . Numa pilha, a manipula\u00e7\u00e3o dos elementos \u00e9 realizada em apenas uma das extremidades, chamada de topo, em oposi\u00e7\u00e3o a outra extremidade, chamada de base. Caracter\u00edsticas: O \u00faltimo elemento a entrar tem que ser o primeiro a sair ( Last-In-First-Out ). Permitem acesso a apenas o \u00faltimo item inserido. Inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo. Principais fun\u00e7\u00f5es: isEmpty() : chamada para verificar se a pilha est\u00e1 vazia. isFull() : chamada para verificar se a estrutura est\u00e1 completa (quando possui tamanho fixo). push() : inser\u00e7\u00e3o de elementos no topo da pilha; empilhar. pop() : remo\u00e7\u00e3o do elemento que est\u00e1 no opo da pilha; desempilhar. Principais usos O comando de desfazer a \u00faltima opera\u00e7\u00e3o (ctrl+z / cmd+z) Navega\u00e7\u00e3o entre p\u00e1ginas. Fun\u00e7\u00e3o recursiva;","title":"Pilha (vetorial)"},{"location":"estrutura_dados/fila_pilha/#fila-vetorial","text":"Uma fila (ou queue ) \u00e9 uma estrutura linear na qual as inser\u00e7\u00f5es ocorrem no final e as exclus\u00f5es ocorrem no in\u00edcio . Todas as opera\u00e7\u00f5es em uma fila podem ser imaginadas como as que ocorre numa fila de pessoas num banco, exceto que os elementos n\u00e3o se movem na fila, conforme o primeiro elemento \u00e9 retirado. Isto seria muito custoso para o computador. O que se faz na realidade \u00e9 indicar quem \u00e9 o primeiro. Caracter\u00edsiticas O primeiro elemento a entrar na estrutura tem que ser o primeiro a sair ( First-In-First-Out ). Inser\u00e7\u00f5es ocorrem no final e remo\u00e7\u00f5es ocorrem no in\u00edcio. Principais fun\u00e7\u00f5es queue() - enfileirar dequeue() - desinfileirar Al\u00e9m das fun\u00e7\u00f5es isEmpty() e isFull() , semelhantes \u00e0 pilha. Principais usos Documentos enviados para impress\u00f5es. Troca de mensagens entre processos em Sistemas Operacionais. Troca de mensagens entre computadores em uma rede.","title":"Fila (vetorial)"},{"location":"estrutura_dados/fila_pilha/#referencias","text":"https://www.cos.ufrj.br/~rfarias/cos121/pilhas.html https://www.cos.ufrj.br/~rfarias/cos121/filas.html https://cathyatseneca.github.io/DSAnim/web/llstack.html","title":"Refer\u00eancias"},{"location":"estrutura_dados/grafos/","text":"Grafos \u00b6 Defini\u00e7\u00e3o \u00b6 Se com filas e pilhas vimos estrutura de dados lineares, e com \u00e1rvores vimos estruturas hier\u00e1rquicas, com grafos veremos estruturas descentralizadas. A teoria dos grafos iniciou-se na cidade de Konigsberg, atual territ\u00f3rio da R\u00fassia no ano de 1736, pelo matem\u00e1tico su\u00ed\u00e7o Leonhard Euler (1707-1783) Grafos s\u00e3o amplamente usados em matem\u00e1tica, mas sobretudo em programa\u00e7\u00e3o. Formalmente, um grafo \u00e9 uma cole\u00e7\u00e3o de v\u00e9rtices (V) e uma cole\u00e7\u00e3o de arcos (E) constitu\u00eddos por pares de v\u00e9rtices. \u00c9 uma estrutura usada para representar um modelo em que existem rela\u00e7\u00f5es entre os objetos de uma certa cole\u00e7\u00e3o. A teoria dos grafos estuda objetos combinat\u00f3rios, pois os mesmos s\u00e3o bons modelos para muitos problemas em v\u00e1rios ramos da matem\u00e1tica, da inform\u00e1tica, da engenharia, da qu\u00edmica, da psicologia e da ind\u00fastria. Grafos N\u00e3o direcionados \u00b6 Um grafo \u00e9 dito n\u00e3o direcionado se as rela\u00e7\u00f5es representadas pelas arestas n\u00e3o t\u00eam sentido, ou seja, arestas podem ser seguidas em qualquer dire\u00e7\u00e3o, elas s\u00e3o bi-direcionais. Em grafos n\u00e3o direcionados, o grau de um v\u00e9rtice \u00e9 o n\u00famero de arestas que incidem nele. Observer que self-loops n\u00e3o s\u00e3o permitidos. Grafos Direcionados \u00b6 Um grafo \u00e9 dito direcionado se as arestas s\u00e3o pares ordenados de v\u00e9rtices, saindo de um em dire\u00e7\u00e3o ao outro, ou seja, as arestas possuem uma dire\u00e7\u00e3o. Em grafos direcionados, o grau \u00e9 o n\u00famero de arestas que saem do v\u00e9rtice (grau de sa\u00edda) mais o n\u00famero de arestas que chegam (grau de entrada). Formas de Representa\u00e7\u00e3o \u00b6 Matriz de Adjac\u00eancias \u00b6 A matriz de adjac\u00eancias de um grafo \u00e9 uma matriz booleana com colunas e linhas indexadas pelos v\u00e9rtices. Uma matriz de adjac\u00eancia qualquer (M) ter\u00e1 a quantidade de v\u00e9rtices (n) de n\u00famero de linha e colunas, ou seja, uma para cada v\u00e9rtice Lista de Adjac\u00eancias \u00b6 Consiste numa lista qual cada elemento \u00e9 um n\u00f3 do grafo, logo a lista possui tamanho equivalente ao n\u00famero de v\u00e9rtices do grafo. Ela possui n lista ligadas, estas contem as conex\u00f5es de cada arestas do v\u00e9rtice. Aplica\u00e7\u00f5es \u00b6 Modelagem de Circuitos Eletr\u00f4nicos: Placas de circuito impresso. Circuitos integrados Redes de Transporte Representa\u00e7\u00e3o de Rodovias: Mapa de V\u00f4os Mapa de Metr\u00f4 Redes de Computadores: Redes Locais Internet Bancos de Dados: Diagrama Entidade-Relacionamento Ci\u00eancias: \u00c1tomos conectados por liga\u00e7\u00f5es qu\u00edmicas Esp\u00e9cies conectadas filogeneticamente Animais conectados por rela\u00e7\u00f5es ecol\u00f3gicas Redes Sociais Refer\u00eancias \u00b6 Curso Livre de Estruturas de Dados/Grafos O que \u00e9 um grafo estrutura de dados? ICMC - USP - Grafos I: Conceitos & Aplica\u00e7\u00f5es Grafos \u2014 representa\u00e7\u00e3o e implementa\u00e7\u00e3o","title":"Grafos"},{"location":"estrutura_dados/grafos/#grafos","text":"","title":"Grafos"},{"location":"estrutura_dados/grafos/#definicao","text":"Se com filas e pilhas vimos estrutura de dados lineares, e com \u00e1rvores vimos estruturas hier\u00e1rquicas, com grafos veremos estruturas descentralizadas. A teoria dos grafos iniciou-se na cidade de Konigsberg, atual territ\u00f3rio da R\u00fassia no ano de 1736, pelo matem\u00e1tico su\u00ed\u00e7o Leonhard Euler (1707-1783) Grafos s\u00e3o amplamente usados em matem\u00e1tica, mas sobretudo em programa\u00e7\u00e3o. Formalmente, um grafo \u00e9 uma cole\u00e7\u00e3o de v\u00e9rtices (V) e uma cole\u00e7\u00e3o de arcos (E) constitu\u00eddos por pares de v\u00e9rtices. \u00c9 uma estrutura usada para representar um modelo em que existem rela\u00e7\u00f5es entre os objetos de uma certa cole\u00e7\u00e3o. A teoria dos grafos estuda objetos combinat\u00f3rios, pois os mesmos s\u00e3o bons modelos para muitos problemas em v\u00e1rios ramos da matem\u00e1tica, da inform\u00e1tica, da engenharia, da qu\u00edmica, da psicologia e da ind\u00fastria.","title":"Defini\u00e7\u00e3o"},{"location":"estrutura_dados/grafos/#grafos-nao-direcionados","text":"Um grafo \u00e9 dito n\u00e3o direcionado se as rela\u00e7\u00f5es representadas pelas arestas n\u00e3o t\u00eam sentido, ou seja, arestas podem ser seguidas em qualquer dire\u00e7\u00e3o, elas s\u00e3o bi-direcionais. Em grafos n\u00e3o direcionados, o grau de um v\u00e9rtice \u00e9 o n\u00famero de arestas que incidem nele. Observer que self-loops n\u00e3o s\u00e3o permitidos.","title":"Grafos N\u00e3o direcionados"},{"location":"estrutura_dados/grafos/#grafos-direcionados","text":"Um grafo \u00e9 dito direcionado se as arestas s\u00e3o pares ordenados de v\u00e9rtices, saindo de um em dire\u00e7\u00e3o ao outro, ou seja, as arestas possuem uma dire\u00e7\u00e3o. Em grafos direcionados, o grau \u00e9 o n\u00famero de arestas que saem do v\u00e9rtice (grau de sa\u00edda) mais o n\u00famero de arestas que chegam (grau de entrada).","title":"Grafos Direcionados"},{"location":"estrutura_dados/grafos/#formas-de-representacao","text":"","title":"Formas de Representa\u00e7\u00e3o"},{"location":"estrutura_dados/grafos/#matriz-de-adjacencias","text":"A matriz de adjac\u00eancias de um grafo \u00e9 uma matriz booleana com colunas e linhas indexadas pelos v\u00e9rtices. Uma matriz de adjac\u00eancia qualquer (M) ter\u00e1 a quantidade de v\u00e9rtices (n) de n\u00famero de linha e colunas, ou seja, uma para cada v\u00e9rtice","title":"Matriz de Adjac\u00eancias"},{"location":"estrutura_dados/grafos/#lista-de-adjacencias","text":"Consiste numa lista qual cada elemento \u00e9 um n\u00f3 do grafo, logo a lista possui tamanho equivalente ao n\u00famero de v\u00e9rtices do grafo. Ela possui n lista ligadas, estas contem as conex\u00f5es de cada arestas do v\u00e9rtice.","title":"Lista de Adjac\u00eancias"},{"location":"estrutura_dados/grafos/#aplicacoes","text":"Modelagem de Circuitos Eletr\u00f4nicos: Placas de circuito impresso. Circuitos integrados Redes de Transporte Representa\u00e7\u00e3o de Rodovias: Mapa de V\u00f4os Mapa de Metr\u00f4 Redes de Computadores: Redes Locais Internet Bancos de Dados: Diagrama Entidade-Relacionamento Ci\u00eancias: \u00c1tomos conectados por liga\u00e7\u00f5es qu\u00edmicas Esp\u00e9cies conectadas filogeneticamente Animais conectados por rela\u00e7\u00f5es ecol\u00f3gicas Redes Sociais","title":"Aplica\u00e7\u00f5es"},{"location":"estrutura_dados/grafos/#referencias","text":"Curso Livre de Estruturas de Dados/Grafos O que \u00e9 um grafo estrutura de dados? ICMC - USP - Grafos I: Conceitos & Aplica\u00e7\u00f5es Grafos \u2014 representa\u00e7\u00e3o e implementa\u00e7\u00e3o","title":"Refer\u00eancias"},{"location":"estrutura_dados/hash-table/","text":"Tabela Hash \u00b6 Defini\u00e7\u00e3o \u00b6 Tamb\u00e9m conhecida como tabela de dispers\u00e3o , tabela de espalhamento ou tabela de indexa\u00e7\u00e3o \u00e9 uma estrutura de dados que associa chaves e valores. Em outras linguagens de programa\u00e7\u00e3o pode ser referida como: dicion\u00e1rios, arrays associativos, mapas, entre outros. A forma mais simples de se pensar em uma tabela hash \u00e9 como um vetor de registros. Visualiza\u00e7\u00e3o \u00b6 Caracter\u00edsticas \u00b6 Tabelas hash armazenam uma cole\u00e7\u00e3o de registros com chaves; A partir da aplica\u00e7\u00e3o de uma fun\u00e7\u00e3o, a chave \u00e9 transformada em um endere\u00e7o da tabela; Cada chave \u00e9 interpretada como um valor num\u00e9rico, um \u00edndice no vetor; O local de um novo registro depende do valor hash de sua chave; Quando ocorre uma colis\u00e3o, \u00e9 usado o pr\u00f3ximo local dispon\u00edvel; \u00c9 poss\u00edvel encadear os valores em um \u00edndice usando listas ligadas; Quando removemos um registro, o local deve ser marcado para facilitar as buscas. Inserindo novo registro \u00b6 Supondo que estamos implementando uma tabela hash de tamanho 11 indexado de 0 a 10 . Se fizermos a inser\u00e7\u00e3o de valores menores do que o tamanho da tabela, eles ser\u00e3o inseridos no \u00edndice correspondente ao valor da chave, como por exemplo, no caso de adicionarmos chaves de valor 2 , 5 e 9 . Para casos em que o valor da chave \u00e9 maior que o tamanho da tabela, precisamos usar uma fun\u00e7\u00e3o de dispers\u00e3o . Uma fun\u00e7\u00e3o de dispers\u00e3o h transforma uma chave x em um endere\u00e7o-base h(x) na tabela hash. Se utilizarmos o M\u00e9todo da Divis\u00e3o teremos que encontrar o resto da divis\u00e3o do valor da chave pelo tamanho da tabela. Por exemplo, se temos uma chave de valor 15 ela ser\u00e1 inserida no \u00edndice 4 , pois 15 % 11 = 4 Fun\u00e7\u00e3o de Dispers\u00e3o / Hash Functions \u00b6 Uma fun\u00e7\u00e3o de dispers\u00e3o \u00e9 utilizada para espalhar os elementos que queremos armazenar e deve satisfazer as seguintes condi\u00e7\u00f5es: produzir um n\u00famero baixo de colis\u00f5es; ser facilmente comput\u00e1vel; ser uniforme. O M\u00e9todo da Divis\u00e3o costuma ser o mais f\u00e1cil e eficiente, al\u00e9m de ser muito utilizado. Existem alguns crit\u00e9rios em rela\u00e7\u00e3o ao tamanho da tabela que ajudam a obter resultados mais pr\u00e1ticos, tais como: O tamanho da tabela n\u00e3o deve ser n\u00famero par; N\u00e3o deve ser pot\u00eancia de 2; Deve ser, de prefer\u00eancia, um n\u00famero primo. Al\u00e9m do M\u00e9todo da Divis\u00e3o, podemos usar o M\u00e9todo da Dobra e o M\u00e9todo da Multiplica\u00e7\u00e3o . Transforma\u00e7\u00e3o Alfa-num\u00e9rica \u00b6 Tamb\u00e9m temos casos em que as chaves n\u00e3o s\u00e3o valores num\u00e9ricos, como o nome de pessoas. A solu\u00e7\u00e3o para isso \u00e9 transformar o texto em n\u00famero, j\u00e1 que, do ponto de vista do computador, todos os dados s\u00e3o representa\u00e7\u00f5es num\u00e9ricas . Como na tabela ASCII existe um inteiro associado a um caractere, podemos somar caractere por caractere para obter uma chave num\u00e9rica. Se temos uma chave de valor \"Fulano\", teremos ap\u00f3s a fun\u00e7\u00e3o, uma chave de valor 613. Caractere Inteiro \"F\" 70 \"u\" 117 \"l\" 108 \"a\" 97 \"n\" 110 \"o\" 111 Soma: 613 Tratamento de Colis\u00f5es \u00b6 As colis\u00f5es ocorrem quando chaves diferentes s\u00e3o mapeadas para o mesmo endere\u00e7o de mem\u00f3ria, o que pode causar ambiguidades sobre o registro que dever\u00e1 ocupar aquele endere\u00e7o de mem\u00f3ria. Para resolver colis\u00f5es, podemos utilizar tanto um espa\u00e7o de mem\u00f3ria adicional quanto um espa\u00e7o no pr\u00f3prio arranjo. Encadeamento Separado \u00b6 Tamb\u00e9m conhecido como encadeamento exterior, ou em ingl\u00eas como separate chaining . Cada c\u00e9lula da tabela hash seria na verdade um ponteiro para uma lista encadeada, com isso as colis\u00f5es s\u00e3o mantidas em uma estrutura de dados separada. Teste Linear \u00b6 Tamb\u00e9m conhecido como sondagem linear ou em ingl\u00eas, como linear probing , open adressing ou rehash . Quando ocorre uma colis\u00e3o, percorre-se a tabela hash buscando por uma posi\u00e7\u00e3o ainda n\u00e3o ocupada. As colis\u00f5es ser\u00e3o tratadas sem aloca\u00e7\u00e3o de mem\u00f3ria adicional, ou seja, todos os elementos est\u00e3o armazenados na pr\u00f3pria tabela hash. Fator de Carga \u00b6 Fator de carga \u00e9 a divis\u00e3o dos n\u00fameros ocupados em uma tabela pelo tamanho total da tabela. Quanto maior o fator de carga, mais lento \u00e9 o processo de recupera\u00e7\u00e3o. No encadeamento separado, o fator de carga assume valor maior que 1. No encadeamento aberto, o fator de carga assume valor entre 0 e 1. Aplica\u00e7\u00f5es da Tabela Hash \u00b6 Busca de elementos em base de dados. Verifica\u00e7\u00e3o de integridade de dados e autentica\u00e7\u00e3o de mensagens. Armazenamento de senhas com seguran\u00e7a. Criptografia (MD5 e SHA). Refer\u00eancias \u00b6 IFRN - Estrutura de Dados- Profa. Camila Taumaturgo USP - Hash Table - Apresenta\u00e7\u00e3o Medium - Jamin Lee - Has Table Animations IME - USP - Hashing Acervo Lima - Encadeamento Separado","title":"Tabela Hash"},{"location":"estrutura_dados/hash-table/#tabela-hash","text":"","title":"Tabela Hash"},{"location":"estrutura_dados/hash-table/#definicao","text":"Tamb\u00e9m conhecida como tabela de dispers\u00e3o , tabela de espalhamento ou tabela de indexa\u00e7\u00e3o \u00e9 uma estrutura de dados que associa chaves e valores. Em outras linguagens de programa\u00e7\u00e3o pode ser referida como: dicion\u00e1rios, arrays associativos, mapas, entre outros. A forma mais simples de se pensar em uma tabela hash \u00e9 como um vetor de registros.","title":"Defini\u00e7\u00e3o"},{"location":"estrutura_dados/hash-table/#visualizacao","text":"","title":"Visualiza\u00e7\u00e3o"},{"location":"estrutura_dados/hash-table/#caracteristicas","text":"Tabelas hash armazenam uma cole\u00e7\u00e3o de registros com chaves; A partir da aplica\u00e7\u00e3o de uma fun\u00e7\u00e3o, a chave \u00e9 transformada em um endere\u00e7o da tabela; Cada chave \u00e9 interpretada como um valor num\u00e9rico, um \u00edndice no vetor; O local de um novo registro depende do valor hash de sua chave; Quando ocorre uma colis\u00e3o, \u00e9 usado o pr\u00f3ximo local dispon\u00edvel; \u00c9 poss\u00edvel encadear os valores em um \u00edndice usando listas ligadas; Quando removemos um registro, o local deve ser marcado para facilitar as buscas.","title":"Caracter\u00edsticas"},{"location":"estrutura_dados/hash-table/#inserindo-novo-registro","text":"Supondo que estamos implementando uma tabela hash de tamanho 11 indexado de 0 a 10 . Se fizermos a inser\u00e7\u00e3o de valores menores do que o tamanho da tabela, eles ser\u00e3o inseridos no \u00edndice correspondente ao valor da chave, como por exemplo, no caso de adicionarmos chaves de valor 2 , 5 e 9 . Para casos em que o valor da chave \u00e9 maior que o tamanho da tabela, precisamos usar uma fun\u00e7\u00e3o de dispers\u00e3o . Uma fun\u00e7\u00e3o de dispers\u00e3o h transforma uma chave x em um endere\u00e7o-base h(x) na tabela hash. Se utilizarmos o M\u00e9todo da Divis\u00e3o teremos que encontrar o resto da divis\u00e3o do valor da chave pelo tamanho da tabela. Por exemplo, se temos uma chave de valor 15 ela ser\u00e1 inserida no \u00edndice 4 , pois 15 % 11 = 4","title":"Inserindo novo registro"},{"location":"estrutura_dados/hash-table/#funcao-de-dispersao-hash-functions","text":"Uma fun\u00e7\u00e3o de dispers\u00e3o \u00e9 utilizada para espalhar os elementos que queremos armazenar e deve satisfazer as seguintes condi\u00e7\u00f5es: produzir um n\u00famero baixo de colis\u00f5es; ser facilmente comput\u00e1vel; ser uniforme. O M\u00e9todo da Divis\u00e3o costuma ser o mais f\u00e1cil e eficiente, al\u00e9m de ser muito utilizado. Existem alguns crit\u00e9rios em rela\u00e7\u00e3o ao tamanho da tabela que ajudam a obter resultados mais pr\u00e1ticos, tais como: O tamanho da tabela n\u00e3o deve ser n\u00famero par; N\u00e3o deve ser pot\u00eancia de 2; Deve ser, de prefer\u00eancia, um n\u00famero primo. Al\u00e9m do M\u00e9todo da Divis\u00e3o, podemos usar o M\u00e9todo da Dobra e o M\u00e9todo da Multiplica\u00e7\u00e3o .","title":"Fun\u00e7\u00e3o de Dispers\u00e3o / Hash Functions"},{"location":"estrutura_dados/hash-table/#transformacao-alfa-numerica","text":"Tamb\u00e9m temos casos em que as chaves n\u00e3o s\u00e3o valores num\u00e9ricos, como o nome de pessoas. A solu\u00e7\u00e3o para isso \u00e9 transformar o texto em n\u00famero, j\u00e1 que, do ponto de vista do computador, todos os dados s\u00e3o representa\u00e7\u00f5es num\u00e9ricas . Como na tabela ASCII existe um inteiro associado a um caractere, podemos somar caractere por caractere para obter uma chave num\u00e9rica. Se temos uma chave de valor \"Fulano\", teremos ap\u00f3s a fun\u00e7\u00e3o, uma chave de valor 613. Caractere Inteiro \"F\" 70 \"u\" 117 \"l\" 108 \"a\" 97 \"n\" 110 \"o\" 111 Soma: 613","title":"Transforma\u00e7\u00e3o Alfa-num\u00e9rica"},{"location":"estrutura_dados/hash-table/#tratamento-de-colisoes","text":"As colis\u00f5es ocorrem quando chaves diferentes s\u00e3o mapeadas para o mesmo endere\u00e7o de mem\u00f3ria, o que pode causar ambiguidades sobre o registro que dever\u00e1 ocupar aquele endere\u00e7o de mem\u00f3ria. Para resolver colis\u00f5es, podemos utilizar tanto um espa\u00e7o de mem\u00f3ria adicional quanto um espa\u00e7o no pr\u00f3prio arranjo.","title":"Tratamento de Colis\u00f5es"},{"location":"estrutura_dados/hash-table/#encadeamento-separado","text":"Tamb\u00e9m conhecido como encadeamento exterior, ou em ingl\u00eas como separate chaining . Cada c\u00e9lula da tabela hash seria na verdade um ponteiro para uma lista encadeada, com isso as colis\u00f5es s\u00e3o mantidas em uma estrutura de dados separada.","title":"Encadeamento Separado"},{"location":"estrutura_dados/hash-table/#teste-linear","text":"Tamb\u00e9m conhecido como sondagem linear ou em ingl\u00eas, como linear probing , open adressing ou rehash . Quando ocorre uma colis\u00e3o, percorre-se a tabela hash buscando por uma posi\u00e7\u00e3o ainda n\u00e3o ocupada. As colis\u00f5es ser\u00e3o tratadas sem aloca\u00e7\u00e3o de mem\u00f3ria adicional, ou seja, todos os elementos est\u00e3o armazenados na pr\u00f3pria tabela hash.","title":"Teste Linear"},{"location":"estrutura_dados/hash-table/#fator-de-carga","text":"Fator de carga \u00e9 a divis\u00e3o dos n\u00fameros ocupados em uma tabela pelo tamanho total da tabela. Quanto maior o fator de carga, mais lento \u00e9 o processo de recupera\u00e7\u00e3o. No encadeamento separado, o fator de carga assume valor maior que 1. No encadeamento aberto, o fator de carga assume valor entre 0 e 1.","title":"Fator de Carga"},{"location":"estrutura_dados/hash-table/#aplicacoes-da-tabela-hash","text":"Busca de elementos em base de dados. Verifica\u00e7\u00e3o de integridade de dados e autentica\u00e7\u00e3o de mensagens. Armazenamento de senhas com seguran\u00e7a. Criptografia (MD5 e SHA).","title":"Aplica\u00e7\u00f5es da Tabela Hash"},{"location":"estrutura_dados/hash-table/#referencias","text":"IFRN - Estrutura de Dados- Profa. Camila Taumaturgo USP - Hash Table - Apresenta\u00e7\u00e3o Medium - Jamin Lee - Has Table Animations IME - USP - Hashing Acervo Lima - Encadeamento Separado","title":"Refer\u00eancias"},{"location":"estrutura_dados/lista-ligada/","text":"Listas Encadeadas / Linked Lists \u00b6 Defini\u00e7\u00e3o \u00b6 Uma lista ligada \u00e9 uma lista linear que a ordem l\u00f3gica dos elementos n\u00e3o \u00e9 a mesma da ordem f\u00edsica. Os elementos est\u00e3o em sequ\u00eancia, ou seja, tem exatamente um sucessor e um predecessor , por\u00e9m, estes elementos est\u00e3o espalhados na mem\u00f3ria. Cada elemento precisa indicar em que endere\u00e7o o seu sucessor pode ser encontrado de modo a manter a ordem l\u00f3gica. Isso \u00e9 feito atrav\u00e9s de um ponteiro. Vantagens: \u00b6 Maior controle na inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. N\u00famero de elementos pode aumentar ou diminuir durante a execu\u00e7\u00e3o do programa. A manuten\u00e7\u00e3o da ordem l\u00f3gica n\u00e3o exigir\u00e1 deslocamentos de elementos. Desvantagens: \u00b6 Retira o acesso em tempo constante a qualquer elemento, dado o \u00edndice do elemento. Precisa percorrer todos os elementos predecessores, um por um. A busca bin\u00e1ria deixa de fazer sentido. Implementa\u00e7\u00e3o de Pilha \u00b6 O c\u00f3digo abaixo foi implementado na videoaula 08 usando o conceito de pilha com listas encadeadas, e a finalidade deste c\u00f3digo \u00e9 verificar a se todos os par\u00eanteses, colchetes e chaves abertos em um determinado texto, foram corretamente fechados. C\u00f3digo \u00b6 node_type.h stack.h stack_alinhamento.cpp stack_encadeamento.cpp typedef char ItemType ; /* Estrutura usada para guardar a informa\u00e7\u00e3o e o endere\u00e7o do pr\u00f3ximo elemento. */ struct NodeType { ItemType info ; NodeType * next ; }; #include \"node_type.h\" class Stack { public : Stack (); // Construtor ~ Stack (); // Destrutor bool isEmpty () const ; bool isFull () const ; void print () const ; void push ( ItemType ); ItemType pop (); private : NodeType * structure ; }; #include \"stack.h\" #include <iostream> using namespace std ; int main () { ItemType character ; Stack stack ; ItemType stackItem ; cout << \"Insira uma string.\" << endl ; cin . get ( character ); bool isMatched = true ; while ( isMatched && character != '\\n' ) { if ( character == '{' || character == '(' || character == '[' ){ stack . push ( character ); } if ( character == '}' || character == ')' || character == ']' ){ if ( stack . isEmpty ()) { isMatched = false ; } else { stackItem = stack . pop (); isMatched = ( ( character == '}' && stackItem == '{' ) || ( character == ')' && stackItem == '(' ) || ( character == ']' && stackItem == '[' ) ); } } cin . get ( character ); } if ( isMatched && stack . isEmpty () ) { cout << \"Bem formada \\n \" ; } else { cout << \"Mal formada \\n \" ; } } #include \"stack.h\" #include <cstddef> // Para funcionar o NULL #include <new> #include <iostream> using namespace std ; Stack :: Stack (){ structure = NULL ; } Stack ::~ Stack (){ NodeType * tempPtr ; while ( structure != NULL ) { tempPtr = structure ; structure = structure -> next ; delete tempPtr ; } } bool Stack :: isEmpty () const { return ( structure == NULL ); } /* Aqui eu simplesmente verifico se o usu\u00e1rio possui mem\u00f3ria dispon\u00edvel para alocar um novo elemento. */ bool Stack :: isFull () const { NodeType * location ; try { location = new NodeType ; delete location ; return false ; } catch ( std :: bad_alloc exception ){ return true ; } } /* Adicionar um novo item no topo da pilha. O n\u00f3 que acabamos de criar deve apontar para quem estava no topo da pilha e o ponteiro structure dever\u00e1 apontar para o novo n\u00f3. */ void Stack :: push ( ItemType item ){ if ( ! isFull ()){ NodeType * location ; location = new NodeType ; location -> info = item ; location -> next = structure ; structure = location ; } else { throw \"Stack is already full!\" ; } } /* Devolve o objeto que est\u00e1 no topo da pilha. */ ItemType Stack :: pop (){ if ( ! isEmpty ()) { NodeType * tempPtr ; tempPtr = structure ; ItemType item = structure -> info ; structure = structure -> next ; delete tempPtr ; return item ; } else { throw \"Stack is empty!\" ; } } void Stack :: print () const { NodeType * tempPtr = structure ; while ( tempPtr != NULL ) { cout << tempPtr -> info ; tempPtr = tempPtr -> next ; } cout << endl ; } Alguns detalhes da implementa\u00e7\u00e3o \u00b6 typedef \u00e9 usado para definir previamente o tipo de uma vari\u00e1vel; private / public s\u00e3o n\u00edveis de configura\u00e7\u00e3o/permiss\u00e3o dentro de uma classe; struct parecido com classe, por\u00e9m, toda a interface \u00e9 p\u00fablica; -> este sinal serve para acessar os campos de um ponteiro; O ponteiro structure sempre apontar\u00e1 para o elemento que est\u00e1 no topo da pilha. Os arquivos com final \".h\" cont\u00e9m classes ou structs que dever\u00e3o ser inclu\u00eddas nos demais c\u00f3digos; O arquivo \"stack_encadeamento.cpp\" define o comportamento das fun\u00e7\u00f5es, O arquivo \"stack_encadeamento.cpp\" cont\u00e9m a main() , que chama de modo ordenado todas as demais fun\u00e7\u00f5es. Exemplo de Sa\u00edda \u00b6 Refer\u00eancias \u00b6 Prof. Douglas Maioli - Aula 05 Estrutura de Dados - Lista Encadeada Prof. Douglas Maioli - Aula 06 - Estrutura de Dados - Lista Encadeada","title":"Lista Ligada"},{"location":"estrutura_dados/lista-ligada/#listas-encadeadas-linked-lists","text":"","title":"Listas Encadeadas / Linked Lists"},{"location":"estrutura_dados/lista-ligada/#definicao","text":"Uma lista ligada \u00e9 uma lista linear que a ordem l\u00f3gica dos elementos n\u00e3o \u00e9 a mesma da ordem f\u00edsica. Os elementos est\u00e3o em sequ\u00eancia, ou seja, tem exatamente um sucessor e um predecessor , por\u00e9m, estes elementos est\u00e3o espalhados na mem\u00f3ria. Cada elemento precisa indicar em que endere\u00e7o o seu sucessor pode ser encontrado de modo a manter a ordem l\u00f3gica. Isso \u00e9 feito atrav\u00e9s de um ponteiro.","title":"Defini\u00e7\u00e3o"},{"location":"estrutura_dados/lista-ligada/#vantagens","text":"Maior controle na inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos. N\u00famero de elementos pode aumentar ou diminuir durante a execu\u00e7\u00e3o do programa. A manuten\u00e7\u00e3o da ordem l\u00f3gica n\u00e3o exigir\u00e1 deslocamentos de elementos.","title":"Vantagens:"},{"location":"estrutura_dados/lista-ligada/#desvantagens","text":"Retira o acesso em tempo constante a qualquer elemento, dado o \u00edndice do elemento. Precisa percorrer todos os elementos predecessores, um por um. A busca bin\u00e1ria deixa de fazer sentido.","title":"Desvantagens:"},{"location":"estrutura_dados/lista-ligada/#implementacao-de-pilha","text":"O c\u00f3digo abaixo foi implementado na videoaula 08 usando o conceito de pilha com listas encadeadas, e a finalidade deste c\u00f3digo \u00e9 verificar a se todos os par\u00eanteses, colchetes e chaves abertos em um determinado texto, foram corretamente fechados.","title":"Implementa\u00e7\u00e3o de Pilha"},{"location":"estrutura_dados/lista-ligada/#codigo","text":"node_type.h stack.h stack_alinhamento.cpp stack_encadeamento.cpp typedef char ItemType ; /* Estrutura usada para guardar a informa\u00e7\u00e3o e o endere\u00e7o do pr\u00f3ximo elemento. */ struct NodeType { ItemType info ; NodeType * next ; }; #include \"node_type.h\" class Stack { public : Stack (); // Construtor ~ Stack (); // Destrutor bool isEmpty () const ; bool isFull () const ; void print () const ; void push ( ItemType ); ItemType pop (); private : NodeType * structure ; }; #include \"stack.h\" #include <iostream> using namespace std ; int main () { ItemType character ; Stack stack ; ItemType stackItem ; cout << \"Insira uma string.\" << endl ; cin . get ( character ); bool isMatched = true ; while ( isMatched && character != '\\n' ) { if ( character == '{' || character == '(' || character == '[' ){ stack . push ( character ); } if ( character == '}' || character == ')' || character == ']' ){ if ( stack . isEmpty ()) { isMatched = false ; } else { stackItem = stack . pop (); isMatched = ( ( character == '}' && stackItem == '{' ) || ( character == ')' && stackItem == '(' ) || ( character == ']' && stackItem == '[' ) ); } } cin . get ( character ); } if ( isMatched && stack . isEmpty () ) { cout << \"Bem formada \\n \" ; } else { cout << \"Mal formada \\n \" ; } } #include \"stack.h\" #include <cstddef> // Para funcionar o NULL #include <new> #include <iostream> using namespace std ; Stack :: Stack (){ structure = NULL ; } Stack ::~ Stack (){ NodeType * tempPtr ; while ( structure != NULL ) { tempPtr = structure ; structure = structure -> next ; delete tempPtr ; } } bool Stack :: isEmpty () const { return ( structure == NULL ); } /* Aqui eu simplesmente verifico se o usu\u00e1rio possui mem\u00f3ria dispon\u00edvel para alocar um novo elemento. */ bool Stack :: isFull () const { NodeType * location ; try { location = new NodeType ; delete location ; return false ; } catch ( std :: bad_alloc exception ){ return true ; } } /* Adicionar um novo item no topo da pilha. O n\u00f3 que acabamos de criar deve apontar para quem estava no topo da pilha e o ponteiro structure dever\u00e1 apontar para o novo n\u00f3. */ void Stack :: push ( ItemType item ){ if ( ! isFull ()){ NodeType * location ; location = new NodeType ; location -> info = item ; location -> next = structure ; structure = location ; } else { throw \"Stack is already full!\" ; } } /* Devolve o objeto que est\u00e1 no topo da pilha. */ ItemType Stack :: pop (){ if ( ! isEmpty ()) { NodeType * tempPtr ; tempPtr = structure ; ItemType item = structure -> info ; structure = structure -> next ; delete tempPtr ; return item ; } else { throw \"Stack is empty!\" ; } } void Stack :: print () const { NodeType * tempPtr = structure ; while ( tempPtr != NULL ) { cout << tempPtr -> info ; tempPtr = tempPtr -> next ; } cout << endl ; }","title":"C\u00f3digo"},{"location":"estrutura_dados/lista-ligada/#alguns-detalhes-da-implementacao","text":"typedef \u00e9 usado para definir previamente o tipo de uma vari\u00e1vel; private / public s\u00e3o n\u00edveis de configura\u00e7\u00e3o/permiss\u00e3o dentro de uma classe; struct parecido com classe, por\u00e9m, toda a interface \u00e9 p\u00fablica; -> este sinal serve para acessar os campos de um ponteiro; O ponteiro structure sempre apontar\u00e1 para o elemento que est\u00e1 no topo da pilha. Os arquivos com final \".h\" cont\u00e9m classes ou structs que dever\u00e3o ser inclu\u00eddas nos demais c\u00f3digos; O arquivo \"stack_encadeamento.cpp\" define o comportamento das fun\u00e7\u00f5es, O arquivo \"stack_encadeamento.cpp\" cont\u00e9m a main() , que chama de modo ordenado todas as demais fun\u00e7\u00f5es.","title":"Alguns detalhes da implementa\u00e7\u00e3o"},{"location":"estrutura_dados/lista-ligada/#exemplo-de-saida","text":"","title":"Exemplo de Sa\u00edda"},{"location":"estrutura_dados/lista-ligada/#referencias","text":"Prof. Douglas Maioli - Aula 05 Estrutura de Dados - Lista Encadeada Prof. Douglas Maioli - Aula 06 - Estrutura de Dados - Lista Encadeada","title":"Refer\u00eancias"},{"location":"estrutura_dados/pointer/","text":"C++ Ponteiro \u00b6 Com ponteiros a execu\u00e7\u00e3o de tarefas de programa\u00e7\u00e3o podem ser simplificadas, e algumas tarefas, como a aloca\u00e7\u00e3o din\u00e2mica da mem\u00f3ria , s\u00f3 podem ser relizadas com ponteiros. Endere\u00e7o de vari\u00e1veis \u00b6 Cada vari\u00e1vel tem seu local na mem\u00f3ria e cada local define um endere\u00e7o que pode ser acessado utilizando o operador \"E comercial\" (&), que representa um endere\u00e7o na mem\u00f3ria. O exemplo abaixo ir\u00e1 retornar o endere\u00e7o de uma vari\u00e1vel definida: #include <iostream> using namespace std ; int main () { int var1 ; char var2 [ 10 ]; cout << \"Endere\u00e7o da vari\u00e1vel var1: \" ; cout << & var1 << endl ; cout << \"Endere\u00e7o da vari\u00e1vel var2 : \" ; cout << & var2 << endl ; return 0 ; } Ap\u00f3s compila\u00e7\u00e3o e execu\u00e7\u00e3o, temos o seguinte resultado: Endere\u00e7o da vari\u00e1vel var1: 0x7fffc99d6578 Endere\u00e7o da vari\u00e1vel var2 : 0x7fffc99d657e Ponteiro \u00b6 Depois de ter visto o que \u00e9 um endere\u00e7o na mem\u00f3ria e como acess\u00e1-lo, o entendimento de um ponteiro ser\u00e1 mais f\u00e1cil. Ponteiro \u00e9 uma vari\u00e1vel cujo valor \u00e9 o endere\u00e7o de outra vari\u00e1vel, ou seja, o endere\u00e7o direto de uma loca\u00e7\u00e3o na mem\u00f3ria. Como qualquer vari\u00e1vel ou constante, um ponteiro deve ser declarado antes de us\u00e1-lo para armazenar o endere\u00e7o de outra vari\u00e1vel. De forma geral, um ponteiro se declara assim: int * number ; /* um ponteiro para vari\u00e1veis do tipo inteiro */ float * decimal_number ; /* um ponteiro para um float*/ char * character ; /* um ponteiro para vari\u00e1veis do tipo char */ Todo ponteiro \u00e9 um longo hexadecimal representando um endere\u00e7o na mem\u00f3ria. Usando Ponteiros \u00b6 Para usar o ponteiro, normalmente seguimos os seguintes passos: 1. Definir um ponteiro; 2. Atribuir o endere\u00e7o da vari\u00e1vel ao ponteiro; 3. Acessar o valor do endere\u00e7o dispon\u00edvel na vari\u00e1vel ponteiro. Isso ir\u00e1 retornar o valor da vari\u00e1vel no endere\u00e7o espec\u00edfico pelo operador * . Exemplo: #include <iostream> using namespace std ; int main () { int var = 20 ; // declara\u00e7\u00e3o de vari\u00e1vel int * int_pointer ; // declara\u00e7\u00e3o da vari\u00e1vel ponteiro int_pointer = & var ; // armazena o endere\u00e7o da \"var\" no espec\u00edfico ponteiro cout << \"Valor da vari\u00e1vel var: \" ; cout << var << endl ; // gera o endere\u00e7o armazenado na vari\u00e1vel ponteiro cout << \"Endere\u00e7o armazenado na vari\u00e1vel int_pointer: \" ; cout << int_pointer << endl ; // accessa o valor do endere\u00e7o no ponteiro cout << \"Valor da vari\u00e1vel *int_pointer: \" ; cout << * int_pointer << endl ; return 0 ; } Ap\u00f3s compilar e executar temos o seguinte resultado: Refer\u00eancias \u00b6 https://cplusplus.com/doc/tutorial/pointers/ https://www.simplilearn.com/tutorials/cpp-tutorial/pointers-in-cpp https://iditect.com/guide/cplusplus/cpp-pointers.html","title":"Ponteiro"},{"location":"estrutura_dados/pointer/#c-ponteiro","text":"Com ponteiros a execu\u00e7\u00e3o de tarefas de programa\u00e7\u00e3o podem ser simplificadas, e algumas tarefas, como a aloca\u00e7\u00e3o din\u00e2mica da mem\u00f3ria , s\u00f3 podem ser relizadas com ponteiros.","title":"C++ Ponteiro"},{"location":"estrutura_dados/pointer/#endereco-de-variaveis","text":"Cada vari\u00e1vel tem seu local na mem\u00f3ria e cada local define um endere\u00e7o que pode ser acessado utilizando o operador \"E comercial\" (&), que representa um endere\u00e7o na mem\u00f3ria. O exemplo abaixo ir\u00e1 retornar o endere\u00e7o de uma vari\u00e1vel definida: #include <iostream> using namespace std ; int main () { int var1 ; char var2 [ 10 ]; cout << \"Endere\u00e7o da vari\u00e1vel var1: \" ; cout << & var1 << endl ; cout << \"Endere\u00e7o da vari\u00e1vel var2 : \" ; cout << & var2 << endl ; return 0 ; } Ap\u00f3s compila\u00e7\u00e3o e execu\u00e7\u00e3o, temos o seguinte resultado: Endere\u00e7o da vari\u00e1vel var1: 0x7fffc99d6578 Endere\u00e7o da vari\u00e1vel var2 : 0x7fffc99d657e","title":"Endere\u00e7o de vari\u00e1veis"},{"location":"estrutura_dados/pointer/#ponteiro","text":"Depois de ter visto o que \u00e9 um endere\u00e7o na mem\u00f3ria e como acess\u00e1-lo, o entendimento de um ponteiro ser\u00e1 mais f\u00e1cil. Ponteiro \u00e9 uma vari\u00e1vel cujo valor \u00e9 o endere\u00e7o de outra vari\u00e1vel, ou seja, o endere\u00e7o direto de uma loca\u00e7\u00e3o na mem\u00f3ria. Como qualquer vari\u00e1vel ou constante, um ponteiro deve ser declarado antes de us\u00e1-lo para armazenar o endere\u00e7o de outra vari\u00e1vel. De forma geral, um ponteiro se declara assim: int * number ; /* um ponteiro para vari\u00e1veis do tipo inteiro */ float * decimal_number ; /* um ponteiro para um float*/ char * character ; /* um ponteiro para vari\u00e1veis do tipo char */ Todo ponteiro \u00e9 um longo hexadecimal representando um endere\u00e7o na mem\u00f3ria.","title":"Ponteiro"},{"location":"estrutura_dados/pointer/#usando-ponteiros","text":"Para usar o ponteiro, normalmente seguimos os seguintes passos: 1. Definir um ponteiro; 2. Atribuir o endere\u00e7o da vari\u00e1vel ao ponteiro; 3. Acessar o valor do endere\u00e7o dispon\u00edvel na vari\u00e1vel ponteiro. Isso ir\u00e1 retornar o valor da vari\u00e1vel no endere\u00e7o espec\u00edfico pelo operador * . Exemplo: #include <iostream> using namespace std ; int main () { int var = 20 ; // declara\u00e7\u00e3o de vari\u00e1vel int * int_pointer ; // declara\u00e7\u00e3o da vari\u00e1vel ponteiro int_pointer = & var ; // armazena o endere\u00e7o da \"var\" no espec\u00edfico ponteiro cout << \"Valor da vari\u00e1vel var: \" ; cout << var << endl ; // gera o endere\u00e7o armazenado na vari\u00e1vel ponteiro cout << \"Endere\u00e7o armazenado na vari\u00e1vel int_pointer: \" ; cout << int_pointer << endl ; // accessa o valor do endere\u00e7o no ponteiro cout << \"Valor da vari\u00e1vel *int_pointer: \" ; cout << * int_pointer << endl ; return 0 ; } Ap\u00f3s compilar e executar temos o seguinte resultado:","title":"Usando Ponteiros"},{"location":"estrutura_dados/pointer/#referencias","text":"https://cplusplus.com/doc/tutorial/pointers/ https://www.simplilearn.com/tutorials/cpp-tutorial/pointers-in-cpp https://iditect.com/guide/cplusplus/cpp-pointers.html","title":"Refer\u00eancias"},{"location":"estrutura_dados/referencias-e-copias/","text":"Refer\u00eancias e C\u00f3pias (Valor) \u00b6 Em C++, podemos passar argumentos e retornar vari\u00e1veis por refer\u00eancia ou valor, isto \u00e9, uma c\u00f3pia. A escolha entre um e outro est\u00e1 relacionada com a performance do programa e boas pr\u00e1ticas. Para entendermos bem, uma revisada em aloca\u00e7\u00e3o est\u00e1tica vs din\u00e2mica \u00e9 importante. Antes de come\u00e7armos \u00b6 Para os estudos nessa se\u00e7\u00e3o, vamos apresentar uma classe que ir\u00e1 expor quando um objeto \u00e9 criado, destruido, copiado ou atribuido. Assim, ficar\u00e1 claro o momento exato de cada processo. Nosso objeto ter\u00e1 a seguinte interface, no arquivo obj.h : #ifndef OBJ_H #define OBJ_H class OBJ { private : static int count ; int id ; int cp ; public : Obj (); ~ Obj (); Obj ( const Obj & o ); Obj & operator = ( const Obj & o ); void print_id_address (); void print_cp_address (); void print_obj_address (); void print_full_address (); }; #endif Cada um dos membros tem a seguinte fun\u00e7\u00e3o: count : respons\u00e1vel por gerar n\u00fameros sequenciais, assim podemos criar identificadores \u00fanicos para cada objeto; id : respons\u00e1vel por armazenar o identificador \u00fanico do objeto; cp : respons\u00e1vel por armazenar a origem do objeto copiado ou atribuido, quando construido do zero, ele recebe o pr\u00f3prio id ; Obj() : \u00e9 o construtor; ~Obj() : \u00e9 o destrutor; Obj(const Obj& o) : \u00e9 o construtor de c\u00f3pia; Obj& operator = (const Obj& o) : \u00e9 o operador de atribui\u00e7\u00e3o, isto \u00e9, (=); print_... : s\u00e3o respons\u00e1veis por imprimir endere\u00e7os das vari\u00e1veis; A implementa\u00e7\u00e3o encontra-se no arquvio obj.cpp , a l\u00f3gica por tr\u00e1s da classe \u00e9 incrementar count a cada chamada de construtor, c\u00f3pia ou atribui\u00e7\u00e3o passando esse valor para o id . Quando h\u00e1 c\u00f3pia ou atribui\u00e7\u00e3o, o id do objeto copiado \u00e9 passado para o objeto final em cp . Para sabermos quando cada m\u00e9todo \u00e9 invocado, usamos um print com o id e/ou cp . Aloca\u00e7\u00e3o de Mem\u00f3ria: Est\u00e1tica vs Din\u00e2mica \u00b6 Quando executamos um processo, precisamos reservar mem\u00f3ria para ele. Essa mem\u00f3ria \u00e9 dividida em sess\u00f5es sendo as principais: stack e heap . Toda vez que chamamos uma fun\u00e7\u00e3o, a pilha de execu\u00e7\u00e3o recebe um push armazenando vari\u00e1veis e instru\u00e7\u00f5es na stack . Quando a fun\u00e7\u00e3o encerra, tudo que foi armazenado na stack \u00e9 liberado, isto \u00e9, pode ser sobreescrito por uma nova chamada. Ex: void test_static_alloc () { std :: cout << \"Inicio Alocacao Estatica \\n \" ; Obj o ; std :: cout << \"Final Alocacao Estatica \\n ; } Se executarmos essa fun\u00e7\u00e3o, ela gera o seguinte output: Inicio Alocacao Estatica Construtor Objeto(1) Final Alocacao Estatica Destrutor Objeto(1) chamado Como pode observar, o objeto \u00e9 criado no exato momento em que \u00e9 definido e \u00e9 destruido ap\u00f3s encerrar o programa. J\u00e1 na aloca\u00e7\u00e3o din\u00e2mica, temos a responsabilidade de liberar a mem\u00f3ria, no caso de objetos, invocar seu destrutor. Para alocarmos dinamicamente, usamos new e para liberar delete . Vari\u00e1veis alocadas dinamicamente s\u00e3o armazenadas no heap , assim elas podem permanecer armazenadas ap\u00f3s o final da fun\u00e7\u00e3o. Ex: void test_dynamic_alloc () { std :: cout << \"Inicio Alocacao Dinamica \\n \" ; Obj * o = new Obj (); delete o ; std :: cout << \"Final Alocacao Dinamica \\n \" ; } Repare que estamos usando ponteiros, isso porque o operador new nos retorna um ponteiro e devemos manter o endere\u00e7o de mem\u00f3ria sempre armazenado em alguma vari\u00e1vel. Assim, podemos liberar aquele endere\u00e7o. Outro ponto importante \u00e9: n\u00e3o devemos usar delete num endere\u00e7o j\u00e1 liberado, o resultado dessa opera\u00e7\u00e3o \u00e9 indefinido. A fun\u00e7\u00e3o anterior gera o seguinte output: Inicio Alocacao Dinamica Construtor Objeto(2) chamado Destrutor Objeto(2) chamado Final Alocacao Dinamica Repare que o construtor continua sendo chamado no momento da defini\u00e7\u00e3o, mas agora temos total controle do momento em que o destrutor \u00e9 chamado, podendo inclusive ser invocado fora do escopo da fun\u00e7\u00e3o, desde que temos o endere\u00e7o da mem\u00f3ria alocada. No pr\u00f3ximo exemplo, temos um vazamento de mem\u00f3ria e uma prova de que o objeto persiste armazenado mesmo ap\u00f3s o final da execu\u00e7\u00e3o do programa. Em sistemas operacionais modernos, a mem\u00f3ria de um processo \u00e9 sempre monitorada para libera-la ao final da execu\u00e7\u00e3o, mesmo que o programa n\u00e3o a libere. void test_memory_leak () { std :: cout << \"Inicio Vazamento de Memoria \\n \" ; Obj * o = new Obj (); std :: cout << \"Final Vazamento de Memoria \\n \" ; } Output: Inicio Vazamento de Memoria Construtor Objeto(13) chamado Final Vazamento de Memoria Repare que o Objeto(13) n\u00e3o ser\u00e1 destru\u00eddo ao longo do programa. Array \u00b6 A sintaxe para aloca\u00e7\u00e3o est\u00e1tica e din\u00e2mica de arrays \u00e9 muito similar e revela a forma correta de liberar mem\u00f3ria: devemos liberar na ordem inversa que alocamos. Assim, temos as seguintes fun\u00e7\u00f5es e seus outputs: void test_static_alloc_array () { std :: cout << \"Inicio Alocacao Estatica Array \\n \" ; Obj o [ 5 ]; std :: cout << \"Final Alocacao Estatica Array \\n \" ; } void test_dynamic_alloc_array () { std :: cout << \"Inicio Alocacao Dinamica Array \\n \" ; Obj * o = new Obj [ 5 ]; delete [] o ; std :: cout << \"Final Alocacao Dinamica Array \\n \" ; } Inicio Alocacao Estatica de Array Construtor Objeto(3) chamado Construtor Objeto(4) chamado Construtor Objeto(5) chamado Construtor Objeto(6) chamado Construtor Objeto(7) chamado Final Alocacao Estatica de Array Destrutor Objeto(7) chamado Destrutor Objeto(6) chamado Destrutor Objeto(5) chamado Destrutor Objeto(4) chamado Destrutor Objeto(3) chamado Inicio Alocacao Dinamica de Array Construtor Objeto(8) chamado Construtor Objeto(9) chamado Construtor Objeto(10) chamado Construtor Objeto(11) chamado Construtor Objeto(12) chamado Destrutor Objeto(12) chamado Destrutor Objeto(11) chamado Destrutor Objeto(10) chamado Destrutor Objeto(9) chamado Destrutor Objeto(8) chamado Final Alocaco Dinamica de Array Passagem de Argumentos: Valor vs Refer\u00eancia \u00b6 Em C++, ao contr\u00e1rio de outras linguagens, podemos passar objetos por valor ou refer\u00eancia . Quando passamos um objeto por valor , uma c\u00f3pia \u00e9 criada e armazenada na stack , e como vimos, \u00e9 destru\u00eddo quando a fun\u00e7\u00e3o encerra. Por outro lado, quando passamos por refer\u00eancia , estamos passando um alias , isto \u00e9, um outro identificador para o mesmo objeto v\u00e1lido. Assim, ele tem efeito fora do escopo daquela fun\u00e7\u00e3o, ou seja, podemos modific\u00e1-lo sem precisar retornar. Para testar as fun\u00e7\u00f5es abaixo, lembre-se de passar um objeto para fun\u00e7\u00e3o. void test_pass_by_value ( Obj o , int i ) { printf ( \"Inicio Passar Por Valor %d \\n \" , i ); if ( i == 0 ) { std :: cout << \"Endereco de Obj antes:\" << & o << std :: endl ; test_pass_by_value ( o , i + 1 ); } else { std :: cout << \"Endereco de Obj depois:\" << & o << std :: endl ; } printf ( \"Final Passar Por Valor %d \\n \" , i ); } void test_pass_by_ref ( Obj & o , int i ) { printf ( \"Inicio Passar Por Referencia %d \\n \" , i ); if ( i == 0 ) { std :: cout << \"Endereco de Obj antes:\" << & o << std :: endl ; test_pass_by_ref ( o , i + 1 ); } else { std :: cout << \"Endereco de Obj depois:\" << & o << std :: endl ; } printf ( \"Final Passar Por Referencia %d \\n \" , i ); } Construtor Copia de (0) para Objeto(14) chamado Inicio Passar Por Valor 0 Endereco de Obj antes:0x7ffd6ba2f5b8 Construtor Copia de (14) para Objeto(15) chamado Inicio Passar Por Valor 1 Endereco de Obj depois:0x7ffd6ba2f578 Final Passar Por Valor 1 Destrutor Objeto(15) chamado Final Passar Por Valor 0 Destrutor Objeto(14) chamado Inicio Passar Por Referencia 0 Endereco de Obj antes:0x7ffd6ba2f5b0 Inicio Passar Por Referencia 1 Endereco de Obj depois:0x7ffd6ba2f5b0 Final Passar Por Referencia 1 Final Passar Por Referencia 0 Repare que, quando passamos por valor, o construtor de c\u00f3pia \u00e9 chamado, enquanto que, quando passamos por refer\u00eancia, ele n\u00e3o \u00e9. Outro ponto \u00e9 que o endere\u00e7o se mant\u00e9m. Isso implica que passar por refer\u00eancia \u00e9 mais perform\u00e1tico que passar por valor, usando menos processamento e mem\u00f3ria. Retornar e Atribuir \u00b6 Por Valor \u00b6 No caso de retornar objetos existe uma peculiaridade: dependendo do compilador usado, existem otimiza\u00e7\u00f5es no retorno por valor que n\u00e3o geram c\u00f3pias. Essa op\u00e7\u00e2o pode ser desabilitada passando --fno-elide-construtors no momento da compila\u00e7\u00e3o se estiver utilizando g++ . Por enquanto, vamos analisar o resultado com essa otimiza\u00e7\u00e3o, que evita chamadas desnecess\u00e1rias ao construtor de c\u00f3pia. Obj test_return_by_value () { cout << \"Inicio Retornar por Valor \\n \" ; Obj o ; cout << \"Final Retornar Por Valor \\n \" ; return o ; } void test_assignment_by_value () { cout << \"Inicio Atribuicao Por Valor \\n \" ; Obj o ; o . print_full_address (); o = test_return_by_value (); o . print_full_address (); Obj p = test_return_by_value (); cout << \"Final Atribuicao por Valor \\n \" ; } Usando apenas a fun\u00e7\u00e3o test_assignment_by_value() , obtemos o seguinte: Inicio Atribuicao Por Valor Construtor Objeto(16) chamado Endereco de Obj: 0x7ffd6ba2f570 Endereco do ID: 0x7ffd6ba2f570 Endereco de CP: 0x7ffd6ba2f574 Inicio Retornar por Valor Construtor Objeto(17) chamado Final Retornar Por Valor Operador Atribui de (17) para Objeto(16) chamado Destrutor Objeto(17) chamado Endereco de Obj: 0x7ffd6ba2f570 Endereco do ID: 0x7ffd6ba2f570 Endereco de CP: 0x7ffd6ba2f574 Inicio Retornar por Valor Construtor Objeto(18) chamado Final Retornar Por Valor Final Atribuicao por Valor Destrutor Objeto(18) chamado Destrutor Objeto(16) chamado Observe que o endere\u00e7o do objeto atribuido n\u00e3o se altera, nem suas vari\u00e1veis. Como criamos um objeto dentro de test_return_by_value() , vemos a sua cria\u00e7\u00e3o e, em seguida, ocorre a atribui\u00e7\u00e3o Objeto(16) = Objeto(17). Por\u00e9m, logo que a fun\u00e7\u00e3o encerra, o Objeto(17) \u00e9 destruido. No segundo caso, vemos o resultado da otimiza\u00e7\u00e3o, pois o objeto \u00e9 criado dentro da fun\u00e7\u00e3o e retornado. Isso ocorre, pois a declara\u00e7\u00e3o/defini\u00e7\u00e3o e atribui\u00e7\u00e3o est\u00e3o na mesma linha. Se desativar a otimiza\u00e7\u00e3o, poder\u00e1 observar que o processo de c\u00f3pia e destrui\u00e7\u00e3o ocorre em ambos os casos. Ex: Inicio Atribuicao Por Valor Construtor Objeto(16) chamado Endereco de Obj: 0x7fff7f2cdb48 Endereco do ID: 0x7fff7f2cdb48 Endereco de CP: 0x7fff7f2cdb4c Inicio Retornar por Valor Construtor Objeto(17) chamado Final Retornar Por Valor Construtor Copia de (17) para Objeto(18) chamado Destrutor Objeto(17) chamado Operador Atribui de (18) para Objeto(16) chamado Destrutor Objeto(18) chamado Endereco de Obj: 0x7fff7f2cdb48 Endereco do ID: 0x7fff7f2cdb48 Endereco de CP: 0x7fff7f2cdb4c Inicio Retornar por Valor Construtor Objeto(19) chamado Final Retornar Por Valor Construtor Copia de (19) para Objeto(20) chamado Destrutor Objeto(19) chamado Construtor Copia de (20) para Objeto(21) chamado Destrutor Objeto(20) chamado Final Atribuicao por Valor Destrutor Objeto(21) chamado Destrutor Objeto(16) chamado Por Refer\u00eancia \u00b6 Retornar por refer\u00eancia possui uma s\u00e9rie de particularidades, e, se est\u00e1 iniciando, evite usar essa t\u00e9cnica. Por outro lado, seu principal uso \u00e9 a sobrecarga de operadores, como a que fizemos para atribuir. A regra principal a ser seguida \u00e9: nunca crie uma vari\u00e1vel local e a retorne por refer\u00eancia, pois seu endere\u00e7o ser\u00e1 liberado criando o chamado dangling pointer gerando comportamento indefinido da aplica\u00e7\u00e3o. Aqui, mostramos um exemplo e o resultado do output: Obj & test_return_by_ref ( Obj & o ) { cout << \"Inicio Retornar por Referencia \\n \" ; cout << \"Final Retornar por Referencia \\n \" ; return o ; } void test_assignment_by_ref () { cout << \"Inicio Atribuicao por Referencia \\n \" ; Obj o ; o . print_full_address (); Obj & p = test_return_by_ref ( o ); p . print_full_address (); cout << \"Final Atribuicao por Referencia \\n \" ; } Usando apenas test_assingment_by_ref() : Inicio Atribuicao por Referencia Construtor Objeto(22) chamado Endereco de Obj: 0x7fff7f2cdb50 Endereco do ID: 0x7fff7f2cdb50 Endereco de CP: 0x7fff7f2cdb54 Inicio Retornar por Referencia Final Retornar por Referencia Endereco de Obj: 0x7fff7f2cdb50 Endereco do ID: 0x7fff7f2cdb50 Endereco de CP: 0x7fff7f2cdb54 Final Atribuicao por Referencia Destrutor Objeto(22) chamado Repare que s\u00f3 um construtor \u00e9 chamado. Esse resultado \u00e9 independente da otimiza\u00e7\u00e3o e refor\u00e7ando: evite essa t\u00e9cnica. Pr\u00e1tica Recomendada \u00b6 A pr\u00e1tica mais recomendada \u00e9 passar por refer\u00eancia e retornar por valor. Assim temos o c\u00f3digo mais perform\u00e1tico e seguro. Podemos tamb\u00e9m passar por refer\u00eancia e alterar o objeto gerando um efeito fora do escopo da fun\u00e7\u00e3o. Essa t\u00e9cnica \u00e9 particularmente recomendada quando queremos retornar mais de uma vari\u00e1vel ao mesmo tempo de tipos diferentes. Obj test_pass_by_ref_return_by_value ( Obj & o ) { cout << \"Inicio Passagem por Referencia Retorno po Valor \\n \" ; cout << \"Final Passagem por Referencia Retorno po Valor \\n \" ; return o ; } int main () { Obj o ; ... cout << \"Pratica mais recomendada \\n \" ; Obj p = test_pass_by_ref_return_by_value ( o ); return 0 ; } Pratica mais recomendada Inicio Passagem por Referencia Retorno po Valor Final Passagem por Referencia Retorno po Valor Construtor Copia de (0) para Objeto(20) chamado","title":"Refer\u00eancias e C\u00f3pias"},{"location":"estrutura_dados/referencias-e-copias/#referencias-e-copias-valor","text":"Em C++, podemos passar argumentos e retornar vari\u00e1veis por refer\u00eancia ou valor, isto \u00e9, uma c\u00f3pia. A escolha entre um e outro est\u00e1 relacionada com a performance do programa e boas pr\u00e1ticas. Para entendermos bem, uma revisada em aloca\u00e7\u00e3o est\u00e1tica vs din\u00e2mica \u00e9 importante.","title":"Refer\u00eancias e C\u00f3pias (Valor)"},{"location":"estrutura_dados/referencias-e-copias/#antes-de-comecarmos","text":"Para os estudos nessa se\u00e7\u00e3o, vamos apresentar uma classe que ir\u00e1 expor quando um objeto \u00e9 criado, destruido, copiado ou atribuido. Assim, ficar\u00e1 claro o momento exato de cada processo. Nosso objeto ter\u00e1 a seguinte interface, no arquivo obj.h : #ifndef OBJ_H #define OBJ_H class OBJ { private : static int count ; int id ; int cp ; public : Obj (); ~ Obj (); Obj ( const Obj & o ); Obj & operator = ( const Obj & o ); void print_id_address (); void print_cp_address (); void print_obj_address (); void print_full_address (); }; #endif Cada um dos membros tem a seguinte fun\u00e7\u00e3o: count : respons\u00e1vel por gerar n\u00fameros sequenciais, assim podemos criar identificadores \u00fanicos para cada objeto; id : respons\u00e1vel por armazenar o identificador \u00fanico do objeto; cp : respons\u00e1vel por armazenar a origem do objeto copiado ou atribuido, quando construido do zero, ele recebe o pr\u00f3prio id ; Obj() : \u00e9 o construtor; ~Obj() : \u00e9 o destrutor; Obj(const Obj& o) : \u00e9 o construtor de c\u00f3pia; Obj& operator = (const Obj& o) : \u00e9 o operador de atribui\u00e7\u00e3o, isto \u00e9, (=); print_... : s\u00e3o respons\u00e1veis por imprimir endere\u00e7os das vari\u00e1veis; A implementa\u00e7\u00e3o encontra-se no arquvio obj.cpp , a l\u00f3gica por tr\u00e1s da classe \u00e9 incrementar count a cada chamada de construtor, c\u00f3pia ou atribui\u00e7\u00e3o passando esse valor para o id . Quando h\u00e1 c\u00f3pia ou atribui\u00e7\u00e3o, o id do objeto copiado \u00e9 passado para o objeto final em cp . Para sabermos quando cada m\u00e9todo \u00e9 invocado, usamos um print com o id e/ou cp .","title":"Antes de come\u00e7armos"},{"location":"estrutura_dados/referencias-e-copias/#alocacao-de-memoria-estatica-vs-dinamica","text":"Quando executamos um processo, precisamos reservar mem\u00f3ria para ele. Essa mem\u00f3ria \u00e9 dividida em sess\u00f5es sendo as principais: stack e heap . Toda vez que chamamos uma fun\u00e7\u00e3o, a pilha de execu\u00e7\u00e3o recebe um push armazenando vari\u00e1veis e instru\u00e7\u00f5es na stack . Quando a fun\u00e7\u00e3o encerra, tudo que foi armazenado na stack \u00e9 liberado, isto \u00e9, pode ser sobreescrito por uma nova chamada. Ex: void test_static_alloc () { std :: cout << \"Inicio Alocacao Estatica \\n \" ; Obj o ; std :: cout << \"Final Alocacao Estatica \\n ; } Se executarmos essa fun\u00e7\u00e3o, ela gera o seguinte output: Inicio Alocacao Estatica Construtor Objeto(1) Final Alocacao Estatica Destrutor Objeto(1) chamado Como pode observar, o objeto \u00e9 criado no exato momento em que \u00e9 definido e \u00e9 destruido ap\u00f3s encerrar o programa. J\u00e1 na aloca\u00e7\u00e3o din\u00e2mica, temos a responsabilidade de liberar a mem\u00f3ria, no caso de objetos, invocar seu destrutor. Para alocarmos dinamicamente, usamos new e para liberar delete . Vari\u00e1veis alocadas dinamicamente s\u00e3o armazenadas no heap , assim elas podem permanecer armazenadas ap\u00f3s o final da fun\u00e7\u00e3o. Ex: void test_dynamic_alloc () { std :: cout << \"Inicio Alocacao Dinamica \\n \" ; Obj * o = new Obj (); delete o ; std :: cout << \"Final Alocacao Dinamica \\n \" ; } Repare que estamos usando ponteiros, isso porque o operador new nos retorna um ponteiro e devemos manter o endere\u00e7o de mem\u00f3ria sempre armazenado em alguma vari\u00e1vel. Assim, podemos liberar aquele endere\u00e7o. Outro ponto importante \u00e9: n\u00e3o devemos usar delete num endere\u00e7o j\u00e1 liberado, o resultado dessa opera\u00e7\u00e3o \u00e9 indefinido. A fun\u00e7\u00e3o anterior gera o seguinte output: Inicio Alocacao Dinamica Construtor Objeto(2) chamado Destrutor Objeto(2) chamado Final Alocacao Dinamica Repare que o construtor continua sendo chamado no momento da defini\u00e7\u00e3o, mas agora temos total controle do momento em que o destrutor \u00e9 chamado, podendo inclusive ser invocado fora do escopo da fun\u00e7\u00e3o, desde que temos o endere\u00e7o da mem\u00f3ria alocada. No pr\u00f3ximo exemplo, temos um vazamento de mem\u00f3ria e uma prova de que o objeto persiste armazenado mesmo ap\u00f3s o final da execu\u00e7\u00e3o do programa. Em sistemas operacionais modernos, a mem\u00f3ria de um processo \u00e9 sempre monitorada para libera-la ao final da execu\u00e7\u00e3o, mesmo que o programa n\u00e3o a libere. void test_memory_leak () { std :: cout << \"Inicio Vazamento de Memoria \\n \" ; Obj * o = new Obj (); std :: cout << \"Final Vazamento de Memoria \\n \" ; } Output: Inicio Vazamento de Memoria Construtor Objeto(13) chamado Final Vazamento de Memoria Repare que o Objeto(13) n\u00e3o ser\u00e1 destru\u00eddo ao longo do programa.","title":"Aloca\u00e7\u00e3o de Mem\u00f3ria: Est\u00e1tica vs Din\u00e2mica"},{"location":"estrutura_dados/referencias-e-copias/#array","text":"A sintaxe para aloca\u00e7\u00e3o est\u00e1tica e din\u00e2mica de arrays \u00e9 muito similar e revela a forma correta de liberar mem\u00f3ria: devemos liberar na ordem inversa que alocamos. Assim, temos as seguintes fun\u00e7\u00f5es e seus outputs: void test_static_alloc_array () { std :: cout << \"Inicio Alocacao Estatica Array \\n \" ; Obj o [ 5 ]; std :: cout << \"Final Alocacao Estatica Array \\n \" ; } void test_dynamic_alloc_array () { std :: cout << \"Inicio Alocacao Dinamica Array \\n \" ; Obj * o = new Obj [ 5 ]; delete [] o ; std :: cout << \"Final Alocacao Dinamica Array \\n \" ; } Inicio Alocacao Estatica de Array Construtor Objeto(3) chamado Construtor Objeto(4) chamado Construtor Objeto(5) chamado Construtor Objeto(6) chamado Construtor Objeto(7) chamado Final Alocacao Estatica de Array Destrutor Objeto(7) chamado Destrutor Objeto(6) chamado Destrutor Objeto(5) chamado Destrutor Objeto(4) chamado Destrutor Objeto(3) chamado Inicio Alocacao Dinamica de Array Construtor Objeto(8) chamado Construtor Objeto(9) chamado Construtor Objeto(10) chamado Construtor Objeto(11) chamado Construtor Objeto(12) chamado Destrutor Objeto(12) chamado Destrutor Objeto(11) chamado Destrutor Objeto(10) chamado Destrutor Objeto(9) chamado Destrutor Objeto(8) chamado Final Alocaco Dinamica de Array","title":"Array"},{"location":"estrutura_dados/referencias-e-copias/#passagem-de-argumentos-valor-vs-referencia","text":"Em C++, ao contr\u00e1rio de outras linguagens, podemos passar objetos por valor ou refer\u00eancia . Quando passamos um objeto por valor , uma c\u00f3pia \u00e9 criada e armazenada na stack , e como vimos, \u00e9 destru\u00eddo quando a fun\u00e7\u00e3o encerra. Por outro lado, quando passamos por refer\u00eancia , estamos passando um alias , isto \u00e9, um outro identificador para o mesmo objeto v\u00e1lido. Assim, ele tem efeito fora do escopo daquela fun\u00e7\u00e3o, ou seja, podemos modific\u00e1-lo sem precisar retornar. Para testar as fun\u00e7\u00f5es abaixo, lembre-se de passar um objeto para fun\u00e7\u00e3o. void test_pass_by_value ( Obj o , int i ) { printf ( \"Inicio Passar Por Valor %d \\n \" , i ); if ( i == 0 ) { std :: cout << \"Endereco de Obj antes:\" << & o << std :: endl ; test_pass_by_value ( o , i + 1 ); } else { std :: cout << \"Endereco de Obj depois:\" << & o << std :: endl ; } printf ( \"Final Passar Por Valor %d \\n \" , i ); } void test_pass_by_ref ( Obj & o , int i ) { printf ( \"Inicio Passar Por Referencia %d \\n \" , i ); if ( i == 0 ) { std :: cout << \"Endereco de Obj antes:\" << & o << std :: endl ; test_pass_by_ref ( o , i + 1 ); } else { std :: cout << \"Endereco de Obj depois:\" << & o << std :: endl ; } printf ( \"Final Passar Por Referencia %d \\n \" , i ); } Construtor Copia de (0) para Objeto(14) chamado Inicio Passar Por Valor 0 Endereco de Obj antes:0x7ffd6ba2f5b8 Construtor Copia de (14) para Objeto(15) chamado Inicio Passar Por Valor 1 Endereco de Obj depois:0x7ffd6ba2f578 Final Passar Por Valor 1 Destrutor Objeto(15) chamado Final Passar Por Valor 0 Destrutor Objeto(14) chamado Inicio Passar Por Referencia 0 Endereco de Obj antes:0x7ffd6ba2f5b0 Inicio Passar Por Referencia 1 Endereco de Obj depois:0x7ffd6ba2f5b0 Final Passar Por Referencia 1 Final Passar Por Referencia 0 Repare que, quando passamos por valor, o construtor de c\u00f3pia \u00e9 chamado, enquanto que, quando passamos por refer\u00eancia, ele n\u00e3o \u00e9. Outro ponto \u00e9 que o endere\u00e7o se mant\u00e9m. Isso implica que passar por refer\u00eancia \u00e9 mais perform\u00e1tico que passar por valor, usando menos processamento e mem\u00f3ria.","title":"Passagem de Argumentos: Valor vs Refer\u00eancia"},{"location":"estrutura_dados/referencias-e-copias/#retornar-e-atribuir","text":"","title":"Retornar e Atribuir"},{"location":"estrutura_dados/referencias-e-copias/#por-valor","text":"No caso de retornar objetos existe uma peculiaridade: dependendo do compilador usado, existem otimiza\u00e7\u00f5es no retorno por valor que n\u00e3o geram c\u00f3pias. Essa op\u00e7\u00e2o pode ser desabilitada passando --fno-elide-construtors no momento da compila\u00e7\u00e3o se estiver utilizando g++ . Por enquanto, vamos analisar o resultado com essa otimiza\u00e7\u00e3o, que evita chamadas desnecess\u00e1rias ao construtor de c\u00f3pia. Obj test_return_by_value () { cout << \"Inicio Retornar por Valor \\n \" ; Obj o ; cout << \"Final Retornar Por Valor \\n \" ; return o ; } void test_assignment_by_value () { cout << \"Inicio Atribuicao Por Valor \\n \" ; Obj o ; o . print_full_address (); o = test_return_by_value (); o . print_full_address (); Obj p = test_return_by_value (); cout << \"Final Atribuicao por Valor \\n \" ; } Usando apenas a fun\u00e7\u00e3o test_assignment_by_value() , obtemos o seguinte: Inicio Atribuicao Por Valor Construtor Objeto(16) chamado Endereco de Obj: 0x7ffd6ba2f570 Endereco do ID: 0x7ffd6ba2f570 Endereco de CP: 0x7ffd6ba2f574 Inicio Retornar por Valor Construtor Objeto(17) chamado Final Retornar Por Valor Operador Atribui de (17) para Objeto(16) chamado Destrutor Objeto(17) chamado Endereco de Obj: 0x7ffd6ba2f570 Endereco do ID: 0x7ffd6ba2f570 Endereco de CP: 0x7ffd6ba2f574 Inicio Retornar por Valor Construtor Objeto(18) chamado Final Retornar Por Valor Final Atribuicao por Valor Destrutor Objeto(18) chamado Destrutor Objeto(16) chamado Observe que o endere\u00e7o do objeto atribuido n\u00e3o se altera, nem suas vari\u00e1veis. Como criamos um objeto dentro de test_return_by_value() , vemos a sua cria\u00e7\u00e3o e, em seguida, ocorre a atribui\u00e7\u00e3o Objeto(16) = Objeto(17). Por\u00e9m, logo que a fun\u00e7\u00e3o encerra, o Objeto(17) \u00e9 destruido. No segundo caso, vemos o resultado da otimiza\u00e7\u00e3o, pois o objeto \u00e9 criado dentro da fun\u00e7\u00e3o e retornado. Isso ocorre, pois a declara\u00e7\u00e3o/defini\u00e7\u00e3o e atribui\u00e7\u00e3o est\u00e3o na mesma linha. Se desativar a otimiza\u00e7\u00e3o, poder\u00e1 observar que o processo de c\u00f3pia e destrui\u00e7\u00e3o ocorre em ambos os casos. Ex: Inicio Atribuicao Por Valor Construtor Objeto(16) chamado Endereco de Obj: 0x7fff7f2cdb48 Endereco do ID: 0x7fff7f2cdb48 Endereco de CP: 0x7fff7f2cdb4c Inicio Retornar por Valor Construtor Objeto(17) chamado Final Retornar Por Valor Construtor Copia de (17) para Objeto(18) chamado Destrutor Objeto(17) chamado Operador Atribui de (18) para Objeto(16) chamado Destrutor Objeto(18) chamado Endereco de Obj: 0x7fff7f2cdb48 Endereco do ID: 0x7fff7f2cdb48 Endereco de CP: 0x7fff7f2cdb4c Inicio Retornar por Valor Construtor Objeto(19) chamado Final Retornar Por Valor Construtor Copia de (19) para Objeto(20) chamado Destrutor Objeto(19) chamado Construtor Copia de (20) para Objeto(21) chamado Destrutor Objeto(20) chamado Final Atribuicao por Valor Destrutor Objeto(21) chamado Destrutor Objeto(16) chamado","title":"Por Valor"},{"location":"estrutura_dados/referencias-e-copias/#por-referencia","text":"Retornar por refer\u00eancia possui uma s\u00e9rie de particularidades, e, se est\u00e1 iniciando, evite usar essa t\u00e9cnica. Por outro lado, seu principal uso \u00e9 a sobrecarga de operadores, como a que fizemos para atribuir. A regra principal a ser seguida \u00e9: nunca crie uma vari\u00e1vel local e a retorne por refer\u00eancia, pois seu endere\u00e7o ser\u00e1 liberado criando o chamado dangling pointer gerando comportamento indefinido da aplica\u00e7\u00e3o. Aqui, mostramos um exemplo e o resultado do output: Obj & test_return_by_ref ( Obj & o ) { cout << \"Inicio Retornar por Referencia \\n \" ; cout << \"Final Retornar por Referencia \\n \" ; return o ; } void test_assignment_by_ref () { cout << \"Inicio Atribuicao por Referencia \\n \" ; Obj o ; o . print_full_address (); Obj & p = test_return_by_ref ( o ); p . print_full_address (); cout << \"Final Atribuicao por Referencia \\n \" ; } Usando apenas test_assingment_by_ref() : Inicio Atribuicao por Referencia Construtor Objeto(22) chamado Endereco de Obj: 0x7fff7f2cdb50 Endereco do ID: 0x7fff7f2cdb50 Endereco de CP: 0x7fff7f2cdb54 Inicio Retornar por Referencia Final Retornar por Referencia Endereco de Obj: 0x7fff7f2cdb50 Endereco do ID: 0x7fff7f2cdb50 Endereco de CP: 0x7fff7f2cdb54 Final Atribuicao por Referencia Destrutor Objeto(22) chamado Repare que s\u00f3 um construtor \u00e9 chamado. Esse resultado \u00e9 independente da otimiza\u00e7\u00e3o e refor\u00e7ando: evite essa t\u00e9cnica.","title":"Por Refer\u00eancia"},{"location":"estrutura_dados/referencias-e-copias/#pratica-recomendada","text":"A pr\u00e1tica mais recomendada \u00e9 passar por refer\u00eancia e retornar por valor. Assim temos o c\u00f3digo mais perform\u00e1tico e seguro. Podemos tamb\u00e9m passar por refer\u00eancia e alterar o objeto gerando um efeito fora do escopo da fun\u00e7\u00e3o. Essa t\u00e9cnica \u00e9 particularmente recomendada quando queremos retornar mais de uma vari\u00e1vel ao mesmo tempo de tipos diferentes. Obj test_pass_by_ref_return_by_value ( Obj & o ) { cout << \"Inicio Passagem por Referencia Retorno po Valor \\n \" ; cout << \"Final Passagem por Referencia Retorno po Valor \\n \" ; return o ; } int main () { Obj o ; ... cout << \"Pratica mais recomendada \\n \" ; Obj p = test_pass_by_ref_return_by_value ( o ); return 0 ; } Pratica mais recomendada Inicio Passagem por Referencia Retorno po Valor Final Passagem por Referencia Retorno po Valor Construtor Copia de (0) para Objeto(20) chamado","title":"Pr\u00e1tica Recomendada"},{"location":"fundamentos_web/fund/","text":"Fundamentos de Internet e Web \u00b6 Objetivos: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB. Ementa: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB. Ementa: Hipertexto; origens de XML e HTML (SGML); Estrutura do conte\u00fado versus apar\u00eancia do documento; tags HTML b\u00e1sicas (H1, P, etc) e extens\u00edveis (div, span, etc); tags de HTML5; Atributos b\u00e1sicos de CSS (color, text-align, etc), seletores CSS; formul\u00e1rios HTML; no\u00e7\u00f5es de manipula\u00e7\u00e3o program\u00e1tica do DOM. Bibliografia Base: - MILETTO, Evandro Manara; BERTAGNOLLI, Silvia de Castro. Desenvolvimento de Software II: Introdu\u00e7\u00e3o ao Desenvolvimento Web com HTML, CSS, JavaScript e PHP. 2014. Bookman. - TERUEL, Evandro Carlos. HTML 5 - Guia Pr\u00e1tico. 2014. \u00c9rica. - Flatschart, F\u00e1bio. HTML 5 Embarque Imediato. 2011. Brasport. Bibliografia Complementar: - FREEMAN, Elisabeth, FREEMAN, Eric. Use a cabe\u00e7a! HTML e CSS. 2015. Alta Books. - Duckett, Jon. HTML e CSS projete e construa Websites. 2016. Alta Books.","title":"Ementa"},{"location":"fundamentos_web/fund/#fundamentos-de-internet-e-web","text":"Objetivos: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB. Ementa: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB. Ementa: Hipertexto; origens de XML e HTML (SGML); Estrutura do conte\u00fado versus apar\u00eancia do documento; tags HTML b\u00e1sicas (H1, P, etc) e extens\u00edveis (div, span, etc); tags de HTML5; Atributos b\u00e1sicos de CSS (color, text-align, etc), seletores CSS; formul\u00e1rios HTML; no\u00e7\u00f5es de manipula\u00e7\u00e3o program\u00e1tica do DOM. Bibliografia Base: - MILETTO, Evandro Manara; BERTAGNOLLI, Silvia de Castro. Desenvolvimento de Software II: Introdu\u00e7\u00e3o ao Desenvolvimento Web com HTML, CSS, JavaScript e PHP. 2014. Bookman. - TERUEL, Evandro Carlos. HTML 5 - Guia Pr\u00e1tico. 2014. \u00c9rica. - Flatschart, F\u00e1bio. HTML 5 Embarque Imediato. 2011. Brasport. Bibliografia Complementar: - FREEMAN, Elisabeth, FREEMAN, Eric. Use a cabe\u00e7a! HTML e CSS. 2015. Alta Books. - Duckett, Jon. HTML e CSS projete e construa Websites. 2016. Alta Books.","title":"Fundamentos de Internet e Web"},{"location":"fundamentos_web/glossario-web/","text":"Gloss\u00e1rio Fundamentos Web \u00b6 Internet \u00b6 Sistema global de redes interconectadas que usam o Protocolo da Internet (TCP/IP) para se comunicar entre dispositivos. Web 1.0 - Apenas Leitura \u00b6 Sistema de informa\u00e7\u00e3o interligado por hipertextos que que permitiam a leitura por parte do usu\u00e1rio. Web 2.0 - Leitura e Escrita \u00b6 Surgem linguagens de programa\u00e7\u00e3o para Web: JavaScript, PHP que permitem a celebra\u00e7\u00e3o de neg\u00f3cios empresariais; era do com\u00e9rcio eletr\u00f4nico; Leitura e a escrita de simult\u00e2nea de dados. Web 3.0 - Web Sem\u00e2ntica \u00b6 Processamento significativa das informa\u00e7\u00f5es, tecnologias de personaliza\u00e7\u00e3o; HTML5 e CSS3. Web 4.0 - Internet das Coisas \u00b6 Uso de intelig\u00eancia artificial, aparelhos interconectados(de carros a geladeiras), simbiose da atividade humana com a da m\u00e1quina. A Web 4.0 ainda n\u00e3o se encontre bem definida. W3 Consortium \u00b6 \u00c9 a principal organiza\u00e7\u00e3o de padroniza\u00e7\u00e3o da World Wide Web. Consiste em um cons\u00f3rcio internacional com 450 membros com a finalidade de estabelecer padr\u00f5es para a cria\u00e7\u00e3o e a interpreta\u00e7\u00e3o de conte\u00fados para a Web. IP - Internet Protocol \u00b6 Protocolo da Internet : \u00e9 um protocolo de comunica\u00e7\u00e3o usado entre todas as m\u00e1quinas em rede para encaminhamento dos dados, exemplo: 200.20.15.22 . DNS - Domain Name System \u00b6 Sistema de Nomes de Dom\u00ednios : \u00e9 um sistema hier\u00e1rquico e distribu\u00eddo de gest\u00e3o de nomes para computadores, servi\u00e7os ou qualquer m\u00e1quina conectada \u00e0 Internet ou a uma rede privada. HTTP - Hypertext Tranfer Protocol \u00b6 Protocolo de Transfer\u00eancia de Hipertexto : \u00e9 um protocolo de comunica\u00e7\u00e3o utilizado para sistemas de informa\u00e7\u00e3o de hiperm\u00eddia, distribu\u00eddos e colaborativos. FTP - File Transfer Protocol \u00b6 Protocolo de Transfer\u00eancia de Arquivos: um padr\u00e3o usado para transferir arquivos entre servidor e cliente. Web Server \u00b6 \u00c9 o software respons\u00e1vel por aceitar uma requisi\u00e7\u00e3o via HTTP. Apache e Nginx s\u00e3o um dos servidores web mais populares. Web Client/Browser \u00b6 \u00c9 o software que faz a requisi\u00e7\u00e3o de conte\u00fado da Web a um servidor; que armazena exibe o conte\u00fado do servidor na tela de cliente, usando o HTTP. URI - Uniform Resource Identifier \u00b6 Identificador Uniforme de Recursos : sequ\u00eancia \u00fanica de caracteres que identificam um endere\u00e7o l\u00f3gico ou f\u00edsico usado por tecnologias Web. URL - Uniform Resource Locator \u00b6 Lozalizador Uniforme de Recursos : \u00e9 uma refer\u00eancia coloquial ao recurso da Web que especifica um endere\u00e7o. Exemplo: http://www.example.com/index.html . Requisi\u00e7\u00f5es HTTP \u00b6 Por padr\u00e3o \u00e9 dividida em tr\u00eas partes: Linha da requisi\u00e7\u00e3o : informa o m\u00e9todo da requisi\u00e7\u00e3o, o recurso e a vers\u00e3o do HTTP. Linhas de cabe\u00e7alhos : inclui informa\u00e7\u00f5es complementares sobre a requisi\u00e7\u00e3o no formato campo e valor. Corpo da entidade :dados adicionais (arquivos, formul\u00e1rios). HTML \u00b6 HyperText Markup Language \u00e9 a linguagem padr\u00e3o dos docuentos que cirvulam na web atrav\u00e9s dos protocolos HTTP. \u00c9 u documento leve que se organiza em tags. CSS \u00b6 Cascading Style Sheet \u00e9 a linguagem usada para apresenta\u00e7\u00e3o do documento HTML. Com ela \u00e9 poss\u00edvel editar o layout, as cores e fontes, etc. Refer\u00eancias \u00b6 https://www.wikipedia.org https://pt.wikipedia.org/ Desconstruindo a Web - William Molinari","title":"Gloss\u00e1rio Web"},{"location":"fundamentos_web/glossario-web/#glossario-fundamentos-web","text":"","title":"Gloss\u00e1rio Fundamentos Web"},{"location":"fundamentos_web/glossario-web/#internet","text":"Sistema global de redes interconectadas que usam o Protocolo da Internet (TCP/IP) para se comunicar entre dispositivos.","title":"Internet"},{"location":"fundamentos_web/glossario-web/#web-10-apenas-leitura","text":"Sistema de informa\u00e7\u00e3o interligado por hipertextos que que permitiam a leitura por parte do usu\u00e1rio.","title":"Web 1.0 - Apenas Leitura"},{"location":"fundamentos_web/glossario-web/#web-20-leitura-e-escrita","text":"Surgem linguagens de programa\u00e7\u00e3o para Web: JavaScript, PHP que permitem a celebra\u00e7\u00e3o de neg\u00f3cios empresariais; era do com\u00e9rcio eletr\u00f4nico; Leitura e a escrita de simult\u00e2nea de dados.","title":"Web 2.0 - Leitura e Escrita"},{"location":"fundamentos_web/glossario-web/#web-30-web-semantica","text":"Processamento significativa das informa\u00e7\u00f5es, tecnologias de personaliza\u00e7\u00e3o; HTML5 e CSS3.","title":"Web 3.0 - Web Sem\u00e2ntica"},{"location":"fundamentos_web/glossario-web/#web-40-internet-das-coisas","text":"Uso de intelig\u00eancia artificial, aparelhos interconectados(de carros a geladeiras), simbiose da atividade humana com a da m\u00e1quina. A Web 4.0 ainda n\u00e3o se encontre bem definida.","title":"Web 4.0 - Internet das Coisas"},{"location":"fundamentos_web/glossario-web/#w3-consortium","text":"\u00c9 a principal organiza\u00e7\u00e3o de padroniza\u00e7\u00e3o da World Wide Web. Consiste em um cons\u00f3rcio internacional com 450 membros com a finalidade de estabelecer padr\u00f5es para a cria\u00e7\u00e3o e a interpreta\u00e7\u00e3o de conte\u00fados para a Web.","title":"W3 Consortium"},{"location":"fundamentos_web/glossario-web/#ip-internet-protocol","text":"Protocolo da Internet : \u00e9 um protocolo de comunica\u00e7\u00e3o usado entre todas as m\u00e1quinas em rede para encaminhamento dos dados, exemplo: 200.20.15.22 .","title":"IP - Internet Protocol"},{"location":"fundamentos_web/glossario-web/#dns-domain-name-system","text":"Sistema de Nomes de Dom\u00ednios : \u00e9 um sistema hier\u00e1rquico e distribu\u00eddo de gest\u00e3o de nomes para computadores, servi\u00e7os ou qualquer m\u00e1quina conectada \u00e0 Internet ou a uma rede privada.","title":"DNS - Domain Name System"},{"location":"fundamentos_web/glossario-web/#http-hypertext-tranfer-protocol","text":"Protocolo de Transfer\u00eancia de Hipertexto : \u00e9 um protocolo de comunica\u00e7\u00e3o utilizado para sistemas de informa\u00e7\u00e3o de hiperm\u00eddia, distribu\u00eddos e colaborativos.","title":"HTTP - Hypertext Tranfer Protocol"},{"location":"fundamentos_web/glossario-web/#ftp-file-transfer-protocol","text":"Protocolo de Transfer\u00eancia de Arquivos: um padr\u00e3o usado para transferir arquivos entre servidor e cliente.","title":"FTP - File Transfer Protocol"},{"location":"fundamentos_web/glossario-web/#web-server","text":"\u00c9 o software respons\u00e1vel por aceitar uma requisi\u00e7\u00e3o via HTTP. Apache e Nginx s\u00e3o um dos servidores web mais populares.","title":"Web Server"},{"location":"fundamentos_web/glossario-web/#web-clientbrowser","text":"\u00c9 o software que faz a requisi\u00e7\u00e3o de conte\u00fado da Web a um servidor; que armazena exibe o conte\u00fado do servidor na tela de cliente, usando o HTTP.","title":"Web Client/Browser"},{"location":"fundamentos_web/glossario-web/#uri-uniform-resource-identifier","text":"Identificador Uniforme de Recursos : sequ\u00eancia \u00fanica de caracteres que identificam um endere\u00e7o l\u00f3gico ou f\u00edsico usado por tecnologias Web.","title":"URI - Uniform Resource Identifier"},{"location":"fundamentos_web/glossario-web/#url-uniform-resource-locator","text":"Lozalizador Uniforme de Recursos : \u00e9 uma refer\u00eancia coloquial ao recurso da Web que especifica um endere\u00e7o. Exemplo: http://www.example.com/index.html .","title":"URL - Uniform Resource Locator"},{"location":"fundamentos_web/glossario-web/#requisicoes-http","text":"Por padr\u00e3o \u00e9 dividida em tr\u00eas partes: Linha da requisi\u00e7\u00e3o : informa o m\u00e9todo da requisi\u00e7\u00e3o, o recurso e a vers\u00e3o do HTTP. Linhas de cabe\u00e7alhos : inclui informa\u00e7\u00f5es complementares sobre a requisi\u00e7\u00e3o no formato campo e valor. Corpo da entidade :dados adicionais (arquivos, formul\u00e1rios).","title":"Requisi\u00e7\u00f5es HTTP"},{"location":"fundamentos_web/glossario-web/#html","text":"HyperText Markup Language \u00e9 a linguagem padr\u00e3o dos docuentos que cirvulam na web atrav\u00e9s dos protocolos HTTP. \u00c9 u documento leve que se organiza em tags.","title":"HTML"},{"location":"fundamentos_web/glossario-web/#css","text":"Cascading Style Sheet \u00e9 a linguagem usada para apresenta\u00e7\u00e3o do documento HTML. Com ela \u00e9 poss\u00edvel editar o layout, as cores e fontes, etc.","title":"CSS"},{"location":"fundamentos_web/glossario-web/#referencias","text":"https://www.wikipedia.org https://pt.wikipedia.org/ Desconstruindo a Web - William Molinari","title":"Refer\u00eancias"},{"location":"fundamentos_web/guias-tutoriais-etc/","text":"Guias, Tutoriais e Refer\u00eancias para os fundamentos da Web \u00b6 Lista composta de materiais diretamente relacionados aos Fundamentos da Web. \u00b6 Ajude-nos a construir essa lista: d\u00ea suas sugest\u00f5es! \u00b6 Refer\u00eancias \u00b6 Cons\u00f3rcio World Wide Web (pt-BR) IETF - Internet Engineering Task Force (en) W3 Schools (pt-BR) HTTP - mdn web docs (pt-BR) Vocabul\u00e1rio para microdata (en) Can I Use? - site para verificar suporte dos brownsers a tecnologias web. Tutoriais \u00b6 Learn to Code HTML & CSS (en) CSS Reference (en) CSS Basics (en) Semantic HTML (en) Diversos \u00b6 Os personagens do Simpsons desenhados com CSS puro Unsplash - Imagens de uso livre Figma - Software de design Font Awesome - \u00edcones de uso gratuito Fonts Google - fontes de uso gratuito Gradientes prontos Outros gradientes Exemplos de layouts para se inspirar Web Skills - habilidades Web Origamid - Flex Box CSS Tricks HTTP Cats - um jeito fofinho de entender Status HTTP","title":"Guias, Tutoriais, etc."},{"location":"fundamentos_web/guias-tutoriais-etc/#guias-tutoriais-e-referencias-para-os-fundamentos-da-web","text":"","title":"Guias, Tutoriais e Refer\u00eancias para os fundamentos da Web"},{"location":"fundamentos_web/guias-tutoriais-etc/#lista-composta-de-materiais-diretamente-relacionados-aos-fundamentos-da-web","text":"","title":"Lista composta de materiais diretamente relacionados aos Fundamentos da Web."},{"location":"fundamentos_web/guias-tutoriais-etc/#ajude-nos-a-construir-essa-lista-de-suas-sugestoes","text":"","title":"Ajude-nos a construir essa lista: d\u00ea suas sugest\u00f5es!"},{"location":"fundamentos_web/guias-tutoriais-etc/#referencias","text":"Cons\u00f3rcio World Wide Web (pt-BR) IETF - Internet Engineering Task Force (en) W3 Schools (pt-BR) HTTP - mdn web docs (pt-BR) Vocabul\u00e1rio para microdata (en) Can I Use? - site para verificar suporte dos brownsers a tecnologias web.","title":"Refer\u00eancias"},{"location":"fundamentos_web/guias-tutoriais-etc/#tutoriais","text":"Learn to Code HTML & CSS (en) CSS Reference (en) CSS Basics (en) Semantic HTML (en)","title":"Tutoriais"},{"location":"fundamentos_web/guias-tutoriais-etc/#diversos","text":"Os personagens do Simpsons desenhados com CSS puro Unsplash - Imagens de uso livre Figma - Software de design Font Awesome - \u00edcones de uso gratuito Fonts Google - fontes de uso gratuito Gradientes prontos Outros gradientes Exemplos de layouts para se inspirar Web Skills - habilidades Web Origamid - Flex Box CSS Tricks HTTP Cats - um jeito fofinho de entender Status HTTP","title":"Diversos"},{"location":"fundamentos_web/html-basico/","text":"Organiza\u00e7\u00e3o em Tags \u00b6 <!DOCTYPE> < html > < head > </ head > < body > < h1 > Aqui temos um t\u00edtutlo H1 </ h1 > < p > E aqui temos um par\u00e1grafo. </ p > </ body > </ html > O documento HTML por padr\u00e3o sempre come\u00e7a com a tag < !DOCTYPE > . A tag < html > identifica o formato do documento e cont\u00e9m todas as outras tags do documento. A < head > \u00e9 a tag que guarda metadados. Seu conte\u00fado n\u00e3o \u00e9 exibido, a n\u00e3o ser no t\u00edtulo do documento, que ser\u00e1 exibido na aba pelo navegador. O < body > \u00e9 o local onde tudo o que for sendo inserido ser\u00e1 exibido na tela principal do navegador. Dentro do body colocamos todas as outras tags que ir\u00e3o compor o documento como: main, header, navbar, aside, forms, footer. Recursos do HTML \u00b6 Uma linguagem f\u00e1cil e simples, pode ser facilmente entendida e rapidamente praticada. F\u00e1cil de fazer documentos impactantes, devido a suass tags sem\u00e2nticas. \u00c9 uma linguagem de marca\u00e7\u00e3o, logo, ela proporciona um design flex\u00edvel. Facilita nossa vida ao nos permitir criar qualquer tipo de link dentro da p\u00e1gina. N\u00e3o depende de plataforma: roda no Windows, Mac, Linux, qualquer smartphone. \u00c9 um grande mundo multim\u00eddia: \u00e9 poss\u00edvel colocar gr\u00e1ficos, v\u00eddeos e sons! Novos Recursos do HTML 5 \u00b6 Novos elementos sem\u00e2nticos! Forms 2.0 - Novos atributos e melhorias para a tag < input > . WebSocket - Uma nova gera\u00e7\u00e3o bidirecional de comunica\u00e7\u00e3o para tecnologias web. Canvas - Permite desenho bidimensional utilizando JavaScript. Audio e V\u00eddeo - Agora isso j\u00e1 vem nativo no HTML, n\u00e3o precisa de terceiros. Server-Sent Events - Permite toda a ind\u00fastria de streaming. Geolocaliza\u00e7\u00e3o - Os visitantes podem decidir compartilhar a geolocaliza\u00e7\u00e3o com a aplica\u00e7\u00e3o web. Drag and drop - Arrastar e jogar, fun\u00e7\u00e3o que permite um jeito interativo de manipular arquivos. Microdata - Permite que o autor customize seus pr\u00f3prio elementos sem\u00e2ntico, rela\u00e7\u00e3o entre item <-> propriedades. Encodando caracteres \u00b6 Os autores do documento devem informar o metadado de charset no in\u00edcio do documento: <!DOCTYPE html> < html lang = \"pt-BR\" > <!-- define o idioma do documento --> < head > < meta charset = \"UTF-8\" > <!-- define o tipo de letra do documento --> < title > T\u00edtulo </ title > </ head > Linkando arquivo CSS \u00b6 Para fazer liga\u00e7\u00e3o com um arquivo CSS, ainda dentro da tag < head > abra uma tag < link > : < html > < title > T\u00edtulo </ title > < link rel = \"stylesheet\" href = \"style.css\" > <!--linkando CSS --> </ html > Fazendo conex\u00e3o com um arquivo javaScript \u00b6 Mediante a tag < script > . < html > < script src = \"js/meuscript.js\" > </ script > </ html > Com essas informa\u00e7\u00f5es voc\u00ea j\u00e1 tem seu documento HTML pronto para uso. Saiba mais: \u00b6 W3 Schools MDN Web Docs Principais Tags O que \u00e9 a Web Sem\u00e2ntica","title":"Fundamentos HTML"},{"location":"fundamentos_web/html-basico/#organizacao-em-tags","text":"<!DOCTYPE> < html > < head > </ head > < body > < h1 > Aqui temos um t\u00edtutlo H1 </ h1 > < p > E aqui temos um par\u00e1grafo. </ p > </ body > </ html > O documento HTML por padr\u00e3o sempre come\u00e7a com a tag < !DOCTYPE > . A tag < html > identifica o formato do documento e cont\u00e9m todas as outras tags do documento. A < head > \u00e9 a tag que guarda metadados. Seu conte\u00fado n\u00e3o \u00e9 exibido, a n\u00e3o ser no t\u00edtulo do documento, que ser\u00e1 exibido na aba pelo navegador. O < body > \u00e9 o local onde tudo o que for sendo inserido ser\u00e1 exibido na tela principal do navegador. Dentro do body colocamos todas as outras tags que ir\u00e3o compor o documento como: main, header, navbar, aside, forms, footer.","title":"Organiza\u00e7\u00e3o em Tags"},{"location":"fundamentos_web/html-basico/#recursos-do-html","text":"Uma linguagem f\u00e1cil e simples, pode ser facilmente entendida e rapidamente praticada. F\u00e1cil de fazer documentos impactantes, devido a suass tags sem\u00e2nticas. \u00c9 uma linguagem de marca\u00e7\u00e3o, logo, ela proporciona um design flex\u00edvel. Facilita nossa vida ao nos permitir criar qualquer tipo de link dentro da p\u00e1gina. N\u00e3o depende de plataforma: roda no Windows, Mac, Linux, qualquer smartphone. \u00c9 um grande mundo multim\u00eddia: \u00e9 poss\u00edvel colocar gr\u00e1ficos, v\u00eddeos e sons!","title":"Recursos do HTML"},{"location":"fundamentos_web/html-basico/#novos-recursos-do-html-5","text":"Novos elementos sem\u00e2nticos! Forms 2.0 - Novos atributos e melhorias para a tag < input > . WebSocket - Uma nova gera\u00e7\u00e3o bidirecional de comunica\u00e7\u00e3o para tecnologias web. Canvas - Permite desenho bidimensional utilizando JavaScript. Audio e V\u00eddeo - Agora isso j\u00e1 vem nativo no HTML, n\u00e3o precisa de terceiros. Server-Sent Events - Permite toda a ind\u00fastria de streaming. Geolocaliza\u00e7\u00e3o - Os visitantes podem decidir compartilhar a geolocaliza\u00e7\u00e3o com a aplica\u00e7\u00e3o web. Drag and drop - Arrastar e jogar, fun\u00e7\u00e3o que permite um jeito interativo de manipular arquivos. Microdata - Permite que o autor customize seus pr\u00f3prio elementos sem\u00e2ntico, rela\u00e7\u00e3o entre item <-> propriedades.","title":"Novos Recursos do HTML 5"},{"location":"fundamentos_web/html-basico/#encodando-caracteres","text":"Os autores do documento devem informar o metadado de charset no in\u00edcio do documento: <!DOCTYPE html> < html lang = \"pt-BR\" > <!-- define o idioma do documento --> < head > < meta charset = \"UTF-8\" > <!-- define o tipo de letra do documento --> < title > T\u00edtulo </ title > </ head >","title":"Encodando caracteres"},{"location":"fundamentos_web/html-basico/#linkando-arquivo-css","text":"Para fazer liga\u00e7\u00e3o com um arquivo CSS, ainda dentro da tag < head > abra uma tag < link > : < html > < title > T\u00edtulo </ title > < link rel = \"stylesheet\" href = \"style.css\" > <!--linkando CSS --> </ html >","title":"Linkando arquivo CSS"},{"location":"fundamentos_web/html-basico/#fazendo-conexao-com-um-arquivo-javascript","text":"Mediante a tag < script > . < html > < script src = \"js/meuscript.js\" > </ script > </ html > Com essas informa\u00e7\u00f5es voc\u00ea j\u00e1 tem seu documento HTML pronto para uso.","title":"Fazendo conex\u00e3o com um arquivo javaScript"},{"location":"fundamentos_web/html-basico/#saiba-mais","text":"W3 Schools MDN Web Docs Principais Tags O que \u00e9 a Web Sem\u00e2ntica","title":"Saiba mais:"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/","text":"Agora que voc\u00ea sabe o que \u00e9 uma rede e como ela \u00e9 composta, vamos fazer um projeto simples de rede: A conex\u00e3o entre dois computadores \u00b6 Para isso vamos usar dois aparelhos conectados a internet, como n\u00e3o sei como voc\u00ea est\u00e1 acessando esse material, vou usar um computador e um aparelho android. Esse teste pode ser feito usando tanto android - android ou PC - PC. Basta que ambos esteja conectados na internet. Vamos precisar tamb\u00e9m do numero IP dos aparelhos. Meu computador tem o IP: 192.168.1.21 , e o do meu celular android \u00e9 192.168.1.3 Agora vai no seu terminal e use o ping para se comunicar com o outro dispositivo. ping 192.168.1.3 Para finalizar o ping digite ctrl+c ou feche o terminal. E ele vai retorna: PING 192.168.1.3 (192.168.1.3) 56(84) bytes de dados. 64 bytes de 192.168.1.3: icmp_seq=1 ttl=64 tempo=112 ms 64 bytes de 192.168.1.3: icmp_seq=2 ttl=64 tempo=35.3 ms 64 bytes de 192.168.1.3: icmp_seq=3 ttl=64 tempo=53.8 ms 64 bytes de 192.168.1.3: icmp_seq=4 ttl=64 tempo=77.2 ms Agora se voc\u00ea n\u00e3o tem acesso a outro dispositivo, tenho uma solu\u00e7\u00e3o. Va l\u00e1 no seu terminal e digite: ping 127.0.0.1 Este tipo de endere\u00e7amento chamamos de loopback, em que ele enviar\u00e1 a informa\u00e7\u00e3o para ele mesmo para verificar se est\u00e1 tudo funcionando nesta transmiss\u00e3o interna. Lembrando que os endere\u00e7os que come\u00e7am com 127 s\u00e3o reservados para o loopback. Tamb\u00e9m \u00e9 possivel usar o localhost no lugar do numero IP para realizar o loopback. ping localhost Para pesquisar: \u00b6 Hub : \u00e9 um equipamento utilizado para interconectar diversos dispositivos finais. NAT \u00e9 um m\u00e9todo de tradu\u00e7\u00e3o de endere\u00e7os privados e p\u00fablicos. Servidor \u00e9 uma m\u00e1quina centralizada que oferece servi\u00e7os a um cliente (ex: computador) M\u00e1scara de rede \u00e9 usado para determinar se dois equipamentos est\u00e3o na mesma rede Protocolos \u00b6 Os protocolos em redes de telecomunica\u00e7\u00f5es seguem uma hierarquia e cada um \u00e9 respons\u00e1vel por determinada fun\u00e7\u00e3o na comunica\u00e7\u00e3o. Apesar de a tecnologia ter atingido um ponto importante nos protocolos e na sua seguran\u00e7a nem sempre foi assim e dessa forma, foi criado um modelo que tinha como intuito padronizar o desenvolvimento de hardware e software dos mais variados tipos de fabricantes para que pudessem assim se comunicar, mesmo que um tivesse alguns recursos a mais que o do outro fabricante, a comunica\u00e7\u00e3o deveria ser estabelecida. Para isso, foi definido que esses protocolos de comunica\u00e7\u00e3o seriam divididos em 7 camadas de comunica\u00e7\u00e3o, o chamado modelo OSI (Open System Interconnection) . O protocolo TCP por exemplo, encontra-se na camada 4 que \u00e9 conhecida como camada de transporte, o protocolo IP encontra-se na camada 3 que \u00e9 conhecida como camada de rede. A parte de protocolos \u00e9 um assunto muito vasto e sugiro que fa\u00e7a uma pesquisa sobre o modelo OSI e os principais protocolos que temos em cada camada. Links uteis para continuar a aprender sobre redes \u00b6 Para iniciar com os estudos em rede: Recomendo o conte\u00fado do Professor Guanabara que est\u00e1 disponivel no youtube Para se aprofundar com os estudos em rede: Recomendo o conte\u00fado do Hardware Redes Brasil qie est\u00e1 disponivel no youtube","title":"Um pouco mais sobre Rede"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#agora-que-voce-sabe-o-que-e-uma-rede-e-como-ela-e-composta-vamos-fazer-um-projeto-simples-de-rede-a-conexao-entre-dois-computadores","text":"Para isso vamos usar dois aparelhos conectados a internet, como n\u00e3o sei como voc\u00ea est\u00e1 acessando esse material, vou usar um computador e um aparelho android. Esse teste pode ser feito usando tanto android - android ou PC - PC. Basta que ambos esteja conectados na internet. Vamos precisar tamb\u00e9m do numero IP dos aparelhos. Meu computador tem o IP: 192.168.1.21 , e o do meu celular android \u00e9 192.168.1.3 Agora vai no seu terminal e use o ping para se comunicar com o outro dispositivo. ping 192.168.1.3 Para finalizar o ping digite ctrl+c ou feche o terminal. E ele vai retorna: PING 192.168.1.3 (192.168.1.3) 56(84) bytes de dados. 64 bytes de 192.168.1.3: icmp_seq=1 ttl=64 tempo=112 ms 64 bytes de 192.168.1.3: icmp_seq=2 ttl=64 tempo=35.3 ms 64 bytes de 192.168.1.3: icmp_seq=3 ttl=64 tempo=53.8 ms 64 bytes de 192.168.1.3: icmp_seq=4 ttl=64 tempo=77.2 ms Agora se voc\u00ea n\u00e3o tem acesso a outro dispositivo, tenho uma solu\u00e7\u00e3o. Va l\u00e1 no seu terminal e digite: ping 127.0.0.1 Este tipo de endere\u00e7amento chamamos de loopback, em que ele enviar\u00e1 a informa\u00e7\u00e3o para ele mesmo para verificar se est\u00e1 tudo funcionando nesta transmiss\u00e3o interna. Lembrando que os endere\u00e7os que come\u00e7am com 127 s\u00e3o reservados para o loopback. Tamb\u00e9m \u00e9 possivel usar o localhost no lugar do numero IP para realizar o loopback. ping localhost","title":"Agora que voc\u00ea sabe o que \u00e9 uma rede e como ela \u00e9 composta, vamos fazer um projeto simples de rede: A conex\u00e3o entre dois computadores"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#para-pesquisar","text":"Hub : \u00e9 um equipamento utilizado para interconectar diversos dispositivos finais. NAT \u00e9 um m\u00e9todo de tradu\u00e7\u00e3o de endere\u00e7os privados e p\u00fablicos. Servidor \u00e9 uma m\u00e1quina centralizada que oferece servi\u00e7os a um cliente (ex: computador) M\u00e1scara de rede \u00e9 usado para determinar se dois equipamentos est\u00e3o na mesma rede","title":"Para pesquisar:"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#protocolos","text":"Os protocolos em redes de telecomunica\u00e7\u00f5es seguem uma hierarquia e cada um \u00e9 respons\u00e1vel por determinada fun\u00e7\u00e3o na comunica\u00e7\u00e3o. Apesar de a tecnologia ter atingido um ponto importante nos protocolos e na sua seguran\u00e7a nem sempre foi assim e dessa forma, foi criado um modelo que tinha como intuito padronizar o desenvolvimento de hardware e software dos mais variados tipos de fabricantes para que pudessem assim se comunicar, mesmo que um tivesse alguns recursos a mais que o do outro fabricante, a comunica\u00e7\u00e3o deveria ser estabelecida. Para isso, foi definido que esses protocolos de comunica\u00e7\u00e3o seriam divididos em 7 camadas de comunica\u00e7\u00e3o, o chamado modelo OSI (Open System Interconnection) . O protocolo TCP por exemplo, encontra-se na camada 4 que \u00e9 conhecida como camada de transporte, o protocolo IP encontra-se na camada 3 que \u00e9 conhecida como camada de rede. A parte de protocolos \u00e9 um assunto muito vasto e sugiro que fa\u00e7a uma pesquisa sobre o modelo OSI e os principais protocolos que temos em cada camada.","title":"Protocolos"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#links-uteis-para-continuar-a-aprender-sobre-redes","text":"Para iniciar com os estudos em rede: Recomendo o conte\u00fado do Professor Guanabara que est\u00e1 disponivel no youtube Para se aprofundar com os estudos em rede: Recomendo o conte\u00fado do Hardware Redes Brasil qie est\u00e1 disponivel no youtube","title":"Links uteis para continuar a aprender sobre redes"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/","text":"Para iniciar vamos nos perguntar, o que \u00e9 a rede? \u00b6 Em termos mais simples, uma rede consiste em dois ou mais computadores que est\u00e3o conectados para compartilhar informa\u00e7\u00f5es. Todas as redes, n\u00e3o importa qu\u00e3o complexas sejam, baseiam se neste principio simples. Embora isto possa parecer como uma id\u00e9ia basica, o conceito foi uma grande conquista na \u00e1rea das comunica\u00e7\u00f5es, ou seja, desde um ambiente dom\u00e9stico, em que temos dois computadores e uma impressora, at\u00e9 grandes corpora\u00e7\u00f5es com centenas de usu\u00e1rios, m\u00e1quinas potentes com servidores, at\u00e9 a mais famosa, a internet. Endere\u00e7o de IP, como chegar l\u00e1? \u00b6 Vamos lembrar como era alguns anos atr\u00e1s quando ainda envi\u00e1vamos cartas: era necessario uma carta com o destinario e o endere\u00e7o para que o carteiro saber aonde devia entregar a carta. No mundo da internet, o processo de identifica\u00e7\u00e3o ser\u00e1 parecido. O processo de identifica\u00e7\u00e3o das m\u00e1quinas \u00e9 chamado de endere\u00e7amento IP. Vamos abrir o terminal de comando e verificar nosso endere\u00e7o IP. No Mac e Linux: ifconfig Verificar inet No Windows: ipconfig Verificar o Endere\u00e7o IPv4 Em todo o caso o numero do seu IP parecido com esse 192.168.1.21 . Certo agora sei o que \u00e9 endere\u00e7o de IP, mas para que serve? \u00b6 Ele serve para dizer seu endere\u00e7o, ou seja, a casa que voc\u00ea mora por exemplo. E vamos tentar encontrar o endere\u00e7o do Google. Mas para isso vamos usar uma ferramenta chamada ping . L\u00e1 no seu terminal digite: ping www.google.com.br E voc\u00ea vai recever um retorno parecido com esse: PING www.google.com.br ( 142 .251.129.35 ) 56 ( 84 ) bytes de dados. 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 1 ttl = 120 tempo = 3 .22 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 2 ttl = 120 tempo = 4 .18 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 3 ttl = 120 tempo = 4 .12 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 4 ttl = 120 tempo = 4 .54 ms E apareceu um numero estranho na primeira linha ap\u00f3s o Google, o que ser\u00e1 esse numero? Bem se voc\u00ea reparou no seu ip, ele \u00e9 bem parecido n\u00e9? Ent\u00e3o esse \u00e9 o numero IP do Google 142.251.129.35 se voc\u00ea copiar e colar no seu navegador ele vai te direcionar para pagina de pesquisa do Google. Por tr\u00e1s dos panos \u00e9 assim que a rede se conecta, claro que ainda tem um pouco mais de informa\u00e7\u00e3o envolvido mais vamos chegar l\u00e1, vou d\u00e1 algumas dicas para pesquisar: DNS, ICMP, RTT e TTL. DNS - Domain Name System ICMP - Internet Control Message Protocol RTT - Round trip time TTL - Time to Live Curiosidade: O ping usa o protocolo ICMP, para enviar uma requisi\u00e7\u00e3o (Echo Request) para m\u00e1quina remota e aguarda o retorno dessa m\u00e1quina remota (Echo Reply). Certo me conectei no site do Google que \u00e9 uma empresa dos EUA, como isso \u00e9 possivel? \u00b6 Bom, \u00e9 verdade como um computador aqui no Brasil se conectar em um computador l\u00e1 nos EUA? A conex\u00e3o segue por uma rota, entre voc\u00ea e o destino, ou seja, ele vai passar por diversos dispositivos que est\u00e3o mediano essa conex\u00e3o. Vamos abrir o terminal novamente e digite: No Windows: tracert www.google.com.br No Mac ou Linux: traceroute www.google.com.br E ele vai te responder dessa forma: 1 _gateway (192.168.1.21) 0.805 ms 0.757 ms 1.620 ms 2 10.255.1.2 (10.255.1.2) 2.803 ms 2.880 ms 2.940 ms 3 10.55.55.1 (10.55.55.1) 3.245 ms 3.715 ms 3.542 ms 4 * * * 5 218.30.38.13 (218.30.38.13) 4.907 ms 5.420 ms 5.667 ms 6 84.16.7.214 (84.16.7.214) 7.380 ms 7.712 ms 7.973 ms Veja que o IP est\u00e1 mudando para cada linha que ele retorna, ou seja, ele est\u00e1 indo em dire\u00e7\u00e3o ao endere\u00e7o da Google para se comunicar com ele. Ele pode ter mais ou menos linhas, mas a logica \u00e9 simples a requis\u00e3o vai para o seu provedor de internet e l\u00e1 recebe a resposta do endere\u00e7o que voc\u00ea est\u00e1 procurando. Temos outro detalhe para aborda sobre essa rota: 4 * * * Na rota numero 4* ela retornou diferente das outras com os asterisco, o que significa? Basicamente a pessoa/empresa que administra esse IP pode ter desabilitado a resposta do ICMP da m\u00e1quina, para evitar a sobrecarga de tr\u00e1fego e por quest\u00f5es de seguran\u00e7a.","title":"Redes para Sobreviv\u00eancia"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#para-iniciar-vamos-nos-perguntar-o-que-e-a-rede","text":"Em termos mais simples, uma rede consiste em dois ou mais computadores que est\u00e3o conectados para compartilhar informa\u00e7\u00f5es. Todas as redes, n\u00e3o importa qu\u00e3o complexas sejam, baseiam se neste principio simples. Embora isto possa parecer como uma id\u00e9ia basica, o conceito foi uma grande conquista na \u00e1rea das comunica\u00e7\u00f5es, ou seja, desde um ambiente dom\u00e9stico, em que temos dois computadores e uma impressora, at\u00e9 grandes corpora\u00e7\u00f5es com centenas de usu\u00e1rios, m\u00e1quinas potentes com servidores, at\u00e9 a mais famosa, a internet.","title":"Para iniciar vamos nos perguntar, o que \u00e9 a rede?"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#endereco-de-ip-como-chegar-la","text":"Vamos lembrar como era alguns anos atr\u00e1s quando ainda envi\u00e1vamos cartas: era necessario uma carta com o destinario e o endere\u00e7o para que o carteiro saber aonde devia entregar a carta. No mundo da internet, o processo de identifica\u00e7\u00e3o ser\u00e1 parecido. O processo de identifica\u00e7\u00e3o das m\u00e1quinas \u00e9 chamado de endere\u00e7amento IP. Vamos abrir o terminal de comando e verificar nosso endere\u00e7o IP. No Mac e Linux: ifconfig Verificar inet No Windows: ipconfig Verificar o Endere\u00e7o IPv4 Em todo o caso o numero do seu IP parecido com esse 192.168.1.21 .","title":"Endere\u00e7o de IP, como chegar l\u00e1?"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#certo-agora-sei-o-que-e-endereco-de-ip-mas-para-que-serve","text":"Ele serve para dizer seu endere\u00e7o, ou seja, a casa que voc\u00ea mora por exemplo. E vamos tentar encontrar o endere\u00e7o do Google. Mas para isso vamos usar uma ferramenta chamada ping . L\u00e1 no seu terminal digite: ping www.google.com.br E voc\u00ea vai recever um retorno parecido com esse: PING www.google.com.br ( 142 .251.129.35 ) 56 ( 84 ) bytes de dados. 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 1 ttl = 120 tempo = 3 .22 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 2 ttl = 120 tempo = 4 .18 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 3 ttl = 120 tempo = 4 .12 ms 64 bytes de gru06s72-in-f3.1e100.net ( 142 .251.129.35 ) : icmp_seq = 4 ttl = 120 tempo = 4 .54 ms E apareceu um numero estranho na primeira linha ap\u00f3s o Google, o que ser\u00e1 esse numero? Bem se voc\u00ea reparou no seu ip, ele \u00e9 bem parecido n\u00e9? Ent\u00e3o esse \u00e9 o numero IP do Google 142.251.129.35 se voc\u00ea copiar e colar no seu navegador ele vai te direcionar para pagina de pesquisa do Google. Por tr\u00e1s dos panos \u00e9 assim que a rede se conecta, claro que ainda tem um pouco mais de informa\u00e7\u00e3o envolvido mais vamos chegar l\u00e1, vou d\u00e1 algumas dicas para pesquisar: DNS, ICMP, RTT e TTL. DNS - Domain Name System ICMP - Internet Control Message Protocol RTT - Round trip time TTL - Time to Live Curiosidade: O ping usa o protocolo ICMP, para enviar uma requisi\u00e7\u00e3o (Echo Request) para m\u00e1quina remota e aguarda o retorno dessa m\u00e1quina remota (Echo Reply).","title":"Certo agora sei o que \u00e9 endere\u00e7o de IP, mas para que serve?"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#certo-me-conectei-no-site-do-google-que-e-uma-empresa-dos-eua-como-isso-e-possivel","text":"Bom, \u00e9 verdade como um computador aqui no Brasil se conectar em um computador l\u00e1 nos EUA? A conex\u00e3o segue por uma rota, entre voc\u00ea e o destino, ou seja, ele vai passar por diversos dispositivos que est\u00e3o mediano essa conex\u00e3o. Vamos abrir o terminal novamente e digite: No Windows: tracert www.google.com.br No Mac ou Linux: traceroute www.google.com.br E ele vai te responder dessa forma: 1 _gateway (192.168.1.21) 0.805 ms 0.757 ms 1.620 ms 2 10.255.1.2 (10.255.1.2) 2.803 ms 2.880 ms 2.940 ms 3 10.55.55.1 (10.55.55.1) 3.245 ms 3.715 ms 3.542 ms 4 * * * 5 218.30.38.13 (218.30.38.13) 4.907 ms 5.420 ms 5.667 ms 6 84.16.7.214 (84.16.7.214) 7.380 ms 7.712 ms 7.973 ms Veja que o IP est\u00e1 mudando para cada linha que ele retorna, ou seja, ele est\u00e1 indo em dire\u00e7\u00e3o ao endere\u00e7o da Google para se comunicar com ele. Ele pode ter mais ou menos linhas, mas a logica \u00e9 simples a requis\u00e3o vai para o seu provedor de internet e l\u00e1 recebe a resposta do endere\u00e7o que voc\u00ea est\u00e1 procurando. Temos outro detalhe para aborda sobre essa rota: 4 * * * Na rota numero 4* ela retornou diferente das outras com os asterisco, o que significa? Basicamente a pessoa/empresa que administra esse IP pode ter desabilitado a resposta do ICMP da m\u00e1quina, para evitar a sobrecarga de tr\u00e1fego e por quest\u00f5es de seguran\u00e7a.","title":"Certo me conectei no site do Google que \u00e9 uma empresa dos EUA, como isso \u00e9 possivel?"}]}