{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Eixo Computa\u00e7\u00e3o - UNIVESP - Grupo de estudos","text":""},{"location":"#disciplinas","title":"Disciplinas:","text":""},{"location":"#algoritmo-e-programacao-de-computadores-i-e-ii-com110-e-com120","title":"Algoritmo e Programa\u00e7\u00e3o de Computadores I e II (COM110 e COM120)","text":"<p>Objetivo: Compreender conceitos b\u00e1sicos de programa\u00e7\u00e3o e descrever algoritmos para resolver problemas utilizando a linguagem de programa\u00e7\u00e3o Python, incluindo depura\u00e7\u00e3o e testes automatizados b\u00e1sicos. Refor\u00e7ar a pr\u00e1tica de programa\u00e7\u00e3o em Python, composi\u00e7\u00e3o de programas com m\u00faltiplos arquivos de c\u00f3digo fonte, uso de bibliotecas, APIs (WEB) e GUIs. No\u00e7\u00f5es de programa\u00e7\u00e3o orientada a objetos.</p>"},{"location":"#banco-de-dados-com300","title":"Banco de Dados (COM300)","text":"<p>Objetivo: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM).</p>"},{"location":"#estruturas-de-dados-eid001","title":"Estruturas de Dados (EID001)","text":"<p>Objetivo: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank.</p>"},{"location":"#fundamentos-da-internet-e-web-com130","title":"Fundamentos da Internet e Web (COM130)","text":"<p>Objetivo: HTML5,CSS3: Estrutura do conte\u00fado versus apar\u00eancia do documento, tags HTML b\u00e1sicas (H1, P, etc) e e extens\u00edveis (div, span, etc), atributos b\u00e1sicos de CSS (color, text-align, etc); seletores CSS;</p>"},{"location":"#programacao-orientada-a-objetos-eep101","title":"Programa\u00e7\u00e3o Orientada a Objetos (EEP101)","text":"<p>Objetivo: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es de padr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map,Filter, Fold, etc).</p>"},{"location":"#redes","title":"Redes","text":""},{"location":"sobre/","title":"Sobre","text":"<p>Este site \u00e9 constru\u00eddo utilizando MKDocs Material. </p>"},{"location":"sobre/#eixo-basico-computacao-univesp","title":"\ud83c\udf93 Eixo B\u00e1sico - Computa\u00e7\u00e3o Univesp","text":"<p>O Projeto se baseia nas disciplinas que est\u00e3o sendo abordadas nos Cursos de Tecnologia da Informa\u00e7\u00e3o,  Ci\u00eancia de Dados e Engenharia da Computa\u00e7\u00e3o.</p>"},{"location":"OOP/array/","title":"Array e ArrayLists","text":""},{"location":"OOP/array/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Objetos array s\u00e3o estrutura de dados do mesmo tipo relacionados, que facilitam a organiza\u00e7\u00e3o de grupos de valores relacionados. O n\u00famero de posi\u00e7\u00e3o do elemento \u00e9 chamado de \u00edndice.</p>"},{"location":"OOP/array/#declarando-e-criando-arrays","title":"Declarando e criando Arrays","text":"<p>Como outros objetos, arrays s\u00e3o criados com a palavra chave <code>new</code> e \u00e9 necess\u00e1rio especificar o tipo de elementos que o array ir\u00e1 aramazenar e o n\u00famero de elementos. Por exemplo:</p> <pre><code>int[] c = new int[12]\n</code></pre> <p>O c\u00f3digo acima cria um arrray de inteiros de tamanho 12 com o nome c.</p>"},{"location":"OOP/array/#utilizando-um-inicializador-de-array","title":"Utilizando um inicializador de array","text":"<p>Voc\u00ea pode criar um array e inicializar seus elementos com um inicializador de array \u2014 uma lista separada por v\u00edrgulas entre chaves:</p> <pre><code>int[] n = { 10, 20, 30, 40, 50 };\n</code></pre> <p>Se percorrermos o array com um la\u00e7o, imprimindo o index e seu valor correspondente a cada intera\u00e7\u00e3o, com o seguinte c\u00f3digo:</p> <pre><code>System.out.printf(\"%s%8s%n\", \"Index\", \"Valor\"); // t\u00edtulos de coluna\n// gera sa\u00edda do valor de cada elemento do array\nfor (int i = 0; i &lt; n.length; i++)\nSystem.out.printf(\"%5d%8d%n\", i, n[i]);\n</code></pre> <p>Teremos o seguinte output: <pre><code>Index   Valor\n    0      10\n    1      20\n    2      30\n    3      40\n    4      50\n</code></pre></p>"},{"location":"OOP/array/#estudo-de-caso-simulacao-de-embaralhamento-e-distribuicao-de-cartas","title":"Estudo de caso: simula\u00e7\u00e3o de embaralhamento e distribui\u00e7\u00e3o de cartas","text":"<p>Objetivo: Usar n\u00fameros aleat\u00f3rios e criar um array para armazenar objetos que representam cartas de baralho.</p> <p>A classe \"Card\" tem um m\u00e9todo construtor para atribuir um valor de face (\u00e1s, dois,tr\u00eas... valetes, damas, reis) e um de naipe (cora\u00e7\u00e3o, paus, espadas e ouros). A Classe DeckOfCards cria um baralho de 52 cartas, e possui atributo para identificar qual \u00e9 a carta atual e m\u00e9todos para embaralhar as cartas.</p>"},{"location":"OOP/array/#codigo","title":"C\u00f3digo","text":"Card.javaDeckOfCards.javaDeckOfCardsTest.java <pre><code>public class Card\n{\nprivate final String face; // face da carta (\"Ace\", \"Deuce\", ...)\nprivate final String suit; // naipe da carta (\"Hearts\", \"Diamonds\", ...)\n// construtor de dois argumentos inicializa face e naipe da carta\npublic Card(String cardFace, String cardSuit)\n{\nthis.face = cardFace; // inicializa face da carta\nthis.suit = cardSuit; // inicializa naipe da carta\n}\n// retorna representa\u00e7\u00e3o String de Card\npublic String toString()\n{\nreturn face + \" of \" + suit;\n}\n} // fim da classe Card\n</code></pre> <pre><code>import java.security.SecureRandom;\npublic class DeckOfCards\n{\nprivate Card[] deck; // array de objetos Card\nprivate int currentCard; // \u00edndice da pr\u00f3xima Card a ser distribu\u00edda (0-51)\nprivate static final int NUMBER_OF_CARDS = 52; // n\u00famero constante de Cards\n// gerador de n\u00famero aleat\u00f3rio\nprivate static final SecureRandom randomNumbers = new SecureRandom();\n// construtor preenche baralho de cartas\npublic DeckOfCards()\n{\nString[] faces = {\"Ace\", \"Deuce\", \"Three\", \"Four\", \"Five\", \"Six\",\n\"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Jack\", \"Queen\", \"King\"};\nString[] suits = {\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\"};\ndeck = new Card[NUMBER_OF_CARDS]; // cria array de objetos Card\ncurrentCard = 0; // a primeira Card distribu\u00edda ser\u00e1 o deck[0]\n// preenche baralho com objetos Card\nfor (int count = 0; count &lt; deck.length; count++)\ndeck[count] = new Card(faces[count % 13], suits[count / 13]);\n}\n// embaralha as cartas com um algoritmo de uma passagem\npublic void shuffle()\n{\n// a pr\u00f3xima chamada para o m\u00e9todo dealCard deve come\u00e7ar no deck[0] novamente\ncurrentCard = 0;\n// para cada Card, seleciona outra Card aleat\u00f3ria (0-51) e as compara\nfor (int first = 0; first &lt; deck.length; first++) {\n// seleciona um n\u00famero aleat\u00f3rio entre 0 e 51\nint second = randomNumbers.nextInt(NUMBER_OF_CARDS);\n// compara Card atual com Card aleatoriamente selecionada\nCard temp = deck[first];\ndeck[first] = deck[second];\ndeck[second] = temp;\n}\n}\n// distribui uma Card\npublic Card dealCard()\n{\n// determina se ainda h\u00e1 Cards a serem distribu\u00eddas\nif (currentCard &lt; deck.length)\nreturn deck[currentCard++]; // retorna Card atual no array\nelse\nreturn null; // retorna nulo para indicar que todos as Cards foram distribu\u00eddas\n}\n}\n</code></pre> <pre><code>public class DeckOfCardsTest\n{\n// executa o aplicativo\npublic static void main(String[] args)\n{\nDeckOfCards myDeckOfCards = new DeckOfCards();\nmyDeckOfCards.shuffle(); // coloca Cards em ordem aleat\u00f3ria\n// imprime todas as 52 cartas na ordem em que elas s\u00e3o distribu\u00eddas\nfor (int i = 1; i &lt;= 52; i++) {\n// distribui e exibe uma Card\nSystem.out.printf(\"%-19s\", myDeckOfCards.dealCard());\nif (i % 4 == 0) // gera uma nova linha ap\u00f3s cada quarta carta\nSystem.out.println();\n}\n}\n} // fim da classe DeckOfCardsTest\n</code></pre> <p>Como as cartas s\u00e3o embaralhadas, um output poss\u00edvel ser\u00e1: </p> <pre><code>Seven of Diamonds  Queen of Spades    Six of Hearts      Three of Spades    \nThree of Clubs     Eight of Spades    Eight of Hearts    Nine of Diamonds   \nSeven of Clubs     Three of Diamonds  Five of Hearts     Six of Clubs       \nKing of Clubs      Ace of Hearts      Eight of Clubs     Nine of Hearts     \nAce of Spades      King of Diamonds   Four of Hearts     Eight of Diamonds  \nJack of Hearts     Jack of Diamonds   Ace of Diamonds    Queen of Diamonds  \nKing of Hearts     Ten of Spades      Deuce of Diamonds  Nine of Spades     \nFive of Diamonds   Ten of Diamonds    Ten of Hearts      Six of Diamonds    \nJack of Spades     Three of Hearts    Four of Clubs      Four of Spades     \nFour of Diamonds   Ace of Clubs       Queen of Hearts    Nine of Clubs      \nJack of Clubs      Ten of Clubs       Five of Spades     Seven of Spades    \nSeven of Hearts    Deuce of Hearts    Six of Spades      Deuce of Spades    \nKing of Spades     Deuce of Clubs     Queen of Clubs     Five of Clubs     \n</code></pre> <p>A cada nova execu\u00e7\u00e3o do programa teremos um output com ordem diferente, mas sempre com as mesmas 52 cartas.</p>"},{"location":"OOP/array/#referencias","title":"Refer\u00eancias","text":"<p>Deitel, Paul. Java: como programar / Paul Deitel, Harvey Deitel; tradu\u00e7\u00e3o Edson Furmankiewicz; revis\u00e3o t\u00e9cnica Fabio Lucchini. -- S\u00e3o Paulo: Pearson Education do Brasil, 2017</p>"},{"location":"OOP/classes/","title":"Classes","text":""},{"location":"OOP/classes/#o-que-sao-classes","title":"O que s\u00e3o classes?","text":"<p>Classes s\u00e3o a unidade b\u00e1sica da programa\u00e7\u00e3o orienta \u00e0 objetos. Se olharmos ao nosso redor encontraremos milhares de objetos e cada um pertence a uma classe. Podemos olhar a um livro e dizer que ele \u00e9 da classe de livros em geral e, mais especificamente, dizer se ele \u00e9 da classe de livro liter\u00e1rio, did\u00e1tico, infantil, etc.</p> <p>Podemos a olhar a n\u00f3s mesmos e afirmar que fazemos parte da classe humana, mas cada um de n\u00f3s tem propriedades e comportamentos \u00fanicos, como gostos, altura, nome, etc.  Seria como se diss\u00e9ssemos que cada ser humano \u00e9 de uma inst\u00e2ncia da classe humana.</p> <p>Ent\u00e3o podemos dizer em primeiro que cada objeto \u00e9 uma entidade separada, e em segundo, que cada ojeto compartilha propriedades e comportamentos comuns com a classe origin\u00e1ria.</p>"},{"location":"OOP/classes/#declarando-classes-em-java","title":"Declarando Classes em Java","text":"<p>A sintaxe gen\u00e9rica para declarar uma classe em java \u00e9: </p> <pre><code>[modificador] class &lt;nome-da-classe&gt; {\n// Corpo da classe vai aqui\n}\n</code></pre> <ul> <li>Modificadores s\u00e3o opcionais; eles s\u00e3o palavras-chave para definir o acesso \u00e0 classe. Uma classe pode ter zero ou mais modificadores.</li> <li>O nome-da-classe deve come\u00e7ar com mai\u00fasculo e se for nome composto, o primeiro caractere de cada palavra deve ser sempre mai\u00fasculo.</li> <li>O corpo da classe cont\u00e9m diferentes componentes como campos e m\u00e9todos.</li> </ul>"},{"location":"OOP/classes/#declarando-campos-em-uma-classe","title":"Declarando campos em uma classe","text":"<p>Campos representam propriedades/atributos de um objeto. O tipo de dados precede o nome do campo. Opcionalmente um campo pode ser inicializado com um valor ou apenas ser declarado. \u00c9 um boa pr\u00e1tica declarar campos com a primeira letra min\u00fascula e, quando for composto, a pr\u00f3xima palavra come\u00e7ar com mai\u00fascula, por exemlo: <code>nome</code>, <code>genero</code>, <code>primeiroNome</code>, <code>corPreferida</code>.</p> <p><pre><code>// Pessoa.java\nclass Pessoa {\nString nome;\nString genero;\nint idade;\n}\n</code></pre> Todo objeto da classe Pessoa ter\u00e1 os atributos nome, genero e idade.</p>"},{"location":"OOP/classes/#criando-uma-instancia-de-uma-classe","title":"Criando uma inst\u00e2ncia de uma classe","text":"<p>Usamos o operador <code>new</code> para chamar o construtor da classe cuja inst\u00e2ncia est\u00e1 sendo criada e alocada no heap. O seguinte c\u00f3digo cria uma inst\u00e2ncia da classe Pessoa:</p> <pre><code>new Pessoa();\n</code></pre> <p>Como nesse caso n\u00e3o criamos nenhum construtor para a classe Pessoa, o compilador do Java ir\u00e1 adicionar um construtor default.</p> <p>Mas na declara\u00e7\u00e3o acima, apesar de termos criado uma inst\u00e2ncia de Pessoa, n\u00e3o temos controle sobre ela pois n\u00e3o demos um nome a ela, ou mais propriamente, n\u00e3o atribu\u00edmos a essa inst\u00e2ncia nenhuma vari\u00e1vel.  A maneira mais correta para criarmos uma inst\u00e2ncia seria: </p> <pre><code>Pessoa jack = new Pessoa();\n</code></pre>"},{"location":"OOP/classes/#usando-a-notacao-ponto-para-acessar-campos-de-uma-classe","title":"Usando a nota\u00e7\u00e3o ponto para acessar campos de uma classe","text":"<p>Usamos o seguinte padr\u00e3o para referir a vari\u00e1veis contidas em classes: </p> <pre><code>&lt;nome-referencia-instancia&gt;.&lt;nome-da-variavel&gt;\n</code></pre> <p>Que no caso do nosso exemplo seria <code>jack.nome</code>. Para atribuirmos um valor ao nome far\u00edamos o seguinte: </p> <pre><code>jack.nome = \"Jack Sparrow\";\n</code></pre>"},{"location":"OOP/classes/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://www.devmedia.com.br/boas-praticas-de-programacao/21137</li> <li>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</li> </ul>"},{"location":"OOP/construtores/","title":"Construtores","text":"<p>Um construtor (constuctor em ingl\u00eas) \u00e9 um bloco de c\u00f3digo usado para inicializar um objeto de uma classe. A sua sintaxe \u00e9 muito semelhante \u00e0 de um m\u00e9todo, por\u00e9m, os dois tem prop\u00f3sitos bem diferentes.</p> <p>O construtor \u00e9 utilizado com o operador <code>new</code> para inicializar/criar uma inst\u00e2ncia/objeto de uma classe</p>"},{"location":"OOP/construtores/#declarando-um-construtor","title":"Declarando um Construtor","text":"<pre><code>[modificador] &lt;nome-construtor&gt; (&lt;lista-parametro) { \n        // corpo do construtor entre chaves\n}\n</code></pre> <ul> <li>come\u00e7a com um modificador de acesso (public, private, protected, ou default);</li> <li>o nome do construtor  deve ter o mesmo nome da classe;</li> <li>os par\u00e2metros s\u00e3o opcionais;</li> <li>constructores n\u00e3o aceitam nenhum tipo de retorno, o que retorna apenas \u00e9 a inst\u00e2ncia da classe.</li> </ul>"},{"location":"OOP/construtores/#sobrecarregando-um-construtor-overload","title":"Sobrecarregando um construtor (Overload)","text":"<p>Se uma classe posui m\u00faltiplos construtores ela \u00e9 chamada de sobrecarregada (overloaded). Todos construtores ir\u00e3o possuir o mesmo nome que a classe o que muda \u00e9 somente a exist\u00eancia de par\u00e2metros, bem como sua quantidade, ordem, tipo de par\u00e2metro.</p> <pre><code>// Example.java\npackage exemplos;\npublic class Gato {\n// Construtor #1\npublic Gato() {\nSystem.out.println(\"Um gato foi criado.\");\n}\n// Construtor #2\npublic Gato(String cor) {\nSystem.out.println(\"Um gato  \" + cor + \" foi criado.\");\n}\n}\n</code></pre> <p>Ao chamar a <code>main()</code> com o seguinte c\u00f3digo:</p> <pre><code>public static void main(String[] args) {\nGato gato_1 = new Gato();\nGato gato_2 = new Gato(\"amarelo\");\n</code></pre> <p>Teremos a seguinte sa\u00edda:</p> <pre><code>Um gato foi criado.\nUm gato amarelo foi criado.\n</code></pre>"},{"location":"OOP/construtores/#estrutura-de-construtores","title":"Estrutura de construtores","text":"<pre><code>//Declara\u00e7\u00e3o da classe\npublic class Pessoa {\n//Atributos\n// Construtor(&lt;lista-parametros&gt;) #1\n// Invoca\u00e7\u00e3o de m\u00e9todos comuns m\u00e9todos acessores/modificadores\n// Construtor(&lt;outra-lista-parametros&gt;) #2\n// Invoca\u00e7\u00e3o de m\u00e9todos ...\n// Construtor(&lt;n-parametros&gt;) #n ...\n// \n// M\u00e9todo #1\n// M\u00e9todo #2\n// M\u00e9todo #n ...\n</code></pre>"},{"location":"OOP/construtores/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://www.javatpoint.com/java-constructor</li> <li>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</li> </ul>"},{"location":"OOP/exception/","title":"Tratamento de Exce\u00e7\u00f5es","text":"<p>Uma exce\u00e7\u00e3o \u00e9 considerada um comportamento inesperado do sistema ou do usu\u00e1rio, por exemplo: divis\u00e3o por zero, tentar acessar um elemento fora do tamanho da lista, ou digitar inteiros num campo de letras e vice-versa, entre outros. </p> <p>Tratar uma exce\u00e7\u00e3o \u00e9 um jeito de n\u00e3o interromper o fluxo do programa, significa tolerar algumas falhas.</p> <p>Quando uma exce\u00e7\u00e3o ocorre, o Java cria um Objeto da classe Exception com as informa\u00e7\u00f5es necess\u00e1rias (tipo de exce\u00e7\u00e3o, n\u00famero da linha em que a exce\u00e7\u00e3o foi gerada, etc) </p>"},{"location":"OOP/exception/#usando-o-bloco-try-catch","title":"Usando o bloco try-catch","text":"<p>O bloco try-catch \u00e9 utilizado para manusear exce\u00e7\u00f5es. Primeiro escrevemos dentro do bloco <code>try</code>, todo o c\u00f3digo que queremos testar, por exemplo, uma conex\u00e3o a um banco de dados. Em seguida utilizamos o bloco <code>catch</code> para capturar as poss\u00edveis exce\u00e7\u00f5es que foram encontradas, por exemplo, servidor n\u00e3o encontrado.</p> <p>A sintaxe b\u00e1sica seria:</p> <pre><code>try {\n// C\u00f3digo para tentativa vai aqui\n}\ncatch (ExceptionClassName nomeParametro ) {\n// O c\u00f3digo para tratar exce\u00e7\u00f5es vai aqui\n}\n</code></pre> <p>Note que o bloco <code>catch</code> \u00e9 parecido com um m\u00e9todo e que no par\u00eanteses vai o nome da classe de exce\u00e7\u00e3o e um nome que \u00e9 dado pelo usu\u00e1rio.</p> <p>Um exemplo de tratativa para divis\u00e3o por zero seria:</p> <pre><code>public class DivideByZeroWithTryCatch {\npublic static void main(String[] args) {\nint x = 10, y = 0, z;\ntry {\nz = x / y;\nSystem.out.println(\"z = \" + z);\n} catch (ArithmeticException e) {\n// Pega a descri\u00e7\u00e3o da exce\u00e7\u00e3o\nString msg = e.getMessage();\n// Imprime uma mensagem customizada\nSystem.out.println(\"Um erro ocorreu, o erro \u00e9: \" + msg);\n}\nSystem.out.println(\"Fim do programa.\");\n}\n}\n</code></pre> <p>O output ser\u00e1: </p> <pre><code>Um erro ocorreu, o erro \u00e9: / by zero\nFim do programa.\n</code></pre> <p>Observe que o programa imprimiu a instru\u00e7\u00e3o \"Fim do programa\", poiso erro foi tratado e n\u00e3o encerrou o programa antes.</p> <p>As exce\u00e7\u00f5es embutidas no Java podem ser de dois tipos: verificadas (checked) e n\u00e3o-verificadas (unchecked).  </p>"},{"location":"OOP/exception/#excecoes-verificadas","title":"Exce\u00e7\u00f5es verificadas","text":"<p>Todas herdam da classe Exception e representam condi\u00e7\u00f5es inv\u00e1lidas fora do controle do programador, como entradas inv\u00e1lidas, n\u00e3o acessa algum arquivo, falha de rede. Nesse caso \u00e9 necess\u00e1rio algum m\u00e9todo para manipular a exce\u00e7\u00e3o.</p>"},{"location":"OOP/exception/#excecoes-nao-verificadas","title":"Exce\u00e7\u00f5es n\u00e3o verificadas","text":"<p>Elas representam defeitos no programa e s\u00e3o subclasses de RuntimeException, e nesse caso, n\u00e3o \u00e9 obrigat\u00f3rio tratar dessas exce\u00e7\u00f5es.</p> <p>Al\u00e9m destas duas podemos ter exce\u00e7\u00f5es criadas pelo pr\u00f3prio programador. O quadro abaixo traz um pequeno esquema dos tipos de exce\u00e7\u00f5es.</p> <p></p>"},{"location":"OOP/exception/#o-bloco-finally","title":"O bloco finally","text":"<p>O <code>finally</code> \u00e9 utilizado no final de um bloco try-catch e sempre ser\u00e1 executado. Seu objetivo \u00e9 evitar vazamento de recursos, como arquivos abertos no computador, conex\u00e3o com banco de dados, etc, que podem consumir mem\u00f3ria. \u00c9 uma forma de dar continuidade ao programa, no caso de acontecer erro naquilo que voc\u00ea est\u00e1 tentando, ele ir\u00e1 tratar o erro e dar continuidade.</p>"},{"location":"OOP/exception/#lancando-excecoes-com-a-instrucao-throw","title":"Lan\u00e7ando exce\u00e7\u00f5es com a instru\u00e7\u00e3o throw","text":"<p>A express\u00e3o <code>throw</code> permite lan\u00e7ar uma exce\u00e7\u00e3o sem estar dentro de um bloco try-catch, por exemplo: num campo para inser\u00e7\u00e3o de e-mail podemos lan\u00e7ar uma exce\u00e7\u00e3o caso o campo esteja vazio, conforme c\u00f3digo:</p> <pre><code>public Email(String email) {\nif (email == null) {\nthrow new NullPointerException(\"E-mail n\u00e3o pode ser nulo\");\n}\n</code></pre>"},{"location":"OOP/exception/#assertions","title":"Assertions","text":"<p>As <code>assertions</code> s\u00e3o uma forma de afirmar uma express\u00e3o de maneira forte, confiante e contundente. Ela \u00e9 utilizada para algo que \u00e9 esperado que seja verdadeiro. Pode parecer redundante, mas nem sempre os conceitos s\u00e3o t\u00e3o \u00f3bvios na programa\u00e7\u00e3o.</p> <p>As assertions ajudam a identificar poss\u00edveis erros de l\u00f3gica durante o desenvolvimento, assegurando que o c\u00f3digo funciona corretamente. </p> <p>Exemplo:</p> <pre><code>// Verificando com assert se um valor est\u00e1 dentro do intervalo\nimport java.util.Scanner;\npublic class AssertTest {\npublic static void main(String[] args){\nScanner input = new Scanner(System.in);\nSystem.out.print(\"Digite sua idade: \");\nint idade = input.nextInt();\n// afirma que a idade \u00e9 &gt;= 0 e &lt;= 150\nassert (number &gt;= 0 &amp;&amp; number &lt;= 150) : \"Idade Incorreta: \" + number;\nSystem.out.printf(\"Voc\u00ea tem %d%n anos\", number);}\n} // fim da classe AssertTest\n</code></pre> <p>No exemplo acima, queremos constatar que o usu\u00e1rio digitou uma idade entre 0 e 150, pois seria um absurdo esperar um valor fora desse intervalo. E fazemos essa afirma\u00e7\u00e3o com o <code>assert</code>.</p>"},{"location":"OOP/exception/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://rollbar.com/blog/how-to-handle-checked-unchecked-exceptions-in-java/#:~:text=In%20broad%20terms,%20a%20checked,and%20running%20the%20second%20time.</li> <li>Deitel, Paul. Java: como programar / Paul Deitel, Harvey Deitel; tradu\u00e7\u00e3o Edson Furmankiewicz; revis\u00e3o t\u00e9cnica Fabio Lucchini. -- S\u00e3o Paulo: Pearson Education do Brasil, 2017</li> <li>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</li> </ul>"},{"location":"OOP/heranca/","title":"Heran\u00e7a","text":"<p>O conceito de heran\u00e7a (inheritance) em programa\u00e7\u00e3o orientada \u00e0 objetos se aplica na reutiliza\u00e7\u00e3o de c\u00f3digo em uma aplica\u00e7\u00e3o e na customiza\u00e7\u00e3o desse c\u00f3digo.  Ao inv\u00e9s de repetir o c\u00f3digo diversas vezes, aplicamos o conceito de heran\u00e7a, no qual um nova classe \u00e9 formada a partir de uma classe anterior, reutilizando o c\u00f3digo. Como tamb\u00e9m, essa organiza\u00e7\u00e3o de classes que herdam, permite que um mesmo m\u00e9todo seja modificado apenas na classe origin\u00e1ria e que produza efeitos em todas as classes derivadas, facilitando a manuten\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"OOP/heranca/#herdando-uma-classe","title":"Herdando uma classe","text":"<p>Atributos e  m\u00e9todos podem ser herdados de uma classe pai para uma classe filho, ou, em outras palavras, de uma superclasse para uma subclasse. A linguagem Java usa a palavra-chave <code>extends</code> para indicar a rela\u00e7\u00e3o entre as classes, conforme a sintaxe geral:</p> <pre><code>[modificador] class &lt;nome-da-subclasse&gt; extends &lt;nome-da-superclasse&gt; {\n//o c\u00f3digo da subclasse vai aqui\n}\n</code></pre> <p>Se a subclasse e a superclasse n\u00e3o estiverem no mesmo pacote \u00e9 necess\u00e1rio importar o nome da superclasse.</p> <p>Importante: Java permite herdar de uma \u00fanica classe.</p>"},{"location":"OOP/heranca/#exemplo-conceitual","title":"Exemplo conceitual","text":"<p>Um sistema de RH pode conter uma superclasse empregado com m\u00e9todos que atendem a todos os funcion\u00e1rios indistintamente tais como <code>getNome()</code>, <code>setNome()</code>, al\u00e9m de atributos como <code>cpf</code>, <code>temFilhos</code>, <code>estadoCivil</code>, entre outros.  E, no mesmo sistema, ao precisarmos criar uma classe mais espec\u00edfica como por exemplo de gerentes, que herdaria os m\u00e9todos e atributos b\u00e1sicos da classe empregado, e acrescentaria m\u00e9todos espec\u00edficos como <code>atingiuMeta</code>, <code>bonificacao</code>, etc.</p> <p>Importante: Se um classe n\u00e3o especifica uma heran\u00e7a com a palavra-chave <code>extends</code>, ent\u00e3o ela herda da <code>java.lang.Object class</code>, portanto, estamos sempre usando a heran\u00e7a, mesmo que implicitamente.</p> <p></p>"},{"location":"OOP/heranca/#o-operador-instanceof","title":"O operador instanceof","text":"<p>Java possui um operador bin\u00e1rio chamado <code>intanceof</code> que verifica se um objeto \u00e9 de determinado tipo. A sintaxe geral \u00e9:</p> <pre><code>&lt;vari\u00e1vel-refer\u00eancia&gt; instanceof &lt;nome-tipo&gt;\n</code></pre> <p>Se a vari\u00e1vel de refer\u00eancia refere a um objeto do tipo indicado ent\u00e3o ela retorna verdadeiro, do contr\u00e1rio, ela ir\u00e1 retornar falso.</p>"},{"location":"OOP/heranca/#sobreposicao-de-metodo-method-overriding","title":"Sobreposi\u00e7\u00e3o de m\u00e9todo (Method Overriding)","text":"<p>A sobreposi\u00e7\u00e3o de m\u00e9todo (overriding) ocorre quando redefinimos um m\u00e9todo herdado de uma superclasse. Por exemplo: </p> <pre><code>public class A {\npublic void print() {\nSystem.out.println(\"A\");\n}\n}\npublic class B extends A {\n@Override\npublic void print() {\nSystem.out.println(\"B\");\n}\n}\n</code></pre> <p>A classe B herda o m\u00e9todo <code>print()</code> da classe A, por\u00e9m, ele redefine seu comportamento. Se acaso tivermos uma classe C herdando de B, ent\u00e3o ela j\u00e1 ir\u00e1 herdar o m\u00e9todo redefinido em B, pois ela \u00e9 a superclasse imediata.</p>"},{"location":"OOP/heranca/#regras-de-sobreposicao-de-metodos","title":"Regras de Sobreposi\u00e7\u00e3o de M\u00e9todos","text":"<ul> <li>A sobreposi\u00e7\u00e3o de m\u00e9todos n\u00e3o se aplica a m\u00e9todos est\u00e1ticos. </li> <li>O m\u00e9todo sobreposto deve ter o mesmo nome que o m\u00e9todo anterior.</li> <li>O m\u00e9todo sobreposto deve ter o mesmo n\u00famero de par\u00e2metros, e do mesmo tipo, que seu anterior.</li> <li>O n\u00edvel de acesso do m\u00e9todo sobreposto deve ser o mesmo ou um mais relaxado, conforme tabela: </li> </ul> N\u00edvel de acesso do m\u00e9todo anterior N\u00edvel de acesso permitido para m\u00e9todo substitu\u00eddo public public protected public, protected package level public, protected, package level"},{"location":"OOP/heranca/#sobrecarga-de-metodo-method-overloading","title":"Sobrecarga de M\u00e9todo (Method Overloading)","text":"<p>Ter mais de um m\u00e9todo com o mesmo nome em uma mesma classe \u00e9 chamado de sobrecarga de m\u00e9todo. A sobrecarga de m\u00e9todos ocorre quando temos um n\u00famero diferente de par\u00e2metos, diferentes tipos de par\u00e2metros, ou ambos.</p> <p>A sobrecarga de m\u00e9todos est\u00e1 mais relacionada com o polimorfismo do que com a heran\u00e7a.</p>"},{"location":"OOP/heranca/#diferencas-importantes-entre-sobrecarga-e-substituicao-de-metodos","title":"Diferen\u00e7as importantes entre sobrecarga e substitui\u00e7\u00e3o de m\u00e9todos","text":"Substitui\u00e7\u00e3o Sobrecarga Envolve heran\u00e7a e ao menos duas classes Envolve apnas uma classe. mesmo nome, mesmo n\u00famero, ordem e tipo  de par\u00e2metro Diferentes par\u00e2metros (ordem, n\u00famero, tipo) Aplica-se apenas a m\u00e9todos da inst\u00e2ncia (n\u00e3o-est\u00e1ticos) Ap\u013aica-se a qualquer m\u00e9todo"},{"location":"OOP/heranca/#referencias","title":"Refer\u00eancias","text":"<ul> <li>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</li> <li>Operador instanceof em Java</li> </ul>"},{"location":"OOP/interface/","title":"Interface e Classe Abstrata","text":"<p>Muitos softwares s\u00e3o utilizados para fazer simula\u00e7\u00f5es de problemas reais, tais como: mudan\u00e7as ambientais, previs\u00f5es clim\u00e1ticas, flutua\u00e7\u00f5es da bolsa de valores, tr\u00e1fego de uma cidade, etc.</p> <p>Vamos supor uma simula\u00e7\u00e3o da \u00e1rea de biologia do tipo predador-presa. Para simplificar pensemos na rela\u00e7\u00e3o de coelho-raposa dentro de uma localidade. Quanto maior o n\u00famero de coelhos, mais presas, maiores s\u00e3o as chances de as raposas se alimentarem e se reproduzirem, portanto, maior n\u00famero de raposas, o que levaria por consequ\u00eancia, a uma diminui\u00e7\u00e3o do n\u00famero de coelhos. </p> <p>Poder\u00edamos pensar na seguinte classe para coelho:</p> <pre><code>public class Rabbit\n{\n//campos est\u00e1ticos omitidos.\n// Caracter\u00edsticas individuais (campos de inst\u00e2ncia).\n// A idade do coelho.\nprivate int age;\n// Coelho vivo ou n\u00e3o.\nprivate boolean alive;\n// A posi\u00e7\u00e3o do coelho\nprivate Location location;\n// O campo ocupado\nprivate Field field;\n//M\u00e9todos omitidos.\n}\n</code></pre> <p>E a seguinte classe para raposas:</p> <pre><code>public class Fox\n{\u00a0//Campos est\u00e1ticos omitidos\n// A idade de uma raposa.\nprivate int age;\n// Raposa viva ou n\u00e3o.\nprivate boolean alive;\n// A posi\u00e7\u00e3o da raposa\nprivate Location location;\n// O campo ocupado\nprivate Field field;\n// O n\u00edvel de alimento da raposa que aumenta comendo coelhos.\nprivate int foodLevel;\n//M\u00e9todos omitidos.\n}\n</code></pre> <p>Facilmente enxergamos que ambos animais tem atributos em comum como <code>age</code>, <code>alive</code> e <code>location</code>. Isso nos permitiria criar uma superclasse Animal que possu\u00edsse esses atributos.</p> <p>Mas essa superclasse Animal n\u00e3o seria como as outras, pois, ela n\u00e3o ser\u00e1 o molde para nenhum objeto, portanto, ela seria ou uma interface ou mesmo uma classe abstrata.</p>"},{"location":"OOP/interface/#o-que-e-interface","title":"O que \u00e9 Interface?","text":"<p>A interface \u00e9 como um template que outras classes podem seguir/implementar. Isso permite que classes de diferentes hierarquias tenham atributos iguais. Uma interface define um conjunto de assinaturas de m\u00e9todos que outras classes devem implementar, ela apenas define um comportamento base para um conjunto de classes.</p>"},{"location":"OOP/interface/#implementando-uma-interface","title":"Implementando uma interface","text":"<p>No exemplo que demos acima, de uma superclasse Animal e de duas subclasses raposa e coelho, ter\u00edamos a seguinte sintaxe de implementa\u00e7\u00e3o:</p> <pre><code>public class Coelho implements Animal;\npublic class Raposa implements Animal;\n</code></pre>"},{"location":"OOP/interface/#o-que-e-classe-abstrata","title":"O que \u00e9 Classe Abstrata?","text":"<p>Muito parecida com a interface, a classe abstrata n\u00e3o \u00e9 o molde para nenhum objeto, mas sim, uma classe-pai, ou seja, ela cont\u00e9m m\u00e9todos e atributos que ser\u00e3o herdados por outras classes.  As classes abstratas tamb\u00e9m n\u00e3o podem instanciar objetos, cabendo a instancia\u00e7\u00e3o \u00e0s classes concretas.</p>"},{"location":"OOP/interface/#diferencas-entre-interface-e-classe-abstrata","title":"Diferen\u00e7as entre Interface e Classe Abstrata","text":"Classe Abstrata Interface Pode possui atributos de inst\u00e2ncia Possui apenas constantes Possui m\u00e9todos de diversas visibilidade e m\u00e9todos implementados ou abstratos Todos os m\u00e9todos s\u00e3o public e abstract \u00c9 estendida por classes (sub-classes) \u00c9 implementada por classes Uma subclasse s\u00f3 pode estender uma \u00fanica classe abstrata Uma classe pode implementar mais de uma interface Hierarquia de heran\u00e7a com outras classes abstratas Hierarquia de heran\u00e7a com outras interfaces"},{"location":"OOP/interface/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Java - Classes Abstratas</li> <li>Classes Abstratas vs Interfaces</li> <li>USP -  Prof. Marcio Delamaro - Interfaces</li> <li>POLIMORFISMO E INTERFACES - Dilvan Moreira</li> </ul>"},{"location":"OOP/java-intro/","title":"Java e Orienta\u00e7\u00e3o a Objetos","text":""},{"location":"OOP/java-intro/#introducao-java","title":"Introdu\u00e7\u00e3o Java","text":"<p>A primeira vers\u00e3o da linguagem Java surgiu em 1995, criada por alguns desenvolvedores da Sun Microsystem. A ideia inicial era desenvolver uma linguagem para controlar pequenos dispositivos, como televisores, videocassetes e aparelhos de TV a cabo. Mas JAVA acabou dominando a \u00e1rea de sistemas de informa\u00e7\u00e3o, principalmente sistemas para a Web.</p> <p>O c\u00f3digo Java \u00e9 convertido em bytecodes interpretados no ambiente de execu\u00e7\u00e3o do Java para execut\u00e1-los. Se for necess\u00e1rio mais desempenho, esse ambiente de execu\u00e7\u00e3o transforma os bytecodes em c\u00f3digo de m\u00e1quina nativo para a CPU espec\u00edfica, ganhando assim desempenho.</p> <p>A linguagem Java \u00e9 Compilada e Interpretada. Primeiramente, os arquivos de c\u00f3digo-fonte Java com extens\u00e3o \u201c.java\u201d s\u00e3o compilados para bytecodes, tamb\u00e9m conhecidos como arquivos de extens\u00e3o \u201c.class\u201d. Existe uma m\u00e1quina virtual, conhecida como JVM (Java Virtual Machine), que \u00e9 capaz de interpretar (executar) os arquivos Java compilados.</p>"},{"location":"OOP/java-intro/#variaveis-e-tipos-de-dados","title":"Vari\u00e1veis e Tipos de Dados","text":"<p> Vari\u00e1veis s\u00e3o espa\u00e7os na mem\u00f3ria onde se guardam dados.</p> <p>Java \u00e9 uma linguagem fortemente tipada, pois cada vari\u00e1vel precisa ter um tipo declarado. Existem oito tipos primitivos para armazenamento de informa\u00e7\u00f5es. Tipos primitivos n\u00e3o s\u00e3o objetos, eles s\u00e3o partes internas da linguage</p> <p>Para declarar uma vari\u00e1vel:</p> <ul> <li>Digite seu tipo: <code>int</code> , <code>float</code> , <code>String</code> , etc.</li> <li>D\u00ea um nome: <code>nome</code> ,  <code>idade</code> , <code>i</code> , etc.</li> <li>Use o sinal de atribui\u00e7\u00e3o <code>=</code> para atribuir um valor a vari\u00e1vel. (opcional)</li> <li>D\u00ea um valor a vari\u00e1vel: <code>\"Paula\"</code> , <code>19</code> , <code>1.88</code> , etc. (opcional)</li> </ul> <p>Java possui 8 tipos de dados primitivos:</p>"},{"location":"OOP/java-intro/#numeros-inteiros","title":"N\u00fameros inteiros","text":"Tipo Armazenamento Intervalo int 4 bytes \u20132.147.483.648 a 2.147.483.647 short 2 bytes \u201332.768 a 32.767 long 8 bytes \u20139.223.372.036.854.775.808 a 9.223.372.036.854.775.807 byte 1 byte -128 a 127"},{"location":"OOP/java-intro/#numeros-decimais","title":"N\u00fameros decimais","text":"Tipo Armazenamento Intervalo float 4 bytes aprox \u00b1 3.40282347E+38F (6-7 d\u00edgitos decimais significativos) double 8 bytes aprox \u00b1 1.797693134862311570E+308 (15 d\u00edgitos decimais significativos) <p>O tipo char \u00e9 utilizado para armazenar caracteres individuais, como letras, algarismos, sinais de pontua\u00e7\u00e3o, entre outros.</p> <p>O \u00faltimo tipo \u00e9 o boolean, que possui somente dois valores, verdadeiro ( true) ou falso ( false). No Java n\u00e3o \u00e9 poss\u00edvel converter n\u00fameros inteiros em valores booleanos.</p>"},{"location":"OOP/java-intro/#tipos-de-dados-nao-primitivos","title":"Tipos de Dados N\u00e3o Primitivos","text":"<p>Al\u00e9m disso, temos tipos n\u00e3o primitivos de dados, caso de String que corresponde a uma cadeia de caracteres Unicode, e Object, que se refere a qualquer objeto gen\u00e9rico.</p>"},{"location":"OOP/java-intro/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Em Java temos os seguintes operadores:</p> <ul> <li>Soma: <code>+</code></li> <li>Subtra\u00e7\u00e3o: <code>-</code></li> <li>Multiplica\u00e7\u00e3o: <code>*</code></li> <li>Divis\u00e3o: <code>/</code></li> <li>M\u00f3dulo: <code>%</code></li> </ul> <pre><code>public class Main {\npublic static void main(String[] args) {\nint a;\nint b = 2;\na = 3;\nint soma = a + b;\nint subtracao = a - b;\nint multiplicacao = a * b;\nint divisao = a / b;  // o resultado ser\u00e1 int pois a vari\u00e1vel foi declarada como int\nint modulo = a % b;\nSystem.out.println(soma);\nSystem.out.println(subtracao);\nSystem.out.println(multiplicacao);\nSystem.out.println(divisao);\nSystem.out.println(modulo);\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#cast","title":"Cast","text":"<p>\u00c9 quando convertemos um valor de um tipo para outro.</p> <p>Por exemplo, se queremos dividir os valores armazenados em 2 vari\u00e1veis do tipo inteiro, o resultado ser\u00e1 entendido como se tamb\u00e9m fosse do tipo inteiro. Por isso usamos o cast, para converter essa vari\u00e1vel para float (ou double) na hora da opera\u00e7\u00e3o.</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nint a;\nint b = 2;\na = 3;\nint divisaoint = a / b;  // resultado int\nfloat aindaint = a / b; // apesar de ser um float, as vari\u00e1veis a e b ainda s\u00e3o int\nfloat divisaocast = (float) a / (float) b;\n// Ao fazer o cast, a e b s\u00e3o convertidos para float apenas na hora da opera\u00e7\u00e3o\nSystem.out.println(divisaoint);\nSystem.out.println(aindaint);\nSystem.out.println(divisaocast);\n}\n}\n/*\nVeja que apenas declarar a vari\u00e1vel como float n\u00e3o \u00e9 suficiente para fazer\na opera\u00e7\u00e3o dar certo. \u00c9 necess\u00e1rio fazer o cast (convers\u00e3o).\n*/\n</code></pre>"},{"location":"OOP/java-intro/#estruturas-condicionais","title":"Estruturas Condicionais","text":"<p>Usam condi\u00e7\u00f5es para decidir que caminho seguir.</p> <p>Para isso usamos operadores de compara\u00e7\u00e3o para comparar 2 express\u00f5es. Os operadores s\u00e3o:</p> <ul> <li>Igual: <code>==</code></li> <li>Diferente: <code>!=</code></li> <li>Maior: <code>&gt;</code></li> <li>Menor: <code>&lt;</code></li> <li>Maior ou igual: <code>&gt;=</code></li> <li>Menor ou igual: <code>&lt;=</code></li> </ul>"},{"location":"OOP/java-intro/#if-else-if-else","title":"if / else if / else","text":"<pre><code>public class Main {\npublic static void main(String[] args) {\nint nota = 70;\nif (nota &gt;= 80) {\nSystem.out.println(\"A\");\n} else if (nota &gt;= 60) {\nSystem.out.println(\"B\");\n} else if (nota &gt;= 40) {\nSystem.out.println(\"C\");\n} else {\nSystem.out.println(\"D\");\n}\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#operador-ternario","title":"Operador Tern\u00e1rio","text":"<p>O operador tern\u00e1rio (<code>?</code>) \u00e9 um recurso para tomada de decis\u00f5es com objetivo similar ao do <code>if / else</code> mas codificado em apenas uma linha.</p> <ul> <li>No c\u00f3digo, a express\u00e3o booleana <code>isWeekend</code> \u00e9 avaliada.</li> <li>Caso ela seja verdade, tudo que estiver entre o operador tern\u00e1rio <code>?</code> e a pontua\u00e7\u00e3o <code>:</code> , ser\u00e1 executado.</li> <li>Caso contr\u00e1rio, ser\u00e1 executado tudo que estiver ap\u00f3s a pontua\u00e7\u00e3o <code>:</code></li> </ul> <pre><code>public class Main {\npublic static void main(String[] args) {\nboolean isWeekend = false;\nString message = isWeekend ? \"It is weekend\" : \"It is not weekend\";\nSystem.out.println(message);\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#switch","title":"Switch","text":"<pre><code>public class Main {\npublic static void main(String[] args) {\nString nota = \"E\";\nswitch (nota) {\ncase \"A\":\ncase \"B\":\nSystem.out.println(\"Aluno aprovado\");\nbreak;\ncase \"C\":\nSystem.out.println(\"Aluno em recupera\u00e7\u00e3o\");\nbreak;\ncase \"D\":\nSystem.out.println(\"Aluno reprovado\");\nbreak;\ndefault:\nSystem.out.println(\"Nota inv\u00e1lida\");\n}\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#estruturas-de-repeticao","title":"Estruturas de Repeti\u00e7\u00e3o","text":""},{"location":"OOP/java-intro/#while","title":"While","text":"<ul> <li>Usamos o <code>while</code> quando n\u00e3o sabemos exatamente quantas vezes o c\u00f3digo ser\u00e1 repetido</li> <li>A condi\u00e7\u00e3o para interrup\u00e7\u00e3o da repeti\u00e7\u00e3o se d\u00e1 atrav\u00e9s de uma condi\u00e7\u00e3o booleana.</li> </ul> <pre><code>public class Main {\npublic static void main(String[] args) {\nint i = 0;\nwhile (i &lt; 5) {\nSystem.out.println(i);\ni++;\n}\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#do-while","title":"Do-While","text":"<p>\u00c9 uma variante do <code>while</code> , com a diferen\u00e7a que o bloco de c\u00f3digo ser\u00e1 executado primeiro, e somente depois \u00e9 que ser\u00e1 analisada a condi\u00e7\u00e3o. Se a condi\u00e7\u00e3o for verdadeira ser\u00e1 executada mais uma vez, quando for falsa, ir\u00e1 interromper. <pre><code>public class Main {\npublic static void main(String[] args) {\nint i = 0;\ndo {\nSystem.out.println(i);\ni++;\n}\nwhile (i &lt; 5);\n}\n}\n</code></pre></p>"},{"location":"OOP/java-intro/#for","title":"For","text":"<ul> <li>Como par\u00e2metro coloca-se:<ul> <li>uma vari\u00e1vel de controle</li> <li>uma compara\u00e7\u00e3o</li> <li>um incremento ou decremento</li> </ul> </li> </ul> <pre><code>public class Main {\npublic static void main(String[] args) {\nfor (int i = 0; i &lt;= 10; i++) {\nSystem.out.println(\u201cA vari\u00e1vel i agora vale \u201c + i);\n}\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#classes-do-java","title":"Classes do Java","text":""},{"location":"OOP/java-intro/#localdate","title":"LocalDate","text":"<ul> <li>LocalDate \u00e9 uma classe Java para datas.</li> <li>Usa o formato ISO-8601</li> <li>\u00c9 necess\u00e1rio importar <code>import java.time.LocalDate;</code></li> </ul> <pre><code>// importa a classe LocalDate para trabalhar com data e hora\nimport java.time.LocalDate;\npublic class Main {\npublic static void main(String[] args) {\n// Recupera as informa\u00e7\u00f5es de data (ano, m\u00eas, dia) local e guarda em uma vari\u00e1vel do tipo LocalDate\nLocalDate hoje = LocalDate.now();\nSystem.out.println(hoje);\nSystem.out.println(hoje.getDayOfWeek());  // Dia da semana\nSystem.out.println(hoje.getDayOfMonth());  // Dia do m\u00eas\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#locale","title":"Locale","text":"<ul> <li>Classe usada para a localidade (USA, Austr\u00e1lias, etc.)</li> <li>\u00c9 necess\u00e1rio importar <code>import java.util.Locale;</code></li> </ul> <p>Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\")</p> <p>Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos <code>getDisplayName</code> Usamos tamb\u00e9m <code>TextStyle</code> para o modo de exibi\u00e7\u00e3o (deve ser importado) Por fim, usamos a localidade criada acima.</p> <pre><code>// importa a classe LocalDate para trabalhar com data e hora\nimport java.time.LocalDate;\n// importa a classe TextStyle para o formato\nimport java.time.format.TextStyle;\n// importa a classe Locale\nimport java.util.Locale;\npublic class Main {\npublic static void main(String[] args) {\nLocalDate hoje = LocalDate.now();\n/* Para mostrar as informa\u00e7\u00f5es de data traduzidas \u00e9 necess\u00e1rio usar a classe Locale\n        Aqui \u00e9 criada uma localidade usando a classe e essa localidade recebe o nome de portugal\n        \u00c9 passado como par\u00e2metro a l\u00edngua (\"pt\") e o pa\u00eds (\"PT\")\n        */\nLocale portugal = new Locale(\"pt\", \"PT\");\n/* Para imprimir usando as informa\u00e7\u00f5es de acordo com o pa\u00eds, usamos getDisplayName\n        Usamos tamb\u00e9m TextStyle para o modo de exibi\u00e7\u00e3o (deve ser importado)\n        Por fim, usamos a localidade criada acima\n        */\nSystem.out.println(hoje.getDayOfWeek().getDisplayName(TextStyle.FULL, portugal));\n}\n}\n</code></pre>"},{"location":"OOP/java-intro/#ides-para-java","title":"IDEs para Java:","text":"<ul> <li>Eclipse (IDE l\u00edder para Java)</li> <li>IntelliJ</li> <li>Netbeans</li> <li>JDeveloper</li> </ul>"},{"location":"OOP/metodos/","title":"M\u00e9todos","text":"<p>Um m\u00e9todo em uma classe define o comportamento dos objetos ou mesmo o comportamento da classe em si. O m\u00e9todo pode ser invocado para que executemos seu c\u00f3digo. Opcionalmente um m\u00e9todo pode aceitar valores de entrada (input values) na hora de sua invoca\u00e7\u00e3o, que s\u00e3o conhecidos como par\u00e2metros.</p>"},{"location":"OOP/metodos/#declarando-metodos-de-uma-classe","title":"Declarando M\u00e9todos de uma Classe","text":"<pre><code>[modificador] &lt;tipo-retorno&gt; &lt;nome-metodo&gt; (&lt;lista-parametro&gt;) {\n\u00a0\u00a0\u00a0\u00a0// Corpo do m\u00e9todo vai aqui\n}\n</code></pre> <ul> <li>modificador \u00e9 uma lista opcional de modificadores para o m\u00e9todo</li> <li>tipo-retorno \u00e9 o tipo de dado do valor a ser retornado pelo m\u00e9todo</li> <li>lista-parametro \u00e9 uma lista opcional de par\u00e2metros que o m\u00e9todo aceita. Quando tem mais de um eles s\u00e3o separados por v\u00edrgula.</li> <li>corpo do m\u00e9todo \u00e9 o c\u00f3digo que ser\u00e1 executado ao ser invocado tal m\u00e9todo.</li> </ul> <p>Convencionalmente um m\u00e9todo em Java come\u00e7a com uma letra min\u00fascula e a pr\u00f3xima palavra com mai\u00fascula, por exemplo, adicionarProduto, removerProduto, depositarDinheiro .</p> <p>Um m\u00e9todo tem uma assinatura que identifica tal m\u00e9todo em determinado contexto. A assinatura de um m\u00e9todo \u00e9 a combina\u00e7\u00e3o das seguintes partes:</p> <ul> <li>Nome do m\u00e9todo</li> <li>N\u00famero de Par\u00e2metros</li> <li>Tipo de dado dos par\u00e2metros</li> <li>Ordem dos par\u00e2metros </li> </ul>"},{"location":"OOP/metodos/#variaveis-locais","title":"Vari\u00e1veis Locais","text":"<p>Uma vari\u00e1vel declarada dentro de um m\u00e9todo, de um construtor ou de um bloco de c\u00f3digo \u00e9 chamada de vari\u00e1vel local. Uma vari\u00e1vel local existe somente durante a execu\u00e7\u00e3o daquele m\u00e9todo, ou seja, ela \u00e9 tempor\u00e1ria e n\u00e3o pode ser utilizada fora do escopo.  </p> <p>Obs: se uma vari\u00e1vel local de um m\u00e9todo possui o mesmo nome que uma vari\u00e1vel da classe em que o m\u00e9todo est\u00e1 contido, a vari\u00e1vel local possui preced\u00eancia.</p>"},{"location":"OOP/metodos/#o-metodo-main","title":"O M\u00e9todo main()","text":"<p>O m\u00e9todo main se declara da seguinte maneira: </p> <pre><code>public static void main(String[] args) {\n    // corpo do m\u00e9todo vai aqui\n}\n</code></pre> <p>Dois modificadores <code>public</code> e <code>static</code> s\u00e3o utilizados na declara\u00e7\u00e3o da main(). O <code>public</code> faz ele ser acess\u00edvel de qualquer lugar da aplica\u00e7\u00e3o desde que a classe na qual ele seja declarada esteja acess\u00edvel. O modificador <code>static</code> faz ele ser uma classe m\u00e9todo, ou seja, ele pode ser invocado usando o nome da classe. </p> <p>O tipo de retorno \u00e9 do tipo <code>void</code> que significa que ele n\u00e3o retorna nenhum valor ao seu invocador.  O m\u00e9todo main() aceita um \u00fanico par\u00e2metro do tipo String array (<code>String[]</code>) e a palavra 'args' define o nome do par\u00e2metro. </p> <p>O m\u00e9todo main() \u00e9 respons\u00e1vel por inicar a execu\u00e7\u00e3o do c\u00f3digo na JVM (Java Virtual Machine).</p>"},{"location":"OOP/metodos/#a-palavra-chave-this","title":"A Palavra-chave this","text":"<p>A palavra-chave this \u00e9 uma refer\u00eancia a  inst\u00e2ncia de uma classe e s\u00f3 pode ser utilizada no contexto de uma inst\u00e2ncia. This em ingl\u00eas significa \"isso\", \"isto\" e tem a finalidade de apontar para a pr\u00f3pria classe, distinguindo vari\u00e1veis de mesmo nome. </p> <p>Por exemplo:  <pre><code> public Funcionario(String nome, int ID, double salario) {\nthis.nome = nome;\nthis.ID = ID;\nthis.salario = salario;\n}\n</code></pre></p> <p>Visualizamos que o <code>this.nome</code> \u00e9 a vari\u00e1vel nome da classe Funcion\u00e1rio e <code>nome</code> \u00e9 o par\u00e2metro que foi recebido para criar um objeto. </p> <p>Veremos outros usos da palavra-chave this no  artigo sobre Construtores.</p>"},{"location":"OOP/metodos/#nivel-de-acesso-para-metodos","title":"N\u00edvel de acesso para m\u00e9todos","text":"<p>O n\u00edvel de acesso para os m\u00e9todos de uma classe determinam quais partes do programa podem ser acessados. S\u00e3o quatro os tipos de modificadores usados para m\u00e9todos (como tamb\u00e9m para atributos):</p> <ul> <li>public</li> <li>private</li> <li>protected</li> <li>default (package-level access)</li> </ul> <p>Quando declaramos um m\u00e9todo como <code>public</code> ele pode ser acessado de qualquer lugar desde que a classe tamb\u00e9m esteja acess\u00edvel.</p> <p>Quando declaramos um m\u00e9todo como <code>private</code> ele pode ser acessado apenas no corpo da classe declarada e em nenhum outro lugar.</p> <p>Quando declaramos um m\u00e9todo como <code>protected</code> ele pode ser acessado do mesmo pacote ou de descendentes da classe, mesmo se os descendentes estiverem em diferentes pacotes.</p> <p>Se n\u00e3o declararmos nenhum modificador de acesso, automaticamente ele ser\u00e1 declarado como <code>default</code> e o m\u00e9todo poder\u00e1 ser acessado pelo mesmo pacote.</p>"},{"location":"OOP/metodos/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://www.javaprogressivo.net/2012/10/Auto-referencia-com-o-this-Invocando-metodos-de-Classes-e-Objetos.html</li> <li>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</li> </ul>"},{"location":"OOP/oop/","title":"Programa\u00e7\u00e3o Orientada a Objetos","text":"<p>Objetivos: No\u00e7\u00f5es de arquitetura de software com \u00eanfase em programa\u00e7\u00e3o orientada a objetos.</p> <p>Ementa: Arquitetura de Software: Coes\u00e3o e acoplamento; Aprofundar os conceitos b\u00e1sicos de orienta\u00e7\u00e3o a objetos, entre eles: classes, objetos, interfaces, heran\u00e7a e polimorfismo; Introduzir t\u00e9cnicas de tratamento de erros com exce\u00e7\u00f5es; no\u00e7\u00f5es depadr\u00f5es de projeto (explorando alguns exemplos como Observer, Adapter, Null Object); Apresentar no\u00e7\u00f5es de aspectos, fun\u00e7\u00f5es an\u00f4nimas, closures e t\u00e9cnicas funcionais (Map, Filter, Fold, etc).</p> <p>Bibliografia Base:</p> <ul> <li>F\u00e9lix, Rafael. Programa\u00e7\u00e3o orientada a objetos. 2017. Pearson.</li> <li>Puga, Sandra; Rissetti, Gerson. L\u00f3gica de programa\u00e7\u00e3o e estruturas de dados com aplica\u00e7\u00f5es em Java. 2016. Pearson.</li> <li>Sommerville, Ian. Engenharia de Software. 2007. Pearson. Bibliografia Complementar:</li> <li>Stephen, Samuel; Bocutiu, Stefan. Programando com Kotlin. 2017. Novatec.</li> <li>DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 8a Edi\u00e7\u00e3o, 2010.</li> <li>DEITEL, H. M.; DEITEL, P.J. Java: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 6a Edi\u00e7\u00e3o, 2005.</li> <li>DEITEL, H. M.; DEITEL, P.J. C++: Como Programar. S\u00e3o Paulo: Pearson Prentice- Hall, 5a Edi\u00e7\u00e3o, 2006.</li> <li>MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 1. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006.</li> <li>MIZRAHI, V. V. Treinamento em Linguagem C++: m\u00f3dulo 2. S\u00e3o Paulo: Pearson Prentice-Hall, 2a Edi\u00e7\u00e3o, 2006.</li> </ul>"},{"location":"OOP/paradigma-programacao/","title":"Paradigmas de Programa\u00e7\u00e3o","text":"<p>Programar \u00e9 providenciar solu\u00e7\u00f5es usando modelos computacionais suportados por uma linguagem de programa\u00e7\u00e3o. Antes mesmo de solucionar o problema j\u00e1 temos que ter uma vis\u00e3o do problema e da solu\u00e7\u00e3o.</p> <p>Conforme o dicion\u00e1rio Oxford o termo paradigma se traduz por \"um exemplo que serve como modelo; padr\u00e3o.\", logo paradigmas de programa\u00e7\u00e3o s\u00e3o um conjunto de conceitos e ideias que constituem um modelo de vis\u00e3o da realidade.</p> <p>Um \u00fanico problema pode ter mais de um meio de solu\u00e7\u00e3o, isso se d\u00e1, pois, podemos combinar dados e algoritmos de maneira que obtenhamos o mesmo resultado por caminhos complemente diferentes. As linguagens de programa\u00e7\u00e3o podem ter o vi\u00e9s de algum paradigma espec\u00edfico ou mesmo ser multiparadigma.</p>"},{"location":"OOP/paradigma-programacao/#paradigma-imperativo","title":"Paradigma Imperativo","text":"<p>Semelhante ao comportamento imperativo das linguagens naturais que expressam ordens, programas imperativos s\u00e3o uma sequ\u00eancia de comandos para o computador executar.</p> <p>Caracter\u00edsticas centrais das linguagens imperativas:  * as vari\u00e1veis, que modelam as c\u00e9lulas de mem\u00f3ria; * comandos de atribui\u00e7\u00e3o, baseados nas opera\u00e7\u00f5es de transfer\u00eancia dos dados e instru\u00e7\u00f5es;  * a execu\u00e7\u00e3o sequencial de instru\u00e7\u00f5es; * e a forma iterativa de repeti\u00e7\u00e3o, o m\u00e9todo mais eficiente desta arquitetura</p> <p>FORTRAN, COBOL, e C s\u00e3o alguns examplos de linguagem de programa\u00e7\u00e3o que suportam o paradigma imperativo.</p>"},{"location":"OOP/paradigma-programacao/#paradigma-procedural","title":"Paradigma Procedural","text":"<p>Muito parecido com o paradigma imperativo com uma diferen\u00e7a: m\u00faltiplos comandos numa unidade s\u00e3o chamados procedimento, equipar\u00e1vel a m\u00e9todos, fun\u00e7\u00f5es, rotinas. A principal consequ\u00eancia disso \u00e9 a reutiliza\u00e7\u00e3o do c\u00f3digo em diferentes partes do programa, fazendo a invoca\u00e7\u00e3o do procedimento. Java, C++, PHP entre outras, s\u00e3o linguagens que suportam o paradigma procedural.</p>"},{"location":"OOP/paradigma-programacao/#paradigma-declarativo","title":"Paradigma Declarativo","text":"<p>Um contraste com o paradigma Imperativo, pois descrevemos o problema e o computador acha a solu\u00e7\u00e3o. \u00c9 mais importante pensar no que \u00e9 o problema do que em como resolv\u00ea-lo.</p> <p>D\u00e1 para pensar, por exemplo, num programa escrevendo num banco de dados SQL (Structured Query Language), onde voc\u00ea especifica o dado a ser salvo e o \"motor\" do banco de dados se encarrega de salvar aquele dado para voc\u00ea. O Foco n\u00e3o est\u00e1 no \"como\" e sim no \"que\".</p> <p>Neste paradigma, ao contr\u00e1rio do imperativo, o algoritmo produz novos dados ao inv\u00e9s de apenas manipul\u00e1-lo.</p> <p>Podemos citar o PROLOG como liguagem que utiliza esse paradigma.</p>"},{"location":"OOP/paradigma-programacao/#paradigma-funcional","title":"Paradigma Funcional","text":"<p>Baseado no conceito de fun\u00e7\u00f5es matem\u00e1ticas. Enfatiza o processamento de valores atrav\u00e9s do uso de express\u00f5es e fun\u00e7\u00f5es. Tais fun\u00e7\u00f5es podem ser passadas como par\u00e2metros de outras fun\u00e7\u00f5es. Um exemplo de Linguagem que usa esse procedimento \u00e9 o LISP e seu dialeto Scheme, usada em softwares como AutoCAAD, Audacity, GIMP e Emacs.</p> <p>Outra linguagem funcinoal famosa \u00e9 o R, usado para estat\u00edstica. </p> <p>Uma caracter\u00edstica importante \u00e9 a recursividade, onde uma fun\u00e7\u00e3o invoca a si mesma, permitindo a cria\u00e7\u00e3o de um la\u00e7o.</p>"},{"location":"OOP/paradigma-programacao/#paradigma-orientado-a-objetos","title":"Paradigma Orientado \u00e0 Objetos","text":"<p>Um objeto \u00e9 uma entidade abstrata que cont\u00e9m dados e algoritmos, dados s\u00e3o o estado de um objeto, j\u00e1 os algoritmos s\u00e3o o comportamento desse objeto. </p> <p>As classes s\u00e3o unidades b\u00e1sicas da Orienta\u00e7\u00e3o a Objetos. Objetos similares s\u00e3o agrupados em uma mesma classe, \u00e9 poss\u00edvel criar objetos a partir da classe, como tamb\u00e9m chamamos a cria\u00e7\u00e3o de um objeto de instancia\u00e7\u00e3o.</p> <p>Diferentes objetos de uma mesma classe podem conter valores de estado diferentes, ou seja, o estado de um objeto \u00e9 mantido privado de um outro objeto. E \u00e9 atrav\u00e9s dos m\u00e9todos que acessamos/alteramos esses valores (estados).</p> <p>Um m\u00e9todo especial \u00e9 o m\u00e9todo construtor de uma classe: ele fornece valores iniciais ao objeto, ou permite que tais valores sejam determinados na cria\u00e7\u00e3o. Uma classe pode ter mais de um construtor. </p> <p>O paradigma de Orienta\u00e7\u00e3o a Objetos \u00e9 pr\u00e1tico, natural e intuitivo, quando pensamos na rela\u00e7\u00e3o com os problemas reais. Mesmo assim, pode ser complexo seu aprendizado, levando algum tempo para compreender os seus principais conceitos: abstra\u00e7\u00e3o, encapsulamento, polimorfismo e heran\u00e7a. </p>"},{"location":"OOP/paradigma-programacao/#referencias","title":"Refer\u00eancias","text":"<ul> <li>PUCRS - Paradigma Imperativo</li> <li>Wikipedia - Programa\u00e7\u00e3o Imperativa</li> <li>guia.dev -  Pradigmas de Programa\u00e7\u00e3o</li> <li>Profa. Isabel Harb Manssour - Paradigmas de Linguagem I</li> </ul>"},{"location":"OOP/quatro-pilares/","title":"Paradigma Orientado \u00e0 Objetos e Java","text":"<p>Apesar de ser comum ouvir falar em Java como uma linguagem orientada a objetos, isso n\u00e3o \u00e9 verdade, pois o Java tamb\u00e9m pode ser usado como uma linguagem procedural. A Orienta\u00e7\u00e3o a Objetos \u00e9 pertinente ao paradigma, enquanto a linguagem \u00e9 respons\u00e1vel por fornecer meios de implementar aquele paradigma. Iremos ver em resumo os quatro pilares da POO.</p>"},{"location":"OOP/quatro-pilares/#abstracao","title":"Abstra\u00e7\u00e3o","text":"<p>Programas de computador podem variar de algumas linhas \u00e0 centenas de milhares de linhas. Para facilitar a manuten\u00e7\u00e3o de um programa monolito \u00e9 comum decompor o programa em subprogramas menores. A abstra\u00e7\u00e3o \u00e9 o processo de expor detalhes essenciais de uma entidade, enquanto os detalhes irrelevantes s\u00e3o ignorados, facilitando a manuten\u00e7\u00e3o e o entendimento. A relev\u00e2ncia de um detalhe est\u00e1 ligada a seu contexto, por exemplo, pensemos num teclado, o contexto para o usu\u00e1rio \u00e9 o mais simples poss\u00edvel, ele apenas deve ter acesso \u00e0s teclas e pronto, j\u00e1 para o contexto da m\u00e1quina o mais importante \u00e9 o circuito el\u00e9trico interno do teclado, aquilo que fica por tr\u00e1s das teclas, oculto ao usu\u00e1rio.</p>"},{"location":"OOP/quatro-pilares/#encapsulamento","title":"Encapsulamento","text":"<p>Linguagens de programa\u00e7\u00e3o d\u00e3o suporte a encapsulamento de diversas maneiras: um procedimento \u00e9 um encapsulamento de um conjunto de passos para executar uma tarefa; um vetor (array) \u00e9 o encapsulamento de diversos elementos; etc. Na Programa\u00e7\u00e3o Orientada \u00e0 Objetos, o encapsulamento \u00e9 o processo de agrupar dados e procedimentos em uma entidade chamada de classe.</p> <p>No Java voc\u00ea pode encapsular dados e procedimentos dentro de uma classe, \u00e9 poss\u00edvel encapsular classes dentro de pacotes (packages) e pacotes dentro de um m\u00f3dulo.</p>"},{"location":"OOP/quatro-pilares/#heranca","title":"Heran\u00e7a","text":"<p>O mecanismo de heran\u00e7a permite que voc\u00ea defina uma nova abstra\u00e7\u00e3o atrav\u00e9s de uma abstra\u00e7\u00e3o j\u00e1 existente. A nova abstra\u00e7\u00e3o pode ser chamada de subtipo, subclasse ou classe derivada, enquanto a classe origin\u00e1ria \u00e9 chamada de supertipo, superclasse,\u00a0 como tamb\u00e9m, costuma-se referenciar esta por classe-pai e aquela por classe-filha. Ao n\u00edvel da programa\u00e7\u00e3o, a heran\u00e7a prov\u00ea um mecanismo de reutiliza\u00e7\u00e3o de c\u00f3digo. A partir da deriva\u00e7\u00e3o de uma classe gen\u00e9rica \u00e9 poss\u00edvel criar classes espec\u00edficas.</p>"},{"location":"OOP/quatro-pilares/#polimorfismo","title":"Polimorfismo","text":"<p>Permite que uma entidade assuma diferentes significados em diferentes contextos, com o prop\u00f3sito de se escrever c\u00f3digos que sejam reutiliz\u00e1veis e de f\u00e1cil manuten\u00e7\u00e3o. A capacidade polim\u00f3rfica decorre diretamente da heran\u00e7a, pois permite que uma vari\u00e1vel de refer\u00eancia e o objeto sejam diferentes, isso ocorre atrav\u00e9s da sobrescrita de m\u00e9todos, quando a subclasse sobrescreve o m\u00e9todo implementado na superclasse.</p> <p>O polimorfismo ainda pode ser dividido em dois tipos:</p> <ul> <li>Ad hoc: define uma interface comum para um conjunto arbitr\u00e1rio de tipos especificados individualmente.</li> <li>Universal : n\u00e3o especifica tipos concretos e, em vez disso, usa s\u00edmbolos abstratos que podem substituir qualquer tipo.</li> </ul>"},{"location":"OOP/quatro-pilares/#referencias","title":"Refer\u00eancias","text":"<ul> <li> <p>https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</p> </li> <li> <p>FIAP - Nano Cursos - Java Fundamentos - https://on.fiap.com.br/</p> </li> <li> <p>SHARAN, Kishori; DAVIS, Adam L. . Beginning Java 17 Fundamentals: Object-Oriented Programming in Java 17. Third edition. Apress.</p> </li> </ul>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/algo/","title":"Algoritmos e Programa\u00e7\u00e3o de Computadores","text":"<pre><code>estudos referente a COM110 e COM120\n</code></pre> <p>Ementa:</p> <p>Algoritmos: caracteriza\u00e7\u00e3o, nota\u00e7\u00e3o, estruturas b\u00e1sicas. Conceitos de linguagens algor\u00edtmicas: express\u00f5es; comandos sequenciais, seletivos e repetitivos; entrada/sa\u00edda; vari\u00e1veis; constantes; listas, vetores (listas em Python), matrizes, strings; fun\u00e7\u00f5es; escopo de vari\u00e1veis; Desenvolvimento, depura\u00e7\u00e3o, no\u00e7\u00f5es de testes automatizados e documenta\u00e7\u00e3o de programas utilizando linguagem Python.</p> <p>Depura\u00e7\u00e3o de programas. Conceito e uso de pilhas, filas, listas, \u00e1rvores. Recurs\u00e3o. Algoritmos de Ordena\u00e7\u00e3o e Busca. No\u00e7\u00f5es de gerenciamento de mem\u00f3ria e manipula\u00e7\u00e3o de listas. M\u00f3dulos e no\u00e7\u00f5es de objetos, arquivos. Modulariza\u00e7\u00e3o (m\u00f3dulos, bibliotecas, interfaces). Uso de APIs b\u00e1sicas da WEB e manipula\u00e7\u00e3o de dados (JSON).Cria\u00e7\u00e3o de interfaces gr\u00e1ficas simples. Controle de Vers\u00e3o (git). Testes automatizados.</p> <p>Bibliografia Base:</p> <pre><code>PERKOVIC, Ljubomir. Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Usando Python - Um Foco no Desenvolvimento de Aplica\u00e7\u00f5es. 1 ed. LTC. 2016.\nMiller, Brad; Ranum, David. Como Pensar como um Cientista da Computa\u00e7\u00e3o. 2019. Dispon\u00edvel em: https://panda.ime.usp.br/pensepy/static/pensepy/index.html\n</code></pre> <p>Bibliografia Complementar:</p> <pre><code>FREEMAN, Eric. Use a Cabe\u00e7a! Aprenda Programar. 1 ed. Alta Books. 2019.\nDOWNEY, Allen. Pense Python: pense como um Cientista da Computa\u00e7\u00e3o. 1 ed. Novatec. 2016.\nKon, Fabio. Introdu\u00e7\u00e3o \u00e0 Ci\u00eancia da Computa\u00e7\u00e3o em Python. Coursera. 2019. Dispon\u00edvel online em: https://www.coursera.org/learn/ciencia-computacao- python-conceitos\nShaw, Zed A. Aprenda Python 3 do Jeito Certo: uma Introdu\u00e7\u00e3o Muito Simples ao Incr\u00edvel Mundo dos Computadores e da Codifica\u00e7\u00e3o. 2019. Alta Books\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/","title":"Manipula\u00e7\u00e3o de Arquivos","text":"<p>A manipula\u00e7\u00e3o de arquivos sempre foi um tema central na computa\u00e7\u00e3o, pois afinal, n\u00e3o \u00e9 muito \u00fatil ter que executar repetidas vezes o mesmo c\u00f3digo para manter um hist\u00f3rico de resultados, j\u00e1 que, a linguagem de programa\u00e7\u00e3o em si, n\u00e3o \u00e9 capaz de armazenar dados.</p> <p>A manipula\u00e7\u00e3o de arquivos \u00e9 um recurso poderoso que serve basicamente para transferir informa\u00e7\u00e3o para algum arquivo de texto, que seja facilmente guardado por qualquer tipo de Sistema Operacional (*.html, *.txt, *.csv, *.md, etc.). Mas por se tratar do uso direto de recursos da m\u00e1quina,  devemos monitorar esse uso para n\u00e3o prejudicar apenas a aplica\u00e7\u00e3o mas o sistema operacional de quem a usa. </p> <p>Mas por que manipular arquivos \u00e9 t\u00e3o especial? Porque permite de maneira simples a persist\u00eancia dos dados, ou seja, estamos transferindo o que o Python armazena na RAM para um HD/SSD.</p> <p>Como no simples exemplo abaixo:  <pre><code>mensagem = \"Variavel para gravar informacao em tipo string\"\nwith open(\"output.txt\", 'w') as arquivo:\narquivo.write(mensagem)\n</code></pre> Como resultado deste comando temos a transfer\u00eancia do valor de string que a vari\u00e1vel <code>mensagem</code> assumiu temporariamente na mem\u00f3ria RAM e escrevemos em um HD/SSD, de modo a preservar a informa\u00e7\u00e3o, visto que o linguagens de programa\u00e7\u00e3o isoladas n\u00e3o possuem poder de persist\u00eancia de dados, precisando armazenar em arquivos diretamente no Sistema Operacional, ou, em softwares especializadas, como Bancos de Dados.</p> <p>Sem precisar importar nenhum m\u00f3dulo espec\u00edfico utilizamos a fun\u00e7\u00e3o <code>open()</code> que retorna um objeto de manipula\u00e7\u00e3o de arquivos.</p> <p>Dentro da fun\u00e7\u00e3o <code>open()</code>, passamos apenas dois par\u00e2metros: o nome do arquivo e o modo de abertura, e este arquivo ficou armazenada em uma vari\u00e1vel do nosso programa (<code>arquivo</code>)</p> <p>Alguns podem pensar que a fun\u00e7\u00e7\u00e3o <code>open()</code> ir\u00e1 abrir o arquivo no sistema operacional, mas n\u00e3o, ela apenas cria uma conex\u00e3o entre a mem\u00f3ria RAM e o HD/SSD.</p> <p>Usamos o m\u00e9todo <code>write()</code> para escrever dentro do arquivo, passando como argumento uma string ou mesmo uma outra vari\u00e1vel que aponte para uma string.</p> <p>Com o <code>with</code> no in\u00edcio da express\u00e3o estamos indicando que estamos trabalhando em contexto, ou seja, o arquivo ser\u00e1 automaticamente fechado ap\u00f3s o uso. Isso simplesmente nos ajuda a usar com precis\u00e3o os recursos da m\u00e1quina.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#criando-um-arquivo-txt-a-partir-de-uma-api","title":"Criando um arquivo .txt a partir de uma API","text":"<p>Para tornar o uso de arquivos veross\u00edmil \u00e0 realidade vamos dar um exemplo bem casual. Suponha que voc\u00ea precise consultar um CEP e armazenaro bairro, a cidade e a UF.</p> <pre><code>import requests\nmensagem = \"\\n Ol\u00e1, digite o cep que desejas armazenar: \\n\"\ncep = input(mensagem)\nurl = f\"http://viacep.com.br/ws/{cep}/json/\"\nretorno = requests.get(url)\nconteudo = retorno.json()\nbairro = conteudo['bairro']\nlocalidade = conteudo['localidade']\nuf = conteudo['uf']\nendereco = f\"{bairro} \\t {localidade} \\t {uf} \"\nwith open('enderecos.txt', 'a') as arquivo:\narquivo.write(endereco)\narquivo.write('\\n')\n</code></pre> <p>Com o m\u00f3dulo requests fazemos uma requisi\u00e7\u00e3o \u00e0 URL da API ViaCep, e passamos atrav\u00e9s de uma <code>f-string</code>, a vari\u00e1vel contendo o n\u00famero do CEP em formato string.</p> <p>Recebemos dessa requisi\u00e7\u00e3o um objeto <code>&lt;class 'requests.models.Response'&gt;</code>, que cont\u00e9m justamente o c\u00f3digo da resposta. Se recebermos <code>&lt;Response [200]&gt;</code> , perfeito, podemos prosseguir.</p> <p>O pr\u00f3ximo passo \u00e9 transformar esse <code>requests.models</code> em um dicion\u00e1rio no python utilizando o m\u00e9todo <code>json()</code>. A partir de agora podemos manipular o conte\u00fado propriamente dito da nossa requisi\u00e7\u00e3o, pois agora estamos trabalhando com um objeto de tipo <code>&lt;class 'dict'&gt;</code>.</p> <p>A cada vez que executarmos este c\u00f3digo e passarmos um cep v\u00e1lido, ficar\u00e1 salvo em um arquivo chamado 'enderecos.txt' as informa\u00e7\u00f5es que selecionamos.</p> <p></p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#observacao","title":"Observa\u00e7\u00e3o","text":"<p>A proposta desse c\u00f3digo era apenas para explorar um pouco da combina\u00e7\u00e3o do m\u00f3dulo requests (que deve ser instalado via pip) e a manipula\u00e7\u00e3o de arquivos, usando m\u00e9todos diretamente do Python, como o open(), write(), readlines() entre outros.</p> <p>H\u00e1 muito a se fazer com respeito da tratativa de exce\u00e7\u00f5es. A primeira e mais \u00f3bvia seria que dentro do input apenas fosem aceitos apenas n\u00fameros e que o tamanho dessa string fosse igual a 8.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/arquivos/#referencias-e-links-uteis","title":"Refer\u00eancias e links \u00fateis","text":"<ul> <li>https://pypi.org/project/requests/</li> <li>https://viacep.com.br</li> </ul>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/","title":"Lista de Exerc\u00edcios Simples","text":"<p> Exerc\u00edcios cl\u00e1ssicos da programa\u00e7\u00e3o resolvidos com poucas linhas de c\u00f3digo.</p> <p> A resolu\u00e7\u00e3o comentada voc\u00ea encontra no reposit\u00f3rio do Github.</p> <p> Caso voc\u00ea encontre um erro ou outra maneira de fazer, e quiser colaborar, voc\u00ea pode abrir uma Issue ou mesmo enviar um Pull Request. Entre em contato para saber mais.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/#lista-exercicios","title":"Lista Exerc\u00edcios:","text":"<ul> <li>exerc_01 - Calcular a dura\u00e7\u00e3o de anos de um planeta. </li> <li>exerc_02 - Calcular a soma de d\u00edgitos de um n\u00famero rand\u00f4mico de 03 d\u00edgitos. </li> <li>exerc_03 - Achar a \u00e1rea e o per\u00edmetro de um tri\u00e2ngulo reto. </li> <li>exerc_04 - Achar \u00e1rea de superf\u00edcie de um cilindro. </li> <li>exerc_05 - Achar per\u00edmetro e \u00e1rea de um c\u00edrculo. </li> <li>exerc_06 - Achar a equa\u00e7\u00e3o da linha (y=kx+b) passando por dois pontos conhecidos. </li> <li>exerc_07 - Determinar o n\u00famero da letra no alfabeto. </li> <li>exerc_08 - O n\u00famero \u00e9 negativo ou positivo? </li> <li>exerc_09 - O n\u00famero \u00e9 par ou \u00edmpar? </li> <li>exerc_10 - Determinar o m\u00e1ximo inteiro de tr\u00eas. </li> <li>exerc_11 - Checando a divisibilidade de um inteiro por outro. </li> <li>exerc_12 - Convertendo Celsiu para Farenheit. </li> <li>exerc_13 - Calcular massa, densidade ou volume. </li> <li>exerc_14 - Em qual quadrante est\u00e1 o ponto? </li> <li>exerc_15 - Determinar quando um ano \u00e9 bissexto. </li> <li>exerc_16 - Resolver equa\u00e7\u00e3o de segundo grau. </li> <li>exerc_17 - Adivinhar o n\u00famero rand\u00f4mico </li> <li>exerc_18 - Sa\u00edda dos caracteres da tabela ASCII. </li> <li>exerc_19 - Imprimir uma tabuada.  </li> <li>exerc_20 - A soma e o produto dos d\u00edgitos de um n\u00famero. </li> <li>exerc_21 - Facorial. </li> <li>exerc_22 - Sequ\u00eancia de Fibonacci. </li> <li>exerc_23 - Achar uma equa\u00e7\u00e3o quadr\u00e1tica que tenha solu\u00e7\u00f5es em uma faixa espec\u00edfica de coeficientes. </li> <li>exerc_24 - Inverter a ordem dos d\u00edgitos de um n\u00famero inteiro. </li> <li>exerc_25 - Selecionando inteiros de uma string. </li> <li>exerc_26 - Determinar a porcentagem de min\u00fasculas e mai\u00fasculas de uma string. </li> <li>exerc_27 - Preencher uma array com n\u00fameros rand\u00f4micos. </li> <li>exerc_28 - Separar positivos e negativos de uma array. </li> <li>exerc_29 - Disribuir valores por faixa. </li> <li>exerc_30 - Achar a palavra mais longa de uma string. </li> <li>exerc_31 - Converter um texto para uma lista de palavras sem pontua\u00e7\u00e3o. </li> <li>exerc_32 - Bubble sort -  </li> <li>exerc_33 - Selection sort </li> <li>exerc_34 - O Crivo de Erat\u00f3stenes </li> <li>exerc_35 - Classificar palavras em uma string pelo n\u00famero de caract\u00e9res. </li> <li>exerc_36 - Preencher uma matrix com n\u00fameros rand\u00f4micos. </li> <li>exerc_37 - Somar itens de todas linhas e colunas de uma matriz. </li> <li>exerc_38 - A soma de elementos da diagonal de uma matriz. </li> <li>exerc_39 - D\u00edgitos estilizados com Unicode. </li> <li>exerc_40 - Calcular pre\u00e7o por quantidade de produtos. </li> <li>exerc_41 - Criar dicion\u00e1rio de duas listas. </li> <li>exerc_42 - Deletar um item rand\u00f4mico de um dicion\u00e1rios. </li> </ul>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/exercicios-simples/#exercicios-utilizando-funcoes","title":"Exerc\u00edcios utilizando fun\u00e7\u00f5es:","text":"<ul> <li>exerc_43 - Achar m\u00e9dia de dois n\u00fameros. </li> <li>exerc_44 - Preencher uma lista com n\u00fameros. </li> <li>exerc_45 - Calcular m\u00e9dia aritm\u00e9tica de uma lista de elementos. </li> <li>exerc_46 - Sequ\u00eancia de Fibonacci. </li> <li>exerc_47 - Sequ\u00eancia de FIbonacci (recurs\u00e3o). </li> <li>exerc_48 - Fatorial (recurs\u00e3o). </li> <li>exerc_49 - Inverter a ordem de uma string. </li> <li>exerc_50 - Busca Bin\u00e1ria. </li> <li>exerc_51 - Checar se um n\u00famero \u00e9 primo. </li> </ul>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/","title":"Python - Perguntas e Respostas","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-que-e-python","title":"O que \u00e9 Python?","text":"<p>\u00c9 uma linguagem de alto n\u00edvel, interpretada, interativa e orientada a objetos. Python foi projetado para ser leg\u00edvel. Ela usa palavras em ingl\u00eas frequentemente onde as outras linguagens do tipo C usam pontua\u00e7\u00e3o, e tem menos elementos sint\u00e1ticos.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-o-nome-de-alguns-recursos-do-python","title":"Qual o nome de alguns recursos do Python?","text":"<ul> <li>Suporte a Orienta\u00e7\u00e3o a Objeto mas tamb\u00e9m a programa\u00e7\u00e3o procedural.</li> <li>pode ser usada como linguagem de script ou como c\u00f3digo compilado para aplica\u00e7\u00f5es maiores.</li> <li>Alto n\u00edvel de dinamismo da tipagem de dados e da checagem do tipo de dados.</li> <li>Coletor de lixo, mecanismo de limpar a mem\u00f3rio do programa, \u00e9 autom\u00e1tico, nativo da linguagem.</li> </ul>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-e-o-proposito-da-variavel-de-ambiente-pythonpath","title":"Qual \u00e9 o prop\u00f3sito da vari\u00e1vel de ambiente PYTHONPATH ?","text":"<p>Tem um papel similar ao PATH. Essas vari\u00e1veis dizem ao Python onde locar os arquivos de m\u00f3dulos importados. Tamb\u00e9m deve incluir o diret\u00f3rio da biblioteca fonte e os diret\u00f3rios contendo o c\u00f3digo fonte do Python. PYTHONPATH \u00e9 pr\u00e9-configurado durante a instala\u00e7\u00e3o.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#quais-sao-os-tipos-de-dados-mais-importantes-do-python","title":"Quais s\u00e3o os tipos de dados mais importantes do Python?","text":"<p>Numbers , String, List, Tuple, Dictionary.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-a-diferenca-entre-listas-e-tuplas","title":"Qual a diferen\u00e7a entre listas e tuplas ?","text":"<p>A principal diferen\u00e7a entre listas e tuplas est\u00e1 na sintaxe: listas usam \"[ ]\" e tuplas usam \"( )\". Outra import\u00e2ncia fundamental \u00e9 que tuplas s\u00e3o apenas dados de leitura, elas s\u00e3o inalter\u00e1veis. </p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-que-sao-dicionarios-em-python","title":"O que s\u00e3o dicion\u00e1rios em Python ?","text":"<p>\u00c9 um tipo de tabela hash. Dicion\u00e1rios trabalham como arrays associativos consistindo de pares de chave-valor. Uma chave ser\u00e1 um tipo de dado e um valor, por sua vez, pode ser um Objeto arbitr\u00e1rio.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-criar-um-dicionario","title":"Como criar um dicion\u00e1rio ?","text":"<p>Dicion\u00e1rios s\u00e3o identificados por serem envolvidos com {} e a sintaxe \u00e9: </p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-acessar-chaves-de-um-dicionarios","title":"Como acessar chaves de um dicion\u00e1rios ?","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-converter-um-dado-tipo-string-para-do-tipo-int","title":"Como converter um dado tipo string para do tipo int ?","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-pegar-um-numero-ramdomico-dentro-de-um-certo-alcance","title":"Como pegar um n\u00famero ramd\u00f4mico dentro de um certo alcance?","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#como-checar-que-todos-os-caracteres-de-uma-string-sao-alfanumericos-ou-apenas-numericos","title":"Como checar que todos os caracteres de uma string s\u00e3o alfanum\u00e9ricos ou apenas num\u00e9ricos?","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#o-python-possui-um-compilador-proprio","title":"O Python possui um compilador pr\u00f3prio ?","text":"<p>Sim, e n\u00e3o precisamos nos procupar com isso, pois o compilador do Pyhton \u00e9 autom\u00e1tico.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/perguntas-e-respostas-python/#qual-versao-do-python-devo-usar","title":"Qual vers\u00e3o do Python devo usar ?","text":"<p>Em ambiente de estudos/testes \u00e9 comum usar a vers\u00e3o mais recente (no momento 3.10), mas a depender do projeto voc\u00ea poder\u00e1 usar alguma 3.x, e at\u00e9 mesmo 2.x.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/teste/","title":"Teste","text":""},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/teste/#exemplioficando-criacao-de-uma-page-para-p-o-portal","title":"exemplioficando cria\u00e7\u00e3o de uma page para p o portal","text":"<ul> <li>item 01</li> <li>item 02</li> <li>item 03</li> </ul> <p>\ud83d\udc0d \u2615</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/","title":"O M\u00f3dulo Turtle","text":"<p>Turtle \u00e9 um m\u00f3dulo embutido (built-in) do Python que tem por objetivo ensinar programa\u00e7\u00e3o \u00e0 crian\u00e7as. </p> <p>Com este m\u00f3dulo temos essencialmente duas classes: Screen() e Turtle().</p> <p>Aqui est\u00e3o alguns exemplos do que \u00e9 poss\u00edvel fazer com a Tartaruga. Estes exemplos foram retirados do Portal Acervo Lima,  que por sua vez s\u00e3o tradu\u00e7\u00f5es do portal GeeksforGeeks. Todos exemplos est\u00e3o sob licen\u00e7a CreativeCommons.</p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#relogio-digital","title":"Rel\u00f3gio Digital","text":"<pre><code>import time\nimport datetime as dt\nimport turtle\n# cria duas inst\u00e2ncias do objeto turtle\nt = turtle.Turtle()  # para a hora em si\nt1 = turtle.Turtle()  # para a borda\n# cria a tela (SCREEN)\ns = turtle.Screen()\n# escolhe a cor de fundo da tela\ns.bgcolor(\"green\")\n# cria tr\u00eas vari\u00e1veis que armazenam a hora atual\nsegundos = dt.datetime.now().second\nminutos = dt.datetime.now().minute\nhora = dt.datetime.now().hour\n# define a grossura (width) e a cor da caneta da borda para a inst\u00e2ncia t1\nt1.pensize(3)\nt1.color('black')\nt1.penup()\nt1.goto(-20, 0)\nt1.pendown()\n# desenha a borda\nfor i in range(2):\nt1.forward(200)  # dist\u00e2ncia horizontal\nt1.left(90)  # graus para a esquerda\nt1.forward(70)  # dist\u00e2ncia vertical\nt1.left(90)  # retorna para direita\n# esconde a tartaruga t1\nt1.hideturtle()\n# cria um loop infinito que mant\u00e9m a hora atualizada\nwhile True:\n# mant\u00e9m escondida a tartaruga t\nt.hideturtle()\nt.clear()\n# usa o m\u00e9todo write() passando as horas, minutos e segundo\n# usa-se o zfill() para que sempre tenham duas casas, p.ex. quando for \"2 horas\" mostrar\u00e1 \"02 horas\"\n# e define o par\u00e2metro font=()\nt.write(str(hora).zfill(2)\n+ \":\" + str(minutos).zfill(2) + \":\"\n+ str(segundos).zfill(2),\nfont=(\"Arial Narrow\", 35, \"bold\"))\n# pausa o programa por 01 segundo\ntime.sleep(1)\n# aumenta manualmente os segundos\nsegundos += 1\n# l\u00f3gica de um rel\u00f3gio digital\nif segundos == 60:\nsegundos = 0\nminutos += 1\nif minutos == 60:\nminutos = 0\nhora += 1\nif hora == 24:\nhora = 1\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#arco-iris","title":"Arco-\u00edris","text":"<pre><code>import turtle\nimport time\nsc = turtle.Screen()\npen = turtle.Turtle()\ndef semi_circle(col, rad, val):\n# atribui cor \u00e0 caneta\npen.color(col)\n# desenha um semicirculo com o m\u00e9todo circle()\n# no caso, -180 \u00e9 um par\u00e2metro opcional, por default circle() desenha um circulo completo.\npen.circle(rad, -180)\n# levanta a caneta, ou seja, N\u00c3O desenha enquanto se move\npen.up()\n# reposiciona a caneta\npen.setpos(val, 0)\n# abaixa a caneta e reposiciona o \u00e2ngulo\npen.down()\npen.right(180)\ncol = ['violet', 'indigo', 'blue',\n'green', 'yellow', 'orange', 'red']\n# tamanho da tela\nsc.setup(600, 600)\n# cor de fundo\nsc.bgcolor('#d6ffff')\npen.right(90)  # angulo a direita\npen.width(10)  # espessura do contorno\npen.speed(7)  # velocidade do desenho\n# cria um la\u00e7o iterativo que ir\u00e1 ser executadoi 07 vezes\n# para cada itera\u00e7\u00e3o ser\u00e1 selecionado uma cor diferente e\n# a caneta ser\u00e1 reposicionada\nfor i in range(7):\nsemi_circle(col[i], 10 * (\ni + 8), -10 * (i + 1))\ntime.sleep(1)\npen.hideturtle()\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#octogono","title":"Oct\u00f3gono","text":"<p> <pre><code>import turtle\nimport time\nws = turtle.Screen()\nt = turtle.Turtle()\nt.pencolor(\"blue\")\nt.speed(3)\nt.pensize(5)\n# o loop abaixo ser\u00e1 executado 08 vezes\n# a cada itera\u00e7\u00e3o a caneta andar\u00e1 100 e depois girar\u00e1 45\u00ba \u00e0 esquerda\nfor i in range(8):\nt.forward(100)\nt.left(45)\ntime.sleep(2)\n</code></pre></p>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#teia-de-aranha","title":"Teia de aranha","text":"<pre><code>\"\"\"\"\nO la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia,\nenquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas.\n\"\"\"\n# importando o m\u00f3dulo turtle como \"t\", n\u00e3o precisamos instanciar a classe\nimport turtle as t\nimport time\nt.speed(2)\n# A tartaruga \u00e9 movida para frente e para tr\u00e1s para construir primeiro os fios.\n# A tartaruga \u00e9 girada em um \u00e2ngulo de 60 graus para desenhar cada fio .\nfor i in range(6):\nt.forward(100)\nt.backward(100)\nt.right(60)\nside = 50  # O comprimento da rosca espiral \u00e9 definido como 50\nt.fillcolor(\"Yellow\")\nt.begin_fill()\n# O la\u00e7o interno se preocupa com a constru\u00e7\u00e3o de uma \u00fanica espiral em espiral e com as camadas da teia,\n# enquanto o la\u00e7o externo controla o n\u00famero de espirais a serem constru\u00eddas.\nfor i in range(10):\nt.penup()\nt.goto(0, 0)\nt.pendown()\nt.setheading(0)\nt.forward(side)\nt.right(120)\nfor j in range(6):\nt.forward(side - 2)\nt.right(60)\nside = side - 10  # reduzimos o tamanho em 10 a cada itera\u00e7\u00e3o.\nt.end_fill()\ntime.sleep(2)\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#grafico-de-barras","title":"Gr\u00e1fico de Barras","text":"<pre><code># Python program to draw a turtle\nimport turtle\n# Function that draws the turtle\ndef desenha_barras(t, height, color):\n# Come\u00e7a o preenchimento\nt.fillcolor(color)\nt.begin_fill()\nt.left(90)\nt.forward(height)\nt.write(str(height))\nt.right(90)\nt.forward(40)\nt.right(90)\nt.forward(height)\nt.left(90)\n# para o preenchimento\nt.end_fill()\n# xs \u00e9 uma lista que recebe n\u00famero de barras e suas alturas\nxs = [48, 117, 150, 96, 134, 160, 90]\nclrs = [\"green\", \"red\", \"yellow\", \"black\",\n\"pink\", \"brown\", \"blue\"]\nmaxheight = max(xs)\nnumbars = len(xs)\nborder = 7\n# Set up the window and its\n# attributes\nwn = turtle.Screen()\nwn.setworldcoordinates(0 - border, 0 - border,\n80 * numbars + border,\nmaxheight + border)\n# Cria inst\u00e2ncia da classe\ntess = turtle.Turtle()\ntess.pensize(3)\nfor i in range(len(xs)):\ndesenha_barras(tess, xs[i],\nclrs[i])\nwn.exitonclick()```\n## Estrela \n![estrela](https://user-images.githubusercontent.com/72423464/163490419-5e9b995a-5e73-4065-b7f1-a2a4ce163318.gif)\n```python\nestrela.py\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#smile","title":"Smile","text":"<pre><code>import turtle\nimport time\npen = turtle.Turtle()\ndef eye(col, rad):\npen.down()\npen.fillcolor(col)\npen.begin_fill()\npen.circle(rad)\npen.end_fill()\npen.up()\npen.fillcolor('yellow')\npen.begin_fill()\npen.circle(100)\npen.end_fill()\npen.up()\npen.goto(-40, 120)\neye('white', 15)\npen.goto(-37, 125)\neye('black', 5)\npen.goto(40, 120)\neye('white', 15)\npen.goto(40, 125)\neye('black', 5)\npen.goto(0, 75)\neye('black', 6)\npen.goto(-40, 85)\npen.down()\npen.right(90)\npen.circle(40, 180)\npen.up()\npen.goto(-10, 45)\npen.down()\npen.right(180)\npen.fillcolor('red')\npen.begin_fill()\npen.circle(10, 180)\npen.end_fill()\npen.hideturtle()\ntime.sleep(2)\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#relogio","title":"Rel\u00f3gio","text":"<pre><code>import turtle\nimport time\nscreen = turtle.Screen()\n# configura\u00e7\u00e3o da tela\nscreen.setup(500, 500)\n# inst\u00e2ncia turtle\nclk = turtle.Turtle()\n# cor da tartaruga\nclk.color('Green')\n# espessura contorno\nclk.width(4)\ndef draw_hour_hand():\nclk.penup()\nclk.home()\nclk.right(90)\nclk.pendown()\nclk.forward(100)\n# valores numericos do relogio\nval = 0\n# loop para imprimir numeros\nfor i in range(12):\n# incrementa 1\nval += 1\n# move a tartaruga\nclk.penup()\n# movimento circular\nclk.setheading(-30 * (i + 3) + 75)\nclk.forward(22)\n# coloca caneta na superf\u00edcie\nclk.pendown()\n# move para linha tracejada\nclk.forward(15)\nclk.penup()\nclk.forward(20)\n# escreve numeros\nclk.write(str(val), align=\"center\",\nfont=(\"Arial\",\n12, \"normal\"))\nclk.setpos(2, -112)\nclk.pendown()\nclk.width(2)\n# preencher de verde\nclk.fillcolor('Green')\n# come\u00e7a preenchimento\nclk.begin_fill()\n# faz circulo de radius 5\nclk.circle(5)\n# fim preenchimento\nclk.end_fill()\nclk.penup()\ndraw_hour_hand()\nclk.setpos(-20, -64)\nclk.pendown()\nclk.penup()\n# seleciona posi\u00e7\u00e3o e escreve texto\nclk.setpos(-30, -170)\nclk.pendown()\nclk.write(' Rel\u00f3gio com \\n Turtle', font=(\"Arial\", 12,\n\"normal\"))\nclk.hideturtle()\nturtle.done()\ntime.sleep(2)\n</code></pre>"},{"location":"algoritmos_e_programa%C3%A7%C3%A3o/turtle/#espirografo","title":"Espir\u00f3grafo","text":"<pre><code>import turtle as tt\nimport time\ntt.bgcolor('black')\ntt.pensize(2)\ntt.speed(15)\nfor i in range(6):\nfor color in ('red', 'magenta', 'blue',\n'cyan', 'green', 'white',\n'yellow'):\ntt.color(color)\ntt.circle(100)\ntt.left(10)\ntt.hideturtle()\ntime.sleep(2)\n</code></pre>"},{"location":"banco_de_dados/entidade-relacionamento/","title":"Banco de Dados Entidade-Relacionamento","text":"<ul> <li>O Modelo Entidade-Relacionamento (MER) \u00e9 um modelo de dados de alto-n\u00edvel criado com o objetivo de representar a sem\u00e2ntica associada aos dados do minimundo. </li> <li>O modelo de dados ER (MER) n\u00e3o possui liga\u00e7\u00e3o nenhum com SGBD.</li> <li>\u00c9 utilizado para apresentar o que foi informado no levantamento de requisitos.</li> <li>\u00c9 utilizado para na fase de projeto conceitual, onde o esquema conceitual do banco de dados da aplica\u00e7\u00e3o \u00e9 concebido. </li> <li>O esquema conceitual criado usando-se o MER \u00e9 chamado Diagrama Entidade-Relacionamento (DER). <pre><code># MER:  Conjunto de conceitos e elementos de\n        modelagem que o projetista de banco\n        de dados precisa conhecer.\n\n# DER:  Resultado do processo de modelagem\n        executado pelo projetista de dados\n        que conhece o MER.\n</code></pre></li> <li>O objeto mais elementar que o MER representa \u00e9 a entidade.</li> <li>Cada Entidade tem propriedades particulares que s\u00e3o chamadas de Atributos.</li> </ul>"},{"location":"banco_de_dados/entidade-relacionamento/#atributo-chave","title":"Atributo-Chave","text":"<ul> <li>Todo Tipo de Entidade deve ter um atributo-chave, seja ele um atributo simples ou composto.</li> <li>Os valores de um atributo-chave devem ser distintos. Esta unicidade deve valer para quaisquer extens\u00f5es desse tipo de entidade. </li> </ul> <p>Restri\u00e7\u00e3o de unicidade: pro\u00edbe que duas entidades, em um mesmo conjunto entidade, tenham os mesmos valores no seu atributo chave.</p>"},{"location":"banco_de_dados/entidade-relacionamento/#diagrama-entidade-relacionamento-der","title":"Diagrama Entidade-Relacionamento (DER)","text":""},{"location":"banco_de_dados/entidade-relacionamento/#entidade-atributo","title":"Entidade-Atributo","text":""},{"location":"banco_de_dados/entidade-relacionamento/#relacionamentos","title":"Relacionamentos","text":""},{"location":"banco_de_dados/entidade-relacionamento/#cardinalidade","title":"Cardinalidade","text":"<p>A cardinalidade define o n\u00famero de ocorr\u00eancias de uma entidade relacionada a uma ocorr\u00eancia de outra entidade. Por exemplo, uma cardinalidade de \"1:N\" significa que uma entidade pode estar relacionada com v\u00e1rias ocorr\u00eancias de outra entidade.</p> <ul> <li>Relacionamento 1:1 (um para um) Ex.: uma pessoa possui um \u00fanico CPF, e um n\u00famero de CPF pertence a uma \u00fanica pessoa.</li> <li>Relacionamento 1:n (um para muitos) Ex.: uma montadora de carros possui v\u00e1rios modelos.</li> <li>Relacionamento n:n (muitos para muitos): Ex.: um ator participa de v\u00e1rios filmes, um filmes possui v\u00e1rios autores.</li> </ul>"},{"location":"banco_de_dados/entidade-relacionamento/#referencias","title":"Refer\u00eancias","text":"<ul> <li>ENTIDADE-RELACIONAMENTO E ABORDAGEM RELACIONAL - INSTITUTO FEDERAL DE EDUCA\u00c7\u00c3O, CI\u00caNCIA E TECNOLOGIA DO RIO GRANDE DO NORTE CAMPUS JO\u00c3O C\u00c2MARA - Nickerson Fonseca Ferreira</li> <li>Modelo Entidade - Relacionamento - DCC-IME-USP - Jo\u00e3o Eduardo Ferreira Osvaldo Kotaro Takai </li> <li>UNIVESP - Banco de Dados - Vis\u00e3o geral sobre banco de dados - Jos\u00e9 Eduardo Santarem</li> <li>UNIVESP - Banco de Dados - Modelo Entidade-Relacionamento (MER) - Parte I: entidades, atributos, chaves </li> </ul>"},{"location":"banco_de_dados/ini/","title":"Banco de Dados","text":"<p>Objetivos: Projetos e implementa\u00e7\u00f5es de bancos de dados.</p> <p>Ementa: Introdu\u00e7\u00e3o a banco de dados (Processamento de Arquivos vs SGBDs, arquitetura de SGBDs), modelagem de dados (conceitual, modelo entidade- relacionamento), Linguagem de Consulta e Manipula\u00e7\u00e3o de Dados (SQL), Indexa\u00e7\u00e3o, Bancos de Dados N\u00e3o Relacionais ou NoSQL (Bancos de Dados Orientados a Documentos, Bancos de Dados em Colunas, Bancos de Orientados a Grafos). Mapeamento objeto-relacional (ORM).</p> <p>Bibliografia Base: - Elmasri, Ramez; Navathe, Shamkant B. Sistema de Banco de Dados. 2018. Pearson. - DATE, C. J. Introdu\u00e7\u00e3o a Sistemas de Bancos de Dados. Rio de Janeiro: Elsevier, 2003. - ELMASRI, R.; NAVATHE, S. B. Sistemas de Banco de Dados. S\u00e3o Paulo: Pearson Addison Wesley, 2011. Bibliografia Complementar: - Sadalage, P. J., &amp; Fowler, M. NoSQL distilled: a brief guide to the emerging world of polyglot persistence. 2013. Pearson Education. - Date, C. J. An introduction to database systems. 1981. Pearson Education India. - Neeraj, N. (2013). Mastering Apache Cassandra. Packt Publishing Ltd. - Banker, K. (2011). MongoDB in action. Manning Publications Co.</p>"},{"location":"banco_de_dados/normalizacao/","title":"Normaliza\u00e7\u00e3o","text":"<p>Normaliza\u00e7\u00e3o \u00e9 processo do qual os esquemas de rela\u00e7\u00e3o s\u00e3o sucessivamente decompostos at\u00e9 que satisfa\u00e7am determinadas propriedades ou formas normais, evitando redund\u00e2ncia e reduzindo a complexidade.</p> <p>A qualidade de um projeto de banco de dados pode ser medida a partir da verifica\u00e7\u00e3o da forma normal que ele alcan\u00e7a.</p>"},{"location":"banco_de_dados/normalizacao/#conceitos-dependencia-funcional-e-transitiva","title":"Conceitos: Depend\u00eancia Funcional e Transitiva","text":"<p>Depend\u00eancia Funcional: Uma depend\u00eancia funcional \u00e9 um relacionamento entre dois ou mais atributos, de forma que o valor de um atributo identifica o valor do outro atributo, por exemplo, com o n\u00famero de matr\u00edcula de um aluno, encontramos o nome deste aluno. Pode ser representado como: CPF -&gt; nome_aluno.</p> <p>Depend\u00eancia Funcional Transitiva: Quando um ou mais campos de uma entidade n\u00e3o s\u00e3o dependentes diretamente da chave prim\u00e1ria, ou de parte dela, mas sim dependente de outro campo da tabela (campo este que n\u00e3o a Chave Prim\u00e1ria), temos uma depend\u00eancia funcional transitiva.</p>"},{"location":"banco_de_dados/normalizacao/#primeira-forma-normal-1fn","title":"Primeira Forma Normal (1FN)","text":"<p>A mais simples das formas normais consiste em: </p> <ul> <li>Eliminar atributos compostos e/ou multivalorados.</li> <li>Impedir \"rela\u00e7\u00f5es dentro de rela\u00e7\u00f5es\", \"tabelas dentro de tabelas\".</li> <li>Garantir que os valores sejam at\u00f4micos.</li> </ul> <p></p> <p>Para normalizar a tabela acima de acordo com a 1FN, cria se outra tabela relacionando as localiza\u00e7\u00f5es aos n\u00fameros de departamentos:</p> <p></p>"},{"location":"banco_de_dados/normalizacao/#segunda-forma-normal-2fn","title":"Segunda Forma Normal (2FN)","text":"<p>Uma rela\u00e7\u00e3o R estar\u00e1 de acordo com a segunda forma normal (2FN) se:</p> <ul> <li>previamente, ela estiver de acordo com a 1FN;</li> <li>todo o atributo de R n\u00e3o pertecente a uma de suas chaves for totalmente dependente da chave prim\u00e1ria;</li> <li>a rela\u00e7\u00e3o n\u00e3o possuir nenhuma depend\u00eancia parcial.</li> </ul> <p>Considere a seguinte tabela, que n\u00e3o est\u00e1 de acordo com a 2FN:</p> <p></p> <p>Para normalizar esta tabela cria-se uma tabela para Produtos e outra tabela para Vendas:</p> <p></p>"},{"location":"banco_de_dados/normalizacao/#terceira-forma-normal-3fn","title":"Terceira Forma Normal (3FN)","text":"<p>A terceira forma normal visa eliminar depend\u00eancia transitiva de atributo n\u00e3o-chave, ou seja, quando encontramos um atributo que depende de outro atributo, sendo que nenhum dos dois \u00e9 uma chave prim\u00e1ria, precisamos corrigir a tabela para a terceira forma normal.</p> <p></p> <p>Fazendo a an\u00e1lise de depend\u00eancia funcional de cada atributo, concluimos que:</p> <ul> <li>nr_pedido chegamos ao codigo_cliente;</li> <li>nr_pedido chegamos na data_pedido;</li> <li>codigo_cliente chegamos no nome_cliente;</li> <li>codigo_cliente chegamos no cod_cidade_cliente;</li> <li>cod_cidade_cliente chegamos no nome_cidade_cliente.</li> </ul> <p>Observa-se que apenas os atributos primos codigo_cliente e data_pedido dependem n\u00e3o transitivamente da chave prim\u00e1ria.</p> <p>Para normalizarmos, de acordo com a 3FN, resolvemos da seguinte maneira:  </p>"},{"location":"banco_de_dados/normalizacao/#forma-normal-de-boyce-codd","title":"Forma Normal de Boyce-Codd","text":"<p>Esta forma normal \u00e9 considerada uma extens\u00e3o da 3.\u00aa forma normal, por\u00e9m, mais r\u00edgida.  Esta norma afirma que todos os dados em uma tabela devem depender apenas da chave prim\u00e1ria dessa tabela e n\u00e3o de qualquer outro campo da tabela.</p>"},{"location":"banco_de_dados/normalizacao/#vantagens-da-normalizacao","title":"Vantagens da Normaliza\u00e7\u00e3o","text":"<p>Com a aplica\u00e7\u00e3o das regras formais evitamos problemas como:</p> <ul> <li>grupos repetitivos (atributos multivalorados) de dados;</li> <li>varia\u00e7\u00e3o temporal de certos atributos, depend\u00eancias funcionais totais ou parciais em rela\u00e7\u00e3o a uma chave concatenada;</li> <li>redund\u00e2ncias de dados desnecess\u00e1rias;</li> <li>perdas acidentais de informa\u00e7\u00e3o;</li> <li>dificuldade na representa\u00e7\u00e3o de fatos da realidade observada;</li> <li>depend\u00eancias transitivas entre atributos.</li> </ul>"},{"location":"banco_de_dados/normalizacao/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Banco de Dados - Normaliza\u00e7\u00e3o - Parte 1 - Prof. Eduardo Santar\u00e9m (UNIVESP)</li> <li>Banco de Dados - Normaliza\u00e7\u00e3o - Parte 2 - Prof. Eduardo Santar\u00e9m (UNIVESP)</li> <li>Segunda Forma Normal 2FN - Luis Blog</li> <li>Terceira Forma Normal 3FN - Luis Blog</li> <li>Fundamentos de Armazenamento e manipula\u00e7\u00e3o de Dados - Prof. Andre Rodrigo Sanches (USP)</li> <li>O que s\u00e3o formas normais em bancos de dados sql? - Hashtag Treinamentos</li> </ul>"},{"location":"banco_de_dados/nosql/","title":"NOSQL - Not Only SQL [em constru\u00e7\u00e3o]","text":"<p>NoSQL fornece um modelo de dados que se adapta melhor \u00e0s necessidades da aplica\u00e7\u00e3o (modelagem mais r\u00e1pida e menos c\u00f3digo).</p> <p>Grande quantidade de dados: Necessita de processamento em cluster (armazenamento dividido entre v\u00e1rios servidores).</p> <p>Favorece replica\u00e7\u00e3o de dados e escalabilidade.</p>"},{"location":"banco_de_dados/nosql/#replicacao","title":"Replica\u00e7\u00e3o","text":"<p>Master-Slave</p> <p>O slave ter\u00e1 a c\u00f3pia dos dados do master. Escrita ocorre apenas no master e leitura em ambos.</p> <p>\u00e9 importante avaliar a quest\u00e3o sobre consist\u00eancia e performance quando n\u00e3o h\u00e1 falhas na comunica\u00e7\u00e3o.</p> <p>Masterless</p> <p>muitos bancos NoSQL s\u00e3o baseados na ideia de que qualquer servidor pode receber requisi\u00e7\u00f5es de leitura e escrita.</p> <p>Assim, mesmo com falha em um dos servidores do cluster, o servi\u00e7o se mantem dispon\u00edvel.</p> <p>Teorema CAP (CAP Theorem): * Consist\u00eancia (C - Consistency);  * Alta disponibilidade (A - Availability);  * Toler\u00e2ncia a particionamento dos dados na rede (P - Partition-tolerance)</p>"},{"location":"banco_de_dados/nosql/#tipos-de-banco-de-dados-nosql","title":"Tipos de Banco de Dados NOSQL","text":"<p>Banco de dados chave-valor: os registros pertencem a mesma cole\u00e7\u00e3o de elementos, e todos possuem uma chave \u00fanica. (Redis)</p> <p>Fam\u00edlia de colunas (colunares): todos os registros fazem parte da mesma tabela, mas podem conter diferentes colunas. (cassandra)</p> <p>Documento: registros em cole\u00e7\u00f5es espec\u00edficas, mas n\u00e3o h\u00e1 esquema fixo de registros (MongoDB)</p> <p>Grafo: registros s\u00e3o n\u00f3s de um grafo e s\u00e3o interligados por relacionamentos.(Neo4j)</p>"},{"location":"banco_de_dados/relacional/","title":"Modelo Relacional","text":""},{"location":"banco_de_dados/relacional/#conceitos","title":"Conceitos","text":"<ul> <li>O modelo de dados relacional foi introduzido por Edgar Codd em 1970.</li> <li>\u00c9 um modelo formal, baseado na teoria matem\u00e1tica das rela\u00e7\u00f5es entre conjuntos.</li> <li>A ideia de modelo relacional \u00e9 representar ambos, entidade e relacionamento, de maneira uniforme.</li> <li>Cada linha na tabela corresponde a uma entidade ou relacionamento do mundo real.</li> <li>As colunas no modelo relacional (atributos de uma entidade), especificam como interpretar os valores de dados em cada linha.</li> <li>O grau de uma tabela (rela\u00e7\u00e3o) \u00e9 o n\u00famero n de atributos do esquema de tabela que a define</li> <li>\u00c9 atualmente o modelo de banco de dados mais utilizado pelo mercado.</li> </ul>"},{"location":"banco_de_dados/relacional/#terminologia","title":"Terminologia","text":"<ul> <li>Uma linha (registro) \u00e9 chamada Tupla.</li> <li>Uma coluna (campo) \u00e9 chamado de Atributo.</li> <li>A tabela \u00e9 chamada Rela\u00e7\u00e3o. </li> <li>O conjunto de valores (tipo de dados) que um atributo pode ter se chama Dom\u00ednio. </li> </ul>"},{"location":"banco_de_dados/relacional/#relacoes","title":"Rela\u00e7\u00f5es","text":"<p>Esquema de rela\u00e7\u00e3o \u00e9 a express\u00e3o da forma: </p> <p><pre><code>R(A1, A2, A3, ..., An)\n\n- R: nome da rela\u00e7\u00e3o\n- Ai: nome de um atributo, cujo dom\u00ednio em R \u00e9 denotado por dom(Ai).\n- n: grau de rela\u00e7\u00e3o\n</code></pre> Exemplos:</p> <p>Estudante(nome, idade, matricula, telefone, endere\u00e7o), Disciplina(nome, sigla, cargaHoraria, creditos)</p>"},{"location":"banco_de_dados/relacional/#caracteristicas-das-relacoes","title":"Caracter\u00edsticas das Rela\u00e7\u00f5es:","text":"<ul> <li>A ordem das tuplas \u00e9 irrelevante.</li> <li>J\u00e1 a ordem dos atributos dentro da tupla s\u00e3o relevantes.</li> <li>O valor de cada atributo em uma tupla \u00e9 at\u00f4mico.</li> <li>Atributos compostos e multi-valorados n\u00e3o s\u00e3o permitidos.</li> <li>As tuplas de uma rela\u00e7\u00e3o s\u00e3o \u00fanicas</li> </ul>"},{"location":"banco_de_dados/relacional/#restricoes-do-modelo-relacional","title":"Restri\u00e7\u00f5es do Modelo Relacional","text":""},{"location":"banco_de_dados/relacional/#restricoes-de-dominio","title":"Restri\u00e7\u00f5es de Dom\u00ednio","text":"<ul> <li>cada atributo possui um dom\u00ednio que pode ser um inteiro, um float, um caractere, um conjunto de caractere, etc.</li> <li>Cada dom\u00ednio possui valor at\u00f4mico.</li> <li>O valor <code>null</code> deve ser utilizado quando um atributo n\u00e3o possui valor ou o seu valor n\u00e3o \u00e9 conhecido.</li> </ul> <p> Sobre um valor ser at\u00f4mico significa que ele \u00e9 indivis\u00edvel e monovalorado (\u00fanico valor), que n\u00e3o pode ser recuperado por partes. Por exemplo, endere\u00e7o deve ser definido como um \u00fanico atributo no modelo relacional. </p>"},{"location":"banco_de_dados/relacional/#restricoes-de-chave","title":"Restri\u00e7\u00f5es de Chave","text":"<ul> <li>Uma chave prim\u00e1ria identifica univocamente cada tupla da rela\u00e7\u00e3o.</li> <li>Rela\u00e7\u00e3o \u00e9 um conjunto de tuplas onde todas as tuplas devem ser distintas.</li> <li>Superchave: subconjunto de atributos de uma rela\u00e7\u00e3o que identifique univocamente cada tupla.</li> <li>Chave: \u00e9 uma superchave da qual n\u00e3o se pode retirar nenhum atributo.</li> </ul>"},{"location":"banco_de_dados/relacional/#restricoes-de-integridade","title":"Restri\u00e7\u00f5es de Integridade","text":"<ul> <li>Restri\u00e7\u00f5es de integridade s\u00e3o regras sobre os valores que podem ser armazenados nas rela\u00e7\u00f5es.</li> <li>Tem por objetivo garantir a consist\u00eancia.</li> <li>Integridade de entidade: o valor de uma chave n\u00e3o pode ser <code>null</code> em nenhuma tupla.</li> <li>Integridade referencial: mant\u00e9m consist\u00eancia entre tuplas de duas rela\u00e7\u00f5es, definida a chave estrangeira de uma rela\u00e7\u00e3o R1 e a chave prim\u00e1ria de uma rela\u00e7\u00e3o R2.</li> </ul>"},{"location":"banco_de_dados/relacional/#mapeamento-mer-relacional","title":"Mapeamento MER -&gt; Relacional","text":"<p>\u00c9 uma forma de projetar o esquema conceitual para o esquema l\u00f3gico.</p> <p></p>"},{"location":"banco_de_dados/relacional/#caracteristicas-do-mapeamento","title":"Caracter\u00edsticas do Mapeamento:","text":"<ul> <li>Para cada entidade forte em MER \u00e9 criado uma tabela no modelo Relacional.</li> <li>Um atributo chave da entidade \u00e9 escolhido como chave prim\u00e1ria para a tabela rec\u00e9m-criada.</li> <li>\u00c9 preciso criar uma nova tabela para cada atributo multi-valorado.</li> </ul>"},{"location":"banco_de_dados/relacional/#referencias","title":"Refer\u00eancias","text":"<ul> <li>O Modelo Relacional - Carla Mac\u00e1rio(EMBRAPA) , Stefano Baldo(UNICAMP) </li> <li>Banco de Dados - Modelo Relacional - Eduardo R. Hrushka (USP)</li> <li>Mapeamento do Modelo Entidade-Relacionamento para o Modelo Relacional - Profa. Dra. Cristina Dutra de Aguiar Ciferri(USP) </li> </ul>"},{"location":"banco_de_dados/sql/","title":"Sql","text":"<p>SGBD \u00e9 um pacote de software que facilita a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de um banco de dados. A manipula\u00e7\u00e3o dos dados \u00e9 feita atrav\u00e9s da realiza\u00e7\u00e3o de opera\u00e7\u00f5es como consultas, altera\u00e7\u00e3o de dados, emiss\u00e3o de relat\u00f3rios, etc.</p> <p>Controle de acesso: o SGBD oferece um subsistema de autoriza\u00e7\u00e3o e seguran\u00e7a que previne que usu\u00e1rios acessem dados sem que estejam autorizados.</p> <p>Os SGBDs permitem que opera\u00e7\u00f5es sobre os dados sejam definidas de maneira independente da aplica\u00e7\u00e3o.</p> <p>Vantages da Abordagem baseada em SGBD Persist\u00eancia para programas e estruturas de dados (objetos). Efici\u00eancia no processamento de consultas. Oferecimento de sistemas de backup e recupera\u00e7\u00e3o. Garantia das restri\u00e7\u00f5es de integridade. Garante padr\u00f5es. Reduz o tempo de desenvolvimento de aplica\u00e7\u00f5es Fornece flexibilidade e disponibilidade. Promove economia de escala. Sistema de Banco de Dados Sistemas de BD s\u00e3o sistemas desenvolvidos com fun\u00e7\u00f5es espec\u00edficas, que usam Banco de dados, desenvolvidos em SGBDs. Sozinho um SGBD n\u00e3o significa nada, com um Banco de Dados e um programa escrito para sua manipula\u00e7\u00e3o forma-se um sistema de BD.</p> <p>Modelo de Dados Modelos de dados conceituais (alto n\u00edvel) Modelos de dados f\u00edsicos (baixo n\u00edvel) Modelos de dados l\u00f3gicos (representativos ou de implementa\u00e7\u00e3o) Instancias Os dados em um determinado momento s\u00e3o chamados de inst\u00e2ncias.</p> <p>A cada novo registro inserido ou removido, o estado (inst\u00e2ncia) do banco se altera.</p> <p>Restri\u00e7\u00f5es / Chaves Uma chave \u00e9 um conjunto m\u00ednimo de valores dos atributos que identifica unicamente uma tupla (linha). Garante a restri\u00e7\u00e3o de unicidade entre as tuplas de uma rela\u00e7\u00e3o</p> <p>SQL (Structured Query Languagesql) SQL tem uma liga\u00e7\u00e3o com o modelo relacional pois o resultado de uma consulta SQL \u00e9 uma tabela (tamb\u00e9m chamada de conjunto resultado).</p> <p>A linguagem SQL se divide em subgrupos:</p> <p>DDL (Data Definition Language):</p> <p>\u00c9 a linguagem que define a ESTRUTURA do BD. Seus comandos permitem a cria\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de objetos em um banco de dados. Exemplo: CREATE, ALTER, DROP DML(Data Manipulation Language):</p> <p>Linguagem que manipula os dados no banco. Seus comandos permitem a recupera\u00e7\u00e3o, inser\u00e7\u00e3o, altera\u00e7\u00e3o e exclus\u00e3o de dados. Exemplo: INSERT. UPDATE, DELETE DQL (Linguagem de consulta de Dados):</p> <p>Comando SELECT \u00e9 a instru\u00e7\u00e3o B\u00e1sica para recuperar informa\u00e7\u00f5es. O formato b\u00e1sico da declara\u00e7\u00e3o SELECT \u00e9 composto por tr\u00eas cl\u00e1usulas (SELECT, FROM e WHERE). O que significa ACID ? Atomicidade (a transa\u00e7\u00e3o \u00e9 executada totalmente ou \u00e9 executada) Consist\u00eancia (sistema sempre consistente ap\u00f3s uma opera\u00e7\u00e3o) Isolamento (transa\u00e7\u00e3o n\u00e3o sofre interfer\u00eancia de outra transa\u00e7\u00e3o concorrente) Durabilidade (o que foi salvo n\u00e3o \u00e9 mais perdido) For\u00e7a a consist\u00eancia ao final de cada transa\u00e7\u00e3o</p>"},{"location":"estrutura_dados/arvores/","title":"\u00c1rvores","text":""},{"location":"estrutura_dados/arvores/#conceitos","title":"Conceitos","text":"<p>Uma \u00e1rvore \u00e9 um \u00fanico n\u00f3 ou um n\u00f3 raiz conectado a um conjunto de \u00e1rvores.</p> <p>\u00c1rvores s\u00e3o estrutura de dados n\u00e3o lineares e n\u00e3o sequenciais, onde os elementos (n\u00f3s) est\u00e3o organizados de forma hier\u00e1quica e interconectados por meio de arestas (v\u00e9rtices).  Os n\u00f3s representam espa\u00e7os onde podem ser armazenados quaisquer tipos de informa\u00e7\u00f5es, enquanto as arestas representam o relacionamento entre os n\u00f3s.</p> <p>O elemento que n\u00e3o tem predecessor e que fica no topo da \u00e1rvore \u00e9 chamado de raiz, enquanto os elementos que est\u00e3o a ele subordinados s\u00e3o chamados de n\u00f3s filho. J\u00e1 os elementos que n\u00e3o possuem filho s\u00e3o chamados n\u00f3s folha. Conforme imagem:</p> <p></p>"},{"location":"estrutura_dados/arvores/#altura-profundidade-e-ordem","title":"Altura, profundidade e Ordem","text":""},{"location":"estrutura_dados/arvores/#altura-do-no","title":"Altura do n\u00f3","text":"<p>Comprimento do caminho mais longo entre o n\u00f3 at\u00e9 uma folha. A altura depende dos filhos daquele n\u00f3.</p> <p></p>"},{"location":"estrutura_dados/arvores/#profundidade-de-um-no","title":"Profundidade de um n\u00f3","text":"<p>Tamb\u00e9m chamado de n\u00edvel de um n\u00f3, corresponde a dist\u00e2ncia percorrida do n\u00f3 at\u00e9 a raiz, logo, a raiz ter\u00e1 profundidade 0 (zero).</p> <p></p>"},{"location":"estrutura_dados/arvores/#grau-de-um-no","title":"Grau de um n\u00f3","text":"<p>O grau de um n\u00f3 corresponde ao n\u00famero de filhos/ n\u00famero de sub\u00e1rvores que aquele n\u00f3 possui: </p> <p></p>"},{"location":"estrutura_dados/arvores/#arvore-binaria","title":"\u00c1rvore Bin\u00e1ria","text":"<p>Uma \u00e1rvore bin\u00e1ria \u00e9 uma \u00e1rvore ordenada, na qual cada n\u00f3 tem 0, 1, ou 2 filhos e cada filho corresponde a uma sub\u00e1rvore bin\u00e1ria; a \u00e1rvore bin\u00e1ria pode estar vazia ou particionada em 3 subconjuntos disjuntos:</p> <pre><code>- A Raiz\n- A sub-arvore esquerda\n- A sub-arvore direita\n</code></pre>"},{"location":"estrutura_dados/arvores/#classificacao-de-arvores-binarias","title":"Classifica\u00e7\u00e3o de \u00e1rvores bin\u00e1rias:","text":"<ul> <li>\u00c1rvore bin\u00e1ria completa/estritamente bin\u00e1ria: Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos</li> <li>\u00c1rvore bin\u00e1ria completa: Cada n\u00edvel, exceto o \u00faltimo n\u00edvel, \u00e9 completamente preenchido e todos os n\u00f3s s\u00e3o justificados \u00e0 esquerda.</li> <li>\u00c1rvore bin\u00e1ria perfeita:  Cada n\u00f3, exceto os n\u00f3s folha, tem dois filhos e cada n\u00edvel (tamb\u00e9m o \u00faltimo n\u00edvel) \u00e9 completamente preenchido.</li> </ul>"},{"location":"estrutura_dados/arvores/#percursos","title":"Percursos","text":""},{"location":"estrutura_dados/arvores/#pre-ordem","title":"Pr\u00e9-ordem:","text":"<p>Partindo da raiz, visitamos a raiz e seguimos para os n\u00f3s da esquerda e depois os da direita.</p> <p></p>"},{"location":"estrutura_dados/arvores/#pos-ordem","title":"P\u00f3s-ordem:","text":"<p>Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois os da direita e por fim, visitamos o n\u00f3 raiz.</p> <p></p>"},{"location":"estrutura_dados/arvores/#in-ordem","title":"In-ordem:","text":"<p>Partindo da raiz, visitamos primeiro os n\u00f3s da esquerda, depois visitamos o n\u00f3 raiz, e depois visitamos os n\u00f3s da direita. </p> <p></p>"},{"location":"estrutura_dados/arvores/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Prof. Fernando De Siqueira - Estrutura de Dados</li> <li>Stack Overflow - Difference between \"Complete binary tree\", \"strict binary tree\",\"full binary Tree\"?</li> <li>IME - USP - \u00c1rvores Bin\u00e1rias</li> </ul>"},{"location":"estrutura_dados/avltree/","title":"\u00c1rvores AVL","text":""},{"location":"estrutura_dados/avltree/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Criada \u00c1rvore AVL se trata de uma estrutura de dados que obedece a todas as propriedades da \u00e1rvore bin\u00e1ria e que em cada n\u00f3 a diferen\u00e7a entre a altura da sub\u00e1rvora da direita e da esquerda \u00e9 de 1, 0 ou -1. Esta diferen\u00e7a \u00e9 chamada Fator de Balanceamento. </p> <p>O balanceamento facilita efetivamente a busca de um elemento, por exemplo, se temos uma \u00e1rvore balanceada com 10.000 elementos, precisar\u00edamos fazer apenas 14 compara\u00e7\u00f5es para encontrar um elemento.</p> <p></p>"},{"location":"estrutura_dados/avltree/#calculando-melhor-no-raiz-de-um-arvore-avl","title":"Calculando melhor n\u00f3 raiz de um \u00e1rvore AVL","text":"<p>Ao se analisar uma \u00e1rvore, dentre os seus n\u00f3s, qual n\u00f3 seria uma raiz adequada para torn\u00e1-la perfeitamente balanceada?</p> <ul> <li>O n\u00f3 cuja chave representa a mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero impar de n\u00f3s. </li> <li>Ou o n\u00f3 cuja chave representa um dentre os dois valores mais pr\u00f3ximos da mediana das chaves presentes nos n\u00f3s que comp\u00f5em a \u00e1rvore, para uma \u00e1rvore com n\u00famero par de n\u00f3s.</li> </ul>"},{"location":"estrutura_dados/avltree/#rotacao","title":"Rota\u00e7\u00e3o","text":"<p>Quando a diferen\u00e7a de altura de um n\u00f3 for maior que 1 ou menor que -1, ent\u00e3o, a \u00e1rvore est\u00e1 desbalanceada e necessita de uma rota\u00e7\u00e3o, simples ou dupla, conforme tabela: </p> N\u00f3 Desbalanceado Filho do N\u00f3 Desbalanceado Tipo de Rota\u00e7\u00e3o +2 +1 Simples \u00e0 esquerda +2 0 Simples \u00e0 esquerda +2 -1 Dupla com filho  para a direita e pai para a esquerda -2 +1 Dupla com filho  para a esquerda e pai para a direita -2 0 Simples \u00e0 direita -2 -1 Simples \u00e0 direita"},{"location":"estrutura_dados/avltree/#exemplo-de-balanceamento","title":"Exemplo de Balanceamento","text":"<p>Tomemos, por exemplo, a seguinte \u00e1rvore:</p> <p></p> <p>Se quisermos adicionar o valor 055, ele iria parar \u00e1 direita no n\u00f3 050, gerando um desbalanceamento na sub\u00e1rvore cuja raiz \u00e9 o 045. Portanto, para balancear a \u00e1rvore \u00e9 necess\u00e1rio uma rota\u00e7\u00e3o simples \u00e0 esquerda, conforme anima\u00e7\u00e3o:</p> <p>https://user-images.githubusercontent.com/72423464/192525507-89e42325-1f4d-4493-8243-214dbae4882e.mp4</p>"},{"location":"estrutura_dados/avltree/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Algoritmos e Estruturas de Dados/\u00c1rvores AVL</li> <li>UNIVESP - Estruturas de Dados - \u00c1rvores AVL</li> </ul>"},{"location":"estrutura_dados/conceitosbasicos/","title":"Conceitos B\u00e1sicos C++","text":"<p>Criada como uma extens\u00e3o da linguagem C pelo dinamarqu\u00eas Bjarne Stroustrup, o \"C com classes\" \u00e9 uma linguagem multiparadigma, quase sempre implementada de modo compilado,considerada uma linguagem de n\u00edvel m\u00e9dio. Apareceu pela primeira vez em 1985 e ainda hoje \u00e9 amplamente utilizada em sistemas embarcados, jogos, bibliotecas gr\u00e1ficas, sistemas operacionais entre outros.</p>"},{"location":"estrutura_dados/conceitosbasicos/#hello-world-em-c","title":"Hello World em C++","text":"<pre><code>#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello, world!\\n\";\n}\n</code></pre> <ul> <li><code>#include &lt;iostream&gt;</code>: biblioteca utilizada para declarar objetos que realizam o controle do input e do output estabelecidos no c\u00f3digo.</li> <li><code>int main()</code>: fun\u00e7\u00e3o utilizada para demonstrar o ponto de in\u00edcio de execu\u00e7\u00e3o do programa.</li> <li><code>std::cout &lt;&lt; \"string\";</code>: fun\u00e7\u00e3o padr\u00e3o para enviar dados para o console imprimi-los em forma de texto. </li> </ul>"},{"location":"estrutura_dados/conceitosbasicos/#tipos-de-dados-em-c","title":"Tipos de Dados em C++","text":"<ul> <li>Bool: valores True or False, em geral armazenam 1 byte</li> <li>Char: aramazena um \u00fanico caracter tamb\u00e9m de um byte, como \"a\", ou \"b\" e assim por diante</li> <li>Int: utiliza 4 bytes e armazenam n\u00fameros inteiros entre -2.147.483.648 a 2.147.483.647</li> <li>Double: 8 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 15 casas decimais</li> <li>Float: 4 bytes de mem\u00f3ria e armazena n\u00fameros com menos de 06 casas decimais</li> </ul>"},{"location":"estrutura_dados/conceitosbasicos/#palavras-reservadas-ao-c","title":"Palavras reservadas ao C++","text":"<p>Palavras reservadas s\u00e3o um conjunto de 92 palavras que s\u00e3o excluivas para uso do C++, entre elas podemos citar</p> - - - - <code>and</code> <code>or</code> <code>if</code> <code>for</code> <code>else</code> <code>do</code> <code>true</code> <code>false</code> <code>this</code> <code>int</code> <code>long</code> <code>case</code> <code>double</code> <code>char</code> <code>catch</code> <code>break</code> <code>const</code> <code>private</code> <code>return</code> <code>void</code> <p>Entre outras.</p>"},{"location":"estrutura_dados/conceitosbasicos/#operadores-em-c","title":"Operadores em C++","text":"<p>Operadores em programa\u00e7\u00e3o \u00e9 um c\u00e1lculo matem\u00e1tico envolvendo zero ou mais valores que originam um novo valor. A opera\u00e7\u00e3o em espec\u00edfico \u00e9 determinado por um s\u00edmbolo (ou par de s\u00edmbolos) chamado operador.</p> <ul> <li>Adi\u00e7\u00e3o: <code>+</code></li> <li>Subtra\u00e7\u00e3o: <code>-</code></li> <li>Multiplica\u00e7\u00e3o: <code>*</code></li> <li>Divis\u00e3o: <code>/</code></li> <li>Atribui\u00e7\u00e3o:  <code>=</code></li> <li>Inser\u00e7\u00e3o: <code>&lt;&lt;</code></li> <li>Extra\u00e7\u00e3o: <code>&gt;&gt;</code></li> <li>Igualdade: <code>==</code></li> <li>M\u00f3dulo: <code>%</code></li> </ul>"},{"location":"estrutura_dados/conceitosbasicos/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Uma fun\u00e7\u00e3o \u00e9 uma cole\u00e7\u00e3o de statements (instru\u00e7\u00f5es) que s\u00e3o executadas sequencialmente. Todo programa em C++ deve incluir uma fun\u00e7\u00e3o chamada <code>main()</code>. Quando voc\u00ea roda o programa a execu\u00e7\u00e3o come\u00e7a no topo da main.</p> <p>A chamada de uma fun\u00e7\u00e3o \u00e9 uma express\u00e3o que diz ao CPU par interromper a fun\u00e7\u00e3o corrente e executar outra fun\u00e7\u00e3o. Depois de executada, o CPU retoma as instru\u00e7\u00f5es do ponto em que parou.</p> <p>Aqui est\u00e1 um simples c\u00f3digo que mostra como uma fun\u00e7\u00e3o \u00e9 definida e invocada:</p> <p><pre><code>#include &lt;iostream&gt; // para o std::cout\n// Defini\u00e7\u00e3o de uma fun\u00e7\u00e3o imprimir()\nvoid imprimir() // imprimir() \u00e9 o nome da fun\u00e7\u00e3o\n{\nstd::cout &lt;&lt; \"Dentro da fun\u00e7\u00e3o imprimir()\\n\";\n}\n// Defini\u00e7\u00e3o da fun\u00e7\u00e3o main()\nint main()\n{\nstd::cout &lt;&lt; \"Come\u00e7ando a main()\\n\";\nimprimir(); // Interrompendo a main() por chamar a fun\u00e7\u00e3o imprimir().  \nstd::cout &lt;&lt; \"Encerrando a main()\\n\"; // esta instru\u00e7\u00e3o \u00e9 feita depois da conclus\u00e3o da fun\u00e7\u00e3o imprimir()\nreturn 0;\n}\n</code></pre> O output ser\u00e1:</p> <pre><code>Come\u00e7ando a main()\nDentro da fun\u00e7\u00e3o imprimir()\nEncerrando a main()\n</code></pre>"},{"location":"estrutura_dados/conceitosbasicos/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Betrybe - C++</li> <li>Wikipedia - C++</li> <li>Learn C++</li> </ul>"},{"location":"estrutura_dados/est/","title":"Estruturas de Dados","text":"<p>Objetivo: Familiarizar-se com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las.</p> <p>Objetivos: Familiarizar os alunos com a modelagem e implementa\u00e7\u00e3o de diferentes estruturas de dados, bem como os algoritmos para gerenci\u00e1-las. Ementa: Estruturas b\u00e1sicas para representa\u00e7\u00e3o de informa\u00e7\u00f5es: pilhas, filas e listas ligadas, \u00e1rvores, grafos, tabelas de hash e suas generaliza\u00e7\u00f5es, implementa\u00e7\u00f5es. Algoritmos para constru\u00e7\u00e3o, consulta e manipula\u00e7\u00e3o de tais estruturas. Desenvolvimento, implementa\u00e7\u00e3o e testes de programas usando tais estruturas em aplica\u00e7\u00f5es espec\u00edficas. Page-Rank</p> <p>Bibliografia Base: - SZWARCFITER, Jayme Luiz; MARKENZON, Lilian. Estruturas de Dados e Seus Algoritmos. 2010. LTC. - EDELWEISS, Nina; GALANTE, Renata. Estruturas de Dados. 2011. Bookman. - AGUILAR, Luis Joyanes. Fundamentos de Programa\u00e7\u00e3o: Algoritmos, estruturas de dados e objetos. 2008. AMGH. Bibliografia Complementar: - Cormen, Thomas; Leiserson, Charles; Rivest, Ronald; Stein, Clifford. Algoritmos: Teoria e Pr\u00e1tica. 2012. LTC. - Thomas, Cormen. Desmistificando Algoritmos. 2017. LTC. - Maner, Udi. Introduction to Algorithms: A Creative Approach. 1989. Addison- Wesley Professional.</p>"},{"location":"estrutura_dados/fila_pilha/","title":"Fila e Pilha","text":"<p>Tanto fila como pilha s\u00e3o estrutura de dados lineares, ou seja, possuem liga\u00e7\u00e3o com um \u00fanico antecedente e com um \u00fanico sucessor, desse modo:</p> <p></p>"},{"location":"estrutura_dados/fila_pilha/#pilha-vetorial","title":"Pilha (vetorial)","text":"<p>Uma pilha (ou stack em ingl\u00eas) \u00e9 uma estrutura linear na qual inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo da pilha.</p> <p>Numa pilha, a manipula\u00e7\u00e3o dos elementos \u00e9 realizada em apenas uma das extremidades, chamada de topo, em oposi\u00e7\u00e3o a outra extremidade, chamada de base.</p> <p>Caracter\u00edsticas:</p> <ul> <li>O \u00faltimo elemento a entrar tem que ser o primeiro a sair (Last-In-First-Out).</li> <li>Permitem acesso a apenas o \u00faltimo item inserido.</li> <li>Inser\u00e7\u00f5es e remo\u00e7\u00f5es ocorrem no topo.</li> </ul> <p></p> <p>Principais fun\u00e7\u00f5es:</p> <ul> <li><code>isEmpty()</code> : chamada para verificar se a pilha est\u00e1 vazia.</li> <li><code>isFull()</code> : chamada para verificar se a estrutura est\u00e1 completa (quando possui tamanho fixo).</li> <li><code>push()</code> :  inser\u00e7\u00e3o de elementos no topo da pilha; empilhar.</li> <li><code>pop()</code> : remo\u00e7\u00e3o do elemento que est\u00e1 no opo da pilha; desempilhar.</li> </ul> <p>Principais usos </p> <ul> <li>O comando de desfazer a \u00faltima opera\u00e7\u00e3o (ctrl+z / cmd+z)</li> <li>Navega\u00e7\u00e3o entre p\u00e1ginas.</li> <li>Fun\u00e7\u00e3o recursiva;</li> </ul>"},{"location":"estrutura_dados/fila_pilha/#fila-vetorial","title":"Fila (vetorial)","text":"<p>Uma fila (ou queue) \u00e9 uma estrutura linear na qual as inser\u00e7\u00f5es ocorrem no final e as exclus\u00f5es ocorrem no in\u00edcio.</p> <p>Todas as opera\u00e7\u00f5es em uma fila podem ser imaginadas como as que ocorre numa fila de pessoas num banco, exceto que os elementos n\u00e3o se movem na fila, conforme o primeiro elemento \u00e9 retirado. Isto seria muito custoso para o computador. O que se faz na realidade \u00e9 indicar quem \u00e9 o primeiro.</p> <p>Caracter\u00edsiticas</p> <ul> <li>O primeiro elemento a entrar na estrutura tem que ser o primeiro a sair (First-In-First-Out).</li> <li>Inser\u00e7\u00f5es ocorrem no final e remo\u00e7\u00f5es ocorrem no in\u00edcio.</li> </ul> <p></p> <p>Principais fun\u00e7\u00f5es</p> <ul> <li><code>queue()</code> - enfileirar</li> <li><code>dequeue()</code> - desinfileirar </li> <li>Al\u00e9m das fun\u00e7\u00f5es <code>isEmpty()</code> e <code>isFull()</code> , semelhantes \u00e0 pilha.</li> </ul> <p>Principais usos</p> <ul> <li>Documentos enviados para impress\u00f5es.</li> <li>Troca de mensagens entre processos em Sistemas Operacionais.</li> <li>Troca de mensagens entre computadores em uma rede.</li> </ul>"},{"location":"estrutura_dados/fila_pilha/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://www.cos.ufrj.br/~rfarias/cos121/pilhas.html</li> <li>https://www.cos.ufrj.br/~rfarias/cos121/filas.html</li> <li>https://cathyatseneca.github.io/DSAnim/web/llstack.html</li> </ul>"},{"location":"estrutura_dados/grafos/","title":"Grafos","text":""},{"location":"estrutura_dados/grafos/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Se com filas e pilhas vimos estrutura de dados lineares, e com \u00e1rvores vimos estruturas hier\u00e1rquicas, com grafos veremos estruturas descentralizadas. </p> <p>A teoria dos grafos iniciou-se na cidade de Konigsberg, atual territ\u00f3rio da R\u00fassia no ano de 1736, pelo matem\u00e1tico su\u00ed\u00e7o Leonhard Euler (1707-1783)</p> <p>Grafos s\u00e3o amplamente usados em matem\u00e1tica, mas sobretudo em programa\u00e7\u00e3o. Formalmente, um grafo \u00e9 uma cole\u00e7\u00e3o de v\u00e9rtices (V) e uma cole\u00e7\u00e3o de arcos (E) constitu\u00eddos por pares de v\u00e9rtices. \u00c9 uma estrutura usada para representar um modelo em que existem rela\u00e7\u00f5es entre os objetos de uma certa cole\u00e7\u00e3o.</p> <p>A teoria dos grafos estuda objetos combinat\u00f3rios, pois os mesmos s\u00e3o bons modelos para muitos problemas em v\u00e1rios ramos da matem\u00e1tica, da inform\u00e1tica, da engenharia, da qu\u00edmica, da psicologia e da ind\u00fastria.</p>"},{"location":"estrutura_dados/grafos/#grafos-nao-direcionados","title":"Grafos N\u00e3o direcionados","text":"<p>Um grafo \u00e9 dito n\u00e3o direcionado se as rela\u00e7\u00f5es representadas pelas arestas n\u00e3o t\u00eam sentido, ou seja, arestas podem ser seguidas em qualquer dire\u00e7\u00e3o, elas s\u00e3o bi-direcionais.</p> <p>Em grafos n\u00e3o direcionados, o grau de um v\u00e9rtice \u00e9 o n\u00famero de arestas que incidem nele.</p> <p>Observer que self-loops n\u00e3o s\u00e3o permitidos.</p> <p></p>"},{"location":"estrutura_dados/grafos/#grafos-direcionados","title":"Grafos Direcionados","text":"<p>Um grafo \u00e9 dito direcionado se as arestas s\u00e3o pares ordenados de v\u00e9rtices, saindo de um em dire\u00e7\u00e3o ao outro, ou seja, as arestas possuem uma dire\u00e7\u00e3o.</p> <p>Em grafos direcionados, o grau \u00e9 o n\u00famero de arestas que saem do v\u00e9rtice (grau de sa\u00edda) mais o n\u00famero de arestas que chegam (grau de entrada).</p> <p></p>"},{"location":"estrutura_dados/grafos/#formas-de-representacao","title":"Formas de Representa\u00e7\u00e3o","text":""},{"location":"estrutura_dados/grafos/#matriz-de-adjacencias","title":"Matriz de Adjac\u00eancias","text":"<p>A matriz de adjac\u00eancias de um grafo \u00e9 uma matriz booleana com colunas e linhas indexadas pelos v\u00e9rtices. Uma matriz de adjac\u00eancia qualquer (M) ter\u00e1 a quantidade de v\u00e9rtices (n) de n\u00famero de linha e colunas, ou seja, uma para cada v\u00e9rtice</p> <p></p>"},{"location":"estrutura_dados/grafos/#lista-de-adjacencias","title":"Lista de Adjac\u00eancias","text":"<p>Consiste numa lista qual cada elemento \u00e9 um n\u00f3 do grafo, logo a lista possui tamanho equivalente ao n\u00famero de v\u00e9rtices do grafo. Ela possui n lista ligadas, estas contem as conex\u00f5es de cada arestas do v\u00e9rtice.</p> <p></p>"},{"location":"estrutura_dados/grafos/#aplicacoes","title":"Aplica\u00e7\u00f5es","text":"<ul> <li> <p>Modelagem de Circuitos Eletr\u00f4nicos:</p> <ul> <li>Placas de circuito impresso.</li> <li>Circuitos integrados</li> </ul> </li> <li> <p>Redes de Transporte</p> <ul> <li>Representa\u00e7\u00e3o de Rodovias:</li> <li>Mapa de V\u00f4os</li> <li>Mapa de Metr\u00f4 </li> </ul> </li> <li> <p>Redes de Computadores:</p> <ul> <li>Redes Locais</li> <li>Internet</li> </ul> </li> <li> <p>Bancos de Dados:</p> <ul> <li>Diagrama Entidade-Relacionamento</li> </ul> </li> <li> <p>Ci\u00eancias:</p> <ul> <li>\u00c1tomos conectados por liga\u00e7\u00f5es qu\u00edmicas</li> <li>Esp\u00e9cies conectadas filogeneticamente</li> <li>Animais conectados por rela\u00e7\u00f5es ecol\u00f3gicas</li> </ul> </li> <li>Redes Sociais</li> </ul>"},{"location":"estrutura_dados/grafos/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Curso Livre de Estruturas de Dados/Grafos</li> <li>O que \u00e9 um grafo estrutura de dados?</li> <li>ICMC - USP - Grafos I: Conceitos &amp; Aplica\u00e7\u00f5es</li> <li>Grafos \u2014 representa\u00e7\u00e3o e implementa\u00e7\u00e3o</li> </ul>"},{"location":"estrutura_dados/hash-table/","title":"Tabela Hash","text":""},{"location":"estrutura_dados/hash-table/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Tamb\u00e9m conhecida como tabela de dispers\u00e3o, tabela de espalhamento ou tabela de indexa\u00e7\u00e3o \u00e9 uma estrutura de dados que associa chaves e valores. </p> <p>Em outras linguagens de programa\u00e7\u00e3o pode ser referida como: dicion\u00e1rios, arrays associativos, mapas, entre outros.</p> <p>A forma mais simples de se pensar em uma tabela hash \u00e9 como um vetor de registros.</p>"},{"location":"estrutura_dados/hash-table/#visualizacao","title":"Visualiza\u00e7\u00e3o","text":""},{"location":"estrutura_dados/hash-table/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Tabelas hash armazenam uma cole\u00e7\u00e3o de registros com chaves;</li> <li>A partir da aplica\u00e7\u00e3o de uma fun\u00e7\u00e3o, a chave \u00e9 transformada em um endere\u00e7o da tabela; </li> <li>Cada chave \u00e9 interpretada como um valor num\u00e9rico, um \u00edndice no vetor;</li> <li>O local de um novo registro depende do valor hash de sua chave;</li> <li>Quando ocorre uma colis\u00e3o, \u00e9 usado o pr\u00f3ximo local dispon\u00edvel;</li> <li>\u00c9 poss\u00edvel encadear os valores em um \u00edndice usando listas ligadas;</li> <li>Quando removemos um registro, o local deve ser marcado para facilitar as buscas.</li> </ul>"},{"location":"estrutura_dados/hash-table/#inserindo-novo-registro","title":"Inserindo novo registro","text":"<p>Supondo que estamos implementando uma tabela hash de tamanho 11 indexado de 0 a 10. </p> <p>Se fizermos a inser\u00e7\u00e3o de valores menores do que o tamanho da tabela, eles ser\u00e3o inseridos no \u00edndice correspondente ao valor da chave, como por exemplo, no caso de adicionarmos chaves de valor 2, 5 e 9.</p> <p></p> <p>Para casos em que o valor da chave \u00e9 maior que o tamanho da tabela, precisamos usar uma fun\u00e7\u00e3o de dispers\u00e3o.</p> <p>Uma fun\u00e7\u00e3o de dispers\u00e3o h transforma uma chave x em um endere\u00e7o-base h(x) na tabela hash.</p> <p>Se utilizarmos o M\u00e9todo da Divis\u00e3o teremos que encontrar o resto da divis\u00e3o do valor da chave pelo tamanho da tabela.</p> <p>Por exemplo, se temos uma chave de valor 15 ela ser\u00e1 inserida no \u00edndice 4, pois <code>15 % 11 = 4</code></p> <p></p>"},{"location":"estrutura_dados/hash-table/#funcao-de-dispersao-hash-functions","title":"Fun\u00e7\u00e3o de Dispers\u00e3o / Hash Functions","text":"<p>Uma fun\u00e7\u00e3o de dispers\u00e3o \u00e9 utilizada para espalhar os elementos que queremos armazenar e deve satisfazer as seguintes condi\u00e7\u00f5es: </p> <ul> <li>produzir um n\u00famero baixo de colis\u00f5es;</li> <li>ser facilmente comput\u00e1vel;</li> <li>ser uniforme.</li> </ul> <p>O M\u00e9todo da Divis\u00e3o costuma ser o mais f\u00e1cil e eficiente, al\u00e9m de ser muito utilizado. Existem alguns crit\u00e9rios em rela\u00e7\u00e3o ao tamanho da tabela que ajudam a obter resultados mais pr\u00e1ticos, tais como:</p> <ul> <li>O tamanho da tabela n\u00e3o deve ser n\u00famero par;</li> <li>N\u00e3o deve ser pot\u00eancia de 2;</li> <li>Deve ser, de prefer\u00eancia, um n\u00famero primo.</li> </ul> <p>Al\u00e9m do M\u00e9todo da Divis\u00e3o, podemos usar o M\u00e9todo da Dobra e o M\u00e9todo da Multiplica\u00e7\u00e3o .</p>"},{"location":"estrutura_dados/hash-table/#transformacao-alfa-numerica","title":"Transforma\u00e7\u00e3o Alfa-num\u00e9rica","text":"<p>Tamb\u00e9m temos casos em que as chaves n\u00e3o s\u00e3o valores num\u00e9ricos, como o nome de pessoas. A solu\u00e7\u00e3o para isso \u00e9 transformar o texto em n\u00famero, j\u00e1 que, do ponto de vista do computador, todos os dados s\u00e3o representa\u00e7\u00f5es num\u00e9ricas.</p> <p>Como na tabela ASCII existe um inteiro associado a um caractere, podemos somar caractere por caractere para obter uma chave num\u00e9rica. Se temos uma chave de valor \"Fulano\", teremos ap\u00f3s a fun\u00e7\u00e3o, uma chave de valor 613.</p> Caractere Inteiro \"F\" 70 \"u\" 117 \"l\" 108 \"a\" 97 \"n\" 110 \"o\" 111 Soma: 613"},{"location":"estrutura_dados/hash-table/#tratamento-de-colisoes","title":"Tratamento de Colis\u00f5es","text":"<p>As colis\u00f5es ocorrem quando chaves diferentes s\u00e3o mapeadas para o mesmo endere\u00e7o de mem\u00f3ria, o que pode causar ambiguidades sobre o registro que dever\u00e1 ocupar aquele endere\u00e7o de mem\u00f3ria.</p> <p>Para resolver colis\u00f5es, podemos utilizar tanto um espa\u00e7o de mem\u00f3ria adicional quanto um espa\u00e7o no pr\u00f3prio arranjo.</p>"},{"location":"estrutura_dados/hash-table/#encadeamento-separado","title":"Encadeamento Separado","text":"<p>Tamb\u00e9m conhecido como encadeamento exterior, ou em ingl\u00eas como separate chaining.</p> <p>Cada c\u00e9lula da tabela hash seria na verdade um ponteiro para uma lista encadeada, com isso as colis\u00f5es s\u00e3o mantidas em uma estrutura de dados separada.  </p>"},{"location":"estrutura_dados/hash-table/#teste-linear","title":"Teste Linear","text":"<p>Tamb\u00e9m conhecido como sondagem linear ou em ingl\u00eas, como linear probing, open adressing ou rehash .</p> <p>Quando ocorre uma colis\u00e3o, percorre-se a tabela hash buscando por uma posi\u00e7\u00e3o ainda n\u00e3o ocupada.</p> <p>As colis\u00f5es ser\u00e3o tratadas sem aloca\u00e7\u00e3o de mem\u00f3ria adicional, ou seja, todos os elementos est\u00e3o armazenados na pr\u00f3pria tabela hash.</p>"},{"location":"estrutura_dados/hash-table/#fator-de-carga","title":"Fator de Carga","text":"<ul> <li>Fator de carga \u00e9 a divis\u00e3o dos n\u00fameros ocupados em uma tabela pelo tamanho total da tabela.</li> <li>Quanto maior o fator de carga, mais lento \u00e9 o processo de recupera\u00e7\u00e3o. </li> <li>No encadeamento separado, o fator de carga assume valor maior que 1.</li> <li>No encadeamento aberto, o fator de carga assume valor entre 0 e 1.</li> </ul>"},{"location":"estrutura_dados/hash-table/#aplicacoes-da-tabela-hash","title":"Aplica\u00e7\u00f5es da Tabela Hash","text":"<ul> <li>Busca de elementos em base de dados.</li> <li>Verifica\u00e7\u00e3o de integridade de dados e autentica\u00e7\u00e3o de mensagens. </li> <li>Armazenamento de senhas com seguran\u00e7a.</li> <li>Criptografia (MD5 e SHA).</li> </ul>"},{"location":"estrutura_dados/hash-table/#referencias","title":"Refer\u00eancias","text":"<ul> <li>IFRN - Estrutura de Dados- Profa. Camila Taumaturgo</li> <li>USP - Hash Table - Apresenta\u00e7\u00e3o</li> <li>Medium - Jamin Lee - Has Table Animations</li> <li>IME - USP - Hashing</li> <li>Acervo Lima - Encadeamento Separado </li> </ul>"},{"location":"estrutura_dados/lista-ligada/","title":"Listas Encadeadas / Linked Lists","text":""},{"location":"estrutura_dados/lista-ligada/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Uma lista ligada \u00e9 uma lista linear que a ordem l\u00f3gica dos elementos n\u00e3o \u00e9 a mesma da ordem f\u00edsica.</p> <p>Os elementos est\u00e3o em sequ\u00eancia, ou seja, tem exatamente um sucessor e um predecessor, por\u00e9m,  estes elementos est\u00e3o espalhados na mem\u00f3ria.</p> <p>Cada elemento precisa indicar em que endere\u00e7o o seu sucessor pode ser encontrado de modo a manter a ordem l\u00f3gica.</p> <p>Isso \u00e9 feito atrav\u00e9s de um ponteiro.</p>"},{"location":"estrutura_dados/lista-ligada/#vantagens","title":"Vantagens:","text":"<ul> <li>Maior controle na inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos.</li> <li>N\u00famero de elementos pode aumentar ou diminuir durante a execu\u00e7\u00e3o do programa.</li> <li>A manuten\u00e7\u00e3o da ordem l\u00f3gica n\u00e3o exigir\u00e1 deslocamentos de elementos.</li> </ul>"},{"location":"estrutura_dados/lista-ligada/#desvantagens","title":"Desvantagens:","text":"<ul> <li>Retira o acesso em tempo constante a qualquer elemento, dado o \u00edndice do elemento.</li> <li>Precisa percorrer todos os elementos predecessores, um por um.</li> <li>A busca bin\u00e1ria deixa de fazer sentido.</li> </ul>"},{"location":"estrutura_dados/lista-ligada/#implementacao-de-pilha","title":"Implementa\u00e7\u00e3o de Pilha","text":"<p>O c\u00f3digo abaixo foi implementado na videoaula 08 usando o conceito de pilha com listas encadeadas, e a finalidade deste c\u00f3digo \u00e9 verificar a se todos os par\u00eanteses, colchetes e chaves abertos em um determinado texto, foram corretamente fechados. </p>"},{"location":"estrutura_dados/lista-ligada/#codigo","title":"C\u00f3digo","text":"node_type.hstack.hstack_alinhamento.cppstack_encadeamento.cpp <pre><code>    typedef char ItemType;\n/*\n     Estrutura usada para guardar \n     a informa\u00e7\u00e3o e o endere\u00e7o do \n     pr\u00f3ximo elemento.\n    */\nstruct NodeType\n{\nItemType info;\nNodeType* next;\n};\n</code></pre> <pre><code>    #include \"node_type.h\"\nclass Stack {\npublic:\nStack();  // Construtor       \n~Stack(); // Destrutor\nbool isEmpty() const;\nbool isFull() const;\nvoid print() const;\nvoid push(ItemType);\nItemType pop();  private:\nNodeType* structure;\n};        </code></pre> <pre><code>    #include \"stack.h\"\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nItemType character;\nStack stack;  ItemType stackItem;\ncout &lt;&lt; \"Insira uma string.\" &lt;&lt; endl;\ncin.get(character);\nbool isMatched = true;  while (isMatched &amp;&amp; character != '\\n')\n{\nif (character == '{' || character== '(' || character==  '['){  stack.push(character);\n}\nif(character == '}' || character== ')' || character==  ']'){    if (stack.isEmpty()) {\nisMatched = false;\n} else {\nstackItem = stack.pop();\nisMatched = (\n(character == '}' &amp;&amp; stackItem== '{')\n|| (character== ')' &amp;&amp; stackItem == '(')\n|| (character== ']' &amp;&amp; stackItem == '[')\n);\n}\n}\ncin.get(character);\n}\nif (isMatched &amp;&amp; stack.isEmpty() ) {\ncout &lt;&lt; \"Bem formada \\n\";\n} else {\ncout &lt;&lt; \"Mal formada \\n\";\n}\n}    </code></pre> <pre><code>    #include \"stack.h\"\n#include &lt;cstddef&gt; // Para funcionar o NULL\n#include &lt;new&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nStack::Stack(){\nstructure = NULL;\n}\nStack::~Stack(){\nNodeType* tempPtr;\nwhile (structure != NULL) {\ntempPtr = structure;\nstructure  = structure -&gt; next;\ndelete tempPtr;\n}\n}\nbool Stack::isEmpty() const {\nreturn (structure == NULL);\n}\n/*\n      Aqui eu simplesmente verifico se o usu\u00e1rio possui mem\u00f3ria\n      dispon\u00edvel para alocar um novo elemento.\n    */\nbool Stack::isFull() const {\nNodeType* location;\ntry {\nlocation = new NodeType;\ndelete location;\nreturn false;\n} catch(std::bad_alloc exception){\nreturn true;\n}  }\n/*\n      Adicionar um novo item no topo da pilha. O n\u00f3 que acabamos de criar\n      deve apontar para quem estava no topo da pilha e o ponteiro\n      structure dever\u00e1 apontar para o novo n\u00f3.\n     */\nvoid Stack::push(ItemType item){\nif (!isFull()){\nNodeType* location;\nlocation = new NodeType;\nlocation-&gt;info = item;\nlocation-&gt;next = structure;\nstructure = location;\n} else {\nthrow \"Stack is already full!\";\n}\n}\n/*\n      Devolve o objeto que est\u00e1 no topo da pilha. \n     */\nItemType Stack::pop(){\nif (!isEmpty()) {\nNodeType* tempPtr;\ntempPtr = structure;\nItemType item = structure-&gt;info;\nstructure        = structure-&gt;next;\ndelete tempPtr;\nreturn item;\n} else {\nthrow \"Stack is empty!\";\n}\n}\nvoid Stack::print() const\n{\nNodeType* tempPtr = structure;\nwhile (tempPtr != NULL) {\ncout &lt;&lt; tempPtr-&gt;info;\ntempPtr  = tempPtr-&gt;next;\n}  cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"estrutura_dados/lista-ligada/#alguns-detalhes-da-implementacao","title":"Alguns detalhes da implementa\u00e7\u00e3o","text":"<ul> <li><code>typedef</code> \u00e9 usado para definir previamente o tipo de uma vari\u00e1vel;</li> <li><code>private</code> / <code>public</code> s\u00e3o n\u00edveis de configura\u00e7\u00e3o/permiss\u00e3o dentro de uma classe;</li> <li><code>struct</code> parecido com classe, por\u00e9m, toda a interface \u00e9 p\u00fablica;</li> <li><code>-&gt;</code> este sinal serve para acessar os campos de um ponteiro;  </li> <li>O ponteiro structure sempre apontar\u00e1 para o elemento que est\u00e1 no topo da pilha.</li> <li>Os arquivos com final \".h\" cont\u00e9m classes ou structs que dever\u00e3o ser inclu\u00eddas nos demais c\u00f3digos; </li> <li>O arquivo \"stack_encadeamento.cpp\" define o comportamento das fun\u00e7\u00f5es,</li> <li>O arquivo \"stack_encadeamento.cpp\" cont\u00e9m a main(), que chama de modo ordenado todas as demais fun\u00e7\u00f5es.</li> </ul>"},{"location":"estrutura_dados/lista-ligada/#exemplo-de-saida","title":"Exemplo de Sa\u00edda","text":""},{"location":"estrutura_dados/lista-ligada/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Prof. Douglas Maioli - Aula 05 Estrutura de Dados - Lista Encadeada</li> <li>Prof. Douglas Maioli - Aula 06 - Estrutura de Dados - Lista Encadeada</li> </ul>"},{"location":"estrutura_dados/pointer/","title":"C++ Ponteiro","text":"<p>Com ponteiros a execu\u00e7\u00e3o de tarefas de programa\u00e7\u00e3o podem ser simplificadas, e algumas tarefas,  como a aloca\u00e7\u00e3o din\u00e2mica da mem\u00f3ria, s\u00f3 podem ser relizadas com ponteiros.</p>"},{"location":"estrutura_dados/pointer/#endereco-de-variaveis","title":"Endere\u00e7o de vari\u00e1veis","text":"<p>Cada vari\u00e1vel tem seu local na mem\u00f3ria e cada local define um endere\u00e7o que pode ser acessado utilizando o operador \"E comercial\" (&amp;), que representa um endere\u00e7o na mem\u00f3ria. O exemplo abaixo ir\u00e1 retornar o endere\u00e7o de uma vari\u00e1vel definida: </p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint var1;\nchar var2[10];\ncout &lt;&lt; \"Endere\u00e7o da vari\u00e1vel var1: \";\ncout &lt;&lt; &amp;var1 &lt;&lt; endl;\ncout &lt;&lt; \"Endere\u00e7o da vari\u00e1vel var2 : \";\ncout &lt;&lt; &amp;var2 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Ap\u00f3s compila\u00e7\u00e3o e execu\u00e7\u00e3o, temos o seguinte resultado:</p> <pre><code>Endere\u00e7o da vari\u00e1vel var1: 0x7fffc99d6578\nEndere\u00e7o da vari\u00e1vel var2 : 0x7fffc99d657e\n</code></pre>"},{"location":"estrutura_dados/pointer/#ponteiro","title":"Ponteiro","text":"<p>Depois de ter visto o que \u00e9 um endere\u00e7o na mem\u00f3ria e como acess\u00e1-lo, o entendimento de um ponteiro ser\u00e1 mais f\u00e1cil. Ponteiro \u00e9 uma vari\u00e1vel cujo valor \u00e9 o endere\u00e7o de outra vari\u00e1vel, ou seja, o endere\u00e7o direto de uma loca\u00e7\u00e3o na mem\u00f3ria. Como qualquer vari\u00e1vel ou constante, um ponteiro deve ser declarado antes de us\u00e1-lo para armazenar o endere\u00e7o de outra vari\u00e1vel. De forma geral, um ponteiro se declara assim:</p> <p><pre><code>int *number; /* um ponteiro para vari\u00e1veis do tipo inteiro */ float *decimal_number; /* um ponteiro para um float*/\nchar *character; /* um ponteiro para vari\u00e1veis do tipo char */\n</code></pre> Todo ponteiro \u00e9 um longo hexadecimal representando um endere\u00e7o na mem\u00f3ria.</p>"},{"location":"estrutura_dados/pointer/#usando-ponteiros","title":"Usando Ponteiros","text":"<p>Para usar o ponteiro, normalmente seguimos os seguintes passos:  1. Definir um ponteiro; 2. Atribuir o endere\u00e7o da vari\u00e1vel ao ponteiro; 3. Acessar o valor do endere\u00e7o dispon\u00edvel na vari\u00e1vel ponteiro.</p> <p>Isso ir\u00e1 retornar o valor da vari\u00e1vel no endere\u00e7o espec\u00edfico pelo operador * . Exemplo:</p> <p><pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint var = 20; // declara\u00e7\u00e3o de vari\u00e1vel\nint *int_pointer; // declara\u00e7\u00e3o da vari\u00e1vel ponteiro\nint_pointer = &amp;var; // armazena o endere\u00e7o da \"var\" no espec\u00edfico ponteiro\ncout &lt;&lt; \"Valor da vari\u00e1vel var: \";\ncout &lt;&lt; var &lt;&lt; endl;\n// gera o endere\u00e7o armazenado na vari\u00e1vel ponteiro\ncout &lt;&lt; \"Endere\u00e7o armazenado na vari\u00e1vel int_pointer: \";\ncout &lt;&lt; int_pointer &lt;&lt; endl;\n// accessa o valor do endere\u00e7o no ponteiro\ncout &lt;&lt; \"Valor da vari\u00e1vel *int_pointer: \";\ncout &lt;&lt; *int_pointer &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> Ap\u00f3s compilar e executar temos o seguinte resultado:</p> <p></p>"},{"location":"estrutura_dados/pointer/#referencias","title":"Refer\u00eancias","text":"<p>https://cplusplus.com/doc/tutorial/pointers/</p> <p>https://www.simplilearn.com/tutorials/cpp-tutorial/pointers-in-cpp</p> <p>https://iditect.com/guide/cplusplus/cpp-pointers.html</p>"},{"location":"estrutura_dados/referencias-e-copias/","title":"Refer\u00eancias e C\u00f3pias (Valor)","text":"<p>Em C++, podemos passar argumentos e retornar vari\u00e1veis por refer\u00eancia ou valor, isto \u00e9, uma c\u00f3pia. A escolha entre um e outro est\u00e1 relacionada com a performance do programa e boas pr\u00e1ticas. Para entendermos bem, uma revisada em aloca\u00e7\u00e3o est\u00e1tica vs din\u00e2mica \u00e9 importante.</p>"},{"location":"estrutura_dados/referencias-e-copias/#antes-de-comecarmos","title":"Antes de come\u00e7armos","text":"<p>Para os estudos nessa se\u00e7\u00e3o, vamos apresentar uma classe que ir\u00e1 expor quando um objeto \u00e9 criado, destruido, copiado ou atribuido. Assim, ficar\u00e1 claro o momento exato de cada processo. Nosso objeto ter\u00e1 a seguinte interface, no arquivo <code>obj.h</code>:</p> <p><pre><code>#ifndef OBJ_H\n#define OBJ_H\nclass OBJ\n{\nprivate:\nstatic int count;\nint id;\nint cp;\npublic:\nObj();\n~Obj();\nObj(const Obj&amp; o);\nObj&amp; operator = (const Obj&amp; o);\nvoid print_id_address();\nvoid print_cp_address();\nvoid print_obj_address();\nvoid print_full_address();\n};\n#endif\n</code></pre> Cada um dos membros tem a seguinte fun\u00e7\u00e3o:</p> <ul> <li>count : respons\u00e1vel por gerar n\u00fameros sequenciais, assim podemos criar identificadores \u00fanicos para cada objeto;</li> <li>id : respons\u00e1vel por armazenar o identificador \u00fanico do objeto;</li> <li>cp : respons\u00e1vel por armazenar a origem do objeto copiado ou atribuido, quando construido do zero, ele recebe o pr\u00f3prio <code>id</code>;</li> <li>Obj() : \u00e9 o construtor;</li> <li>~Obj() : \u00e9 o destrutor;</li> <li>Obj(const Obj&amp; o) : \u00e9 o construtor de c\u00f3pia;</li> <li>Obj&amp; operator = (const Obj&amp; o) : \u00e9 o operador de atribui\u00e7\u00e3o, isto \u00e9, (=);</li> <li>print_... : s\u00e3o respons\u00e1veis por imprimir endere\u00e7os das vari\u00e1veis;</li> </ul> <p>A implementa\u00e7\u00e3o encontra-se no arquvio <code>obj.cpp</code>, a l\u00f3gica por tr\u00e1s da classe \u00e9 incrementar <code>count</code> a cada chamada de construtor, c\u00f3pia ou atribui\u00e7\u00e3o passando esse valor para o <code>id</code>. Quando h\u00e1 c\u00f3pia ou atribui\u00e7\u00e3o, o <code>id</code> do objeto copiado \u00e9 passado para o objeto final em <code>cp</code>. Para sabermos quando cada m\u00e9todo \u00e9 invocado, usamos um print com o <code>id</code> e/ou <code>cp</code>.</p>"},{"location":"estrutura_dados/referencias-e-copias/#alocacao-de-memoria-estatica-vs-dinamica","title":"Aloca\u00e7\u00e3o de Mem\u00f3ria: Est\u00e1tica vs Din\u00e2mica","text":"<p>Quando executamos um processo, precisamos reservar mem\u00f3ria para ele. Essa mem\u00f3ria \u00e9 dividida em sess\u00f5es sendo as principais: stack e heap. Toda vez que chamamos uma fun\u00e7\u00e3o, a pilha de execu\u00e7\u00e3o recebe um push armazenando vari\u00e1veis e instru\u00e7\u00f5es na stack. Quando a fun\u00e7\u00e3o encerra, tudo que foi armazenado na stack \u00e9 liberado, isto \u00e9, pode ser sobreescrito por uma nova chamada. Ex:</p> <p><pre><code>void test_static_alloc()\n{\nstd::cout &lt;&lt; \"Inicio Alocacao Estatica\\n\";\nObj o;\nstd::cout &lt;&lt; \"Final Alocacao Estatica\\n;\n}\n</code></pre> Se executarmos essa fun\u00e7\u00e3o, ela gera o seguinte output:</p> <pre><code>Inicio Alocacao Estatica\nConstrutor Objeto(1)\nFinal Alocacao Estatica\nDestrutor Objeto(1) chamado\n</code></pre> <p>Como pode observar, o objeto \u00e9 criado no exato momento em que \u00e9 definido e \u00e9 destruido ap\u00f3s encerrar o programa. J\u00e1 na aloca\u00e7\u00e3o din\u00e2mica, temos a responsabilidade de liberar a mem\u00f3ria, no caso de objetos, invocar seu destrutor. Para alocarmos dinamicamente, usamos <code>new</code> e para liberar <code>delete</code>. Vari\u00e1veis alocadas dinamicamente s\u00e3o armazenadas no heap, assim elas podem permanecer armazenadas ap\u00f3s o final da fun\u00e7\u00e3o. Ex:</p> <pre><code>void test_dynamic_alloc()\n{\nstd::cout &lt;&lt; \"Inicio Alocacao Dinamica\\n\";\nObj* o = new Obj();\ndelete o;\nstd::cout &lt;&lt; \"Final Alocacao Dinamica\\n\";\n}\n</code></pre> <p>Repare que estamos usando ponteiros, isso porque o operador <code>new</code>nos retorna um ponteiro e devemos manter o endere\u00e7o de mem\u00f3ria sempre armazenado em alguma vari\u00e1vel. Assim, podemos liberar aquele endere\u00e7o. Outro ponto importante \u00e9: n\u00e3o devemos usar <code>delete</code> num endere\u00e7o j\u00e1 liberado, o resultado dessa opera\u00e7\u00e3o \u00e9 indefinido.</p> <p>A fun\u00e7\u00e3o anterior gera o seguinte output:</p> <pre><code>Inicio Alocacao Dinamica\nConstrutor Objeto(2) chamado\nDestrutor Objeto(2) chamado\nFinal Alocacao Dinamica\n</code></pre> <p>Repare que o construtor continua sendo chamado no momento da defini\u00e7\u00e3o, mas agora temos total controle do momento em que o destrutor \u00e9 chamado, podendo inclusive ser invocado fora do escopo da fun\u00e7\u00e3o, desde que temos o endere\u00e7o da mem\u00f3ria alocada.</p> <p>No pr\u00f3ximo exemplo, temos um vazamento de mem\u00f3ria e uma prova de que o objeto persiste armazenado mesmo ap\u00f3s o final da execu\u00e7\u00e3o do programa. Em sistemas operacionais modernos, a mem\u00f3ria de um processo \u00e9 sempre monitorada para  libera-la ao final da execu\u00e7\u00e3o, mesmo que o programa n\u00e3o a libere.</p> <p><pre><code>void test_memory_leak()\n{\nstd::cout &lt;&lt; \"Inicio Vazamento de Memoria\\n\";\nObj* o = new Obj();\nstd::cout &lt;&lt; \"Final Vazamento de Memoria\\n\";\n}\n</code></pre> Output: <pre><code>Inicio Vazamento de Memoria\nConstrutor Objeto(13) chamado\nFinal Vazamento de Memoria\n</code></pre></p> <p>Repare que o Objeto(13) n\u00e3o ser\u00e1 destru\u00eddo ao longo do programa.</p>"},{"location":"estrutura_dados/referencias-e-copias/#array","title":"Array","text":"<p>A sintaxe para aloca\u00e7\u00e3o est\u00e1tica e din\u00e2mica de arrays \u00e9 muito similar e revela a forma correta de liberar mem\u00f3ria: devemos liberar na ordem inversa que alocamos. Assim, temos as seguintes fun\u00e7\u00f5es e seus outputs:</p> <p><pre><code>void test_static_alloc_array()\n{\nstd::cout &lt;&lt; \"Inicio Alocacao Estatica Array\\n\";\nObj o[5];\nstd::cout &lt;&lt; \"Final Alocacao Estatica Array\\n\";\n}\nvoid test_dynamic_alloc_array()\n{\nstd::cout &lt;&lt; \"Inicio Alocacao Dinamica Array\\n\";\nObj* o = new Obj[5];\ndelete [] o;\nstd::cout &lt;&lt; \"Final Alocacao Dinamica Array\\n\";\n}\n</code></pre> <pre><code>Inicio Alocacao Estatica de Array\nConstrutor Objeto(3) chamado\nConstrutor Objeto(4) chamado\nConstrutor Objeto(5) chamado\nConstrutor Objeto(6) chamado\nConstrutor Objeto(7) chamado\nFinal Alocacao Estatica de Array\nDestrutor Objeto(7) chamado\nDestrutor Objeto(6) chamado\nDestrutor Objeto(5) chamado\nDestrutor Objeto(4) chamado\nDestrutor Objeto(3) chamado\nInicio Alocacao Dinamica de Array\nConstrutor Objeto(8) chamado\nConstrutor Objeto(9) chamado\nConstrutor Objeto(10) chamado\nConstrutor Objeto(11) chamado\nConstrutor Objeto(12) chamado\nDestrutor Objeto(12) chamado\nDestrutor Objeto(11) chamado\nDestrutor Objeto(10) chamado\nDestrutor Objeto(9) chamado\nDestrutor Objeto(8) chamado\nFinal Alocaco Dinamica de Array\n</code></pre></p>"},{"location":"estrutura_dados/referencias-e-copias/#passagem-de-argumentos-valor-vs-referencia","title":"Passagem de Argumentos: Valor vs Refer\u00eancia","text":"<p>Em C++, ao contr\u00e1rio de outras linguagens, podemos passar objetos por valor ou refer\u00eancia. Quando passamos um objeto por valor, uma c\u00f3pia \u00e9 criada e armazenada na stack, e como vimos, \u00e9 destru\u00eddo quando a fun\u00e7\u00e3o encerra. Por  outro lado, quando passamos por refer\u00eancia, estamos passando um alias, isto \u00e9, um outro identificador para o mesmo objeto v\u00e1lido. Assim, ele tem efeito fora do escopo daquela fun\u00e7\u00e3o, ou seja, podemos modific\u00e1-lo sem precisar retornar.</p> <p>Para testar as fun\u00e7\u00f5es abaixo, lembre-se de passar um objeto para fun\u00e7\u00e3o.</p> <p><pre><code>void test_pass_by_value(Obj o, int i)\n{\nprintf(\"Inicio Passar Por Valor %d\\n\", i);\nif (i == 0) {\nstd::cout &lt;&lt; \"Endereco de Obj antes:\" &lt;&lt; &amp;o &lt;&lt; std::endl;\ntest_pass_by_value(o, i + 1);\n} else {\nstd::cout &lt;&lt; \"Endereco de Obj depois:\" &lt;&lt; &amp;o &lt;&lt; std::endl;\n}\nprintf(\"Final Passar Por Valor %d\\n\",i);\n}\nvoid test_pass_by_ref(Obj&amp; o, int i)\n{\nprintf(\"Inicio Passar Por Referencia %d\\n\", i);\nif (i == 0) {\nstd::cout &lt;&lt; \"Endereco de Obj antes:\" &lt;&lt; &amp;o &lt;&lt; std::endl;\ntest_pass_by_ref(o, i + 1);\n} else {\nstd::cout &lt;&lt; \"Endereco de Obj depois:\" &lt;&lt; &amp;o &lt;&lt; std::endl;\n}\nprintf(\"Final Passar Por Referencia %d\\n\", i);\n}\n</code></pre> <pre><code>Construtor Copia de (0) para Objeto(14) chamado\nInicio Passar Por Valor 0\nEndereco de Obj antes:0x7ffd6ba2f5b8\nConstrutor Copia de (14) para Objeto(15) chamado\nInicio Passar Por Valor 1\nEndereco de Obj depois:0x7ffd6ba2f578\nFinal Passar Por Valor 1\nDestrutor Objeto(15) chamado\nFinal Passar Por Valor 0\nDestrutor Objeto(14) chamado\nInicio Passar Por Referencia 0\nEndereco de Obj antes:0x7ffd6ba2f5b0\nInicio Passar Por Referencia 1\nEndereco de Obj depois:0x7ffd6ba2f5b0\nFinal Passar Por Referencia 1\nFinal Passar Por Referencia 0\n</code></pre> Repare que, quando passamos por valor, o construtor de c\u00f3pia \u00e9 chamado, enquanto que, quando passamos por refer\u00eancia, ele n\u00e3o \u00e9. Outro ponto \u00e9 que o endere\u00e7o se mant\u00e9m. Isso implica que passar por refer\u00eancia \u00e9 mais perform\u00e1tico que passar por valor, usando menos processamento e mem\u00f3ria.</p>"},{"location":"estrutura_dados/referencias-e-copias/#retornar-e-atribuir","title":"Retornar e Atribuir","text":""},{"location":"estrutura_dados/referencias-e-copias/#por-valor","title":"Por Valor","text":"<p>No caso de retornar objetos existe uma peculiaridade: dependendo do compilador usado, existem otimiza\u00e7\u00f5es no retorno por valor que n\u00e3o geram c\u00f3pias. Essa op\u00e7\u00e2o pode ser desabilitada passando <code>--fno-elide-construtors</code> no momento da compila\u00e7\u00e3o se estiver utilizando <code>g++</code>.</p> <p>Por enquanto, vamos analisar o resultado com essa otimiza\u00e7\u00e3o, que evita chamadas desnecess\u00e1rias ao construtor de c\u00f3pia.</p> <p><pre><code>Obj test_return_by_value()\n{\ncout &lt;&lt; \"Inicio Retornar por Valor\\n\";\nObj o;\ncout &lt;&lt; \"Final Retornar Por Valor\\n\";\nreturn o;\n}\nvoid test_assignment_by_value()\n{\ncout &lt;&lt; \"Inicio Atribuicao Por Valor\\n\";\nObj o;\no.print_full_address();\no = test_return_by_value();\no.print_full_address();\nObj p = test_return_by_value();\ncout &lt;&lt; \"Final Atribuicao por Valor\\n\";\n}\n</code></pre> Usando apenas a fun\u00e7\u00e3o <code>test_assignment_by_value()</code>, obtemos o seguinte: <pre><code>Inicio Atribuicao Por Valor\nConstrutor Objeto(16) chamado\nEndereco de Obj: 0x7ffd6ba2f570\nEndereco do ID: 0x7ffd6ba2f570\nEndereco de CP: 0x7ffd6ba2f574\nInicio Retornar por Valor\nConstrutor Objeto(17) chamado\nFinal Retornar Por Valor\nOperador Atribui de (17) para Objeto(16) chamado\nDestrutor Objeto(17) chamado\nEndereco de Obj: 0x7ffd6ba2f570\nEndereco do ID: 0x7ffd6ba2f570\nEndereco de CP: 0x7ffd6ba2f574\nInicio Retornar por Valor\nConstrutor Objeto(18) chamado\nFinal Retornar Por Valor\nFinal Atribuicao por Valor\nDestrutor Objeto(18) chamado\nDestrutor Objeto(16) chamado\n</code></pre> Observe que o endere\u00e7o do objeto atribuido n\u00e3o se altera, nem suas vari\u00e1veis. Como criamos um objeto dentro de <code>test_return_by_value()</code>, vemos a sua cria\u00e7\u00e3o e, em seguida, ocorre a atribui\u00e7\u00e3o Objeto(16) = Objeto(17). Por\u00e9m, logo que a fun\u00e7\u00e3o encerra, o Objeto(17) \u00e9 destruido. No segundo caso, vemos o resultado da otimiza\u00e7\u00e3o, pois o objeto \u00e9 criado dentro da fun\u00e7\u00e3o e retornado. Isso ocorre, pois a declara\u00e7\u00e3o/defini\u00e7\u00e3o e atribui\u00e7\u00e3o est\u00e3o na mesma linha. Se desativar a  otimiza\u00e7\u00e3o, poder\u00e1 observar que o processo de c\u00f3pia e destrui\u00e7\u00e3o ocorre em ambos os casos. Ex:</p> <pre><code>Inicio Atribuicao Por Valor\nConstrutor Objeto(16) chamado\nEndereco de Obj: 0x7fff7f2cdb48\nEndereco do ID: 0x7fff7f2cdb48\nEndereco de CP: 0x7fff7f2cdb4c\nInicio Retornar por Valor\nConstrutor Objeto(17) chamado\nFinal Retornar Por Valor\nConstrutor Copia de (17) para Objeto(18) chamado\nDestrutor Objeto(17) chamado\nOperador Atribui de (18) para Objeto(16) chamado\nDestrutor Objeto(18) chamado\nEndereco de Obj: 0x7fff7f2cdb48\nEndereco do ID: 0x7fff7f2cdb48\nEndereco de CP: 0x7fff7f2cdb4c\nInicio Retornar por Valor\nConstrutor Objeto(19) chamado\nFinal Retornar Por Valor\nConstrutor Copia de (19) para Objeto(20) chamado\nDestrutor Objeto(19) chamado\nConstrutor Copia de (20) para Objeto(21) chamado\nDestrutor Objeto(20) chamado\nFinal Atribuicao por Valor\nDestrutor Objeto(21) chamado\nDestrutor Objeto(16) chamado\n</code></pre>"},{"location":"estrutura_dados/referencias-e-copias/#por-referencia","title":"Por Refer\u00eancia","text":"<p>Retornar por refer\u00eancia possui uma s\u00e9rie de particularidades, e, se est\u00e1 iniciando, evite usar essa t\u00e9cnica. Por outro lado, seu principal uso \u00e9 a sobrecarga de operadores, como a que fizemos para atribuir. A regra principal a ser seguida \u00e9: nunca crie uma vari\u00e1vel local e a retorne por refer\u00eancia, pois seu endere\u00e7o ser\u00e1 liberado criando o chamado dangling pointer gerando comportamento indefinido da aplica\u00e7\u00e3o. Aqui, mostramos um exemplo e o resultado do output:</p> <p><pre><code>Obj&amp; test_return_by_ref(Obj&amp; o)\n{\ncout &lt;&lt; \"Inicio Retornar por Referencia\\n\";\ncout &lt;&lt; \"Final Retornar por Referencia\\n\";\nreturn o;\n}\nvoid test_assignment_by_ref()\n{\ncout &lt;&lt; \"Inicio Atribuicao por Referencia\\n\";\nObj o;\no.print_full_address();\nObj&amp; p = test_return_by_ref(o);\np.print_full_address();\ncout &lt;&lt; \"Final Atribuicao por Referencia\\n\";\n}\n</code></pre> Usando apenas <code>test_assingment_by_ref()</code>: <pre><code>Inicio Atribuicao por Referencia\nConstrutor Objeto(22) chamado\nEndereco de Obj: 0x7fff7f2cdb50\nEndereco do ID: 0x7fff7f2cdb50\nEndereco de CP: 0x7fff7f2cdb54\nInicio Retornar por Referencia\nFinal Retornar por Referencia\nEndereco de Obj: 0x7fff7f2cdb50\nEndereco do ID: 0x7fff7f2cdb50\nEndereco de CP: 0x7fff7f2cdb54\nFinal Atribuicao por Referencia\nDestrutor Objeto(22) chamado\n</code></pre> Repare que s\u00f3 um construtor \u00e9 chamado. Esse resultado \u00e9 independente da otimiza\u00e7\u00e3o e refor\u00e7ando: evite essa t\u00e9cnica.</p>"},{"location":"estrutura_dados/referencias-e-copias/#pratica-recomendada","title":"Pr\u00e1tica Recomendada","text":"<p>A pr\u00e1tica mais recomendada \u00e9 passar por refer\u00eancia e retornar por valor. Assim temos o c\u00f3digo mais perform\u00e1tico e seguro. Podemos tamb\u00e9m passar por refer\u00eancia e alterar o objeto gerando um efeito fora do escopo da fun\u00e7\u00e3o. Essa t\u00e9cnica \u00e9 particularmente recomendada quando queremos retornar mais de uma vari\u00e1vel ao mesmo tempo de tipos diferentes.</p> <p><pre><code>Obj test_pass_by_ref_return_by_value(Obj&amp; o)\n{\ncout &lt;&lt; \"Inicio Passagem por Referencia Retorno po Valor\\n\";\ncout &lt;&lt; \"Final Passagem por Referencia Retorno po Valor\\n\";\nreturn o;\n}\nint main()\n{\nObj o;\n...\ncout &lt;&lt; \"Pratica mais recomendada\\n\";\nObj p = test_pass_by_ref_return_by_value(o);\nreturn 0;\n}\n</code></pre> <pre><code>Pratica mais recomendada\nInicio Passagem por Referencia Retorno po Valor\nFinal Passagem por Referencia Retorno po Valor\nConstrutor Copia de (0) para Objeto(20) chamado\n</code></pre></p>"},{"location":"fundamentos_web/fund/","title":"Fundamentos de Internet e Web","text":"<p>Objetivos: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB.</p> <p>Ementa: Apresentar no\u00e7\u00f5es de conhecimentos sobre a estrutura de documentos na WEB. Ementa: Hipertexto; origens de XML e HTML (SGML); Estrutura do conte\u00fado versus apar\u00eancia do documento; tags HTML b\u00e1sicas (H1, P, etc) e extens\u00edveis (div, span, etc); tags de HTML5; Atributos b\u00e1sicos de CSS (color, text-align, etc), seletores CSS; formul\u00e1rios HTML; no\u00e7\u00f5es de manipula\u00e7\u00e3o program\u00e1tica do DOM.</p> <p>Bibliografia Base: - MILETTO, Evandro Manara; BERTAGNOLLI, Silvia de Castro. Desenvolvimento de Software II: Introdu\u00e7\u00e3o ao Desenvolvimento Web com HTML, CSS, JavaScript e PHP. 2014. Bookman. - TERUEL, Evandro Carlos. HTML 5 - Guia Pr\u00e1tico. 2014. \u00c9rica. - Flatschart, F\u00e1bio. HTML 5 Embarque Imediato. 2011. Brasport. Bibliografia Complementar: - FREEMAN, Elisabeth, FREEMAN, Eric. Use a cabe\u00e7a! HTML e CSS. 2015. Alta Books. - Duckett, Jon. HTML e CSS projete e construa Websites. 2016. Alta Books.</p>"},{"location":"fundamentos_web/glossario-web/","title":"Gloss\u00e1rio Fundamentos Web","text":""},{"location":"fundamentos_web/glossario-web/#internet","title":"Internet","text":"<p>Sistema global de redes interconectadas que usam o Protocolo da Internet (TCP/IP)  para se comunicar entre dispositivos.</p>"},{"location":"fundamentos_web/glossario-web/#web-10-apenas-leitura","title":"Web 1.0 - Apenas Leitura","text":"<p>Sistema de informa\u00e7\u00e3o interligado por hipertextos que que permitiam a leitura por parte do usu\u00e1rio.</p>"},{"location":"fundamentos_web/glossario-web/#web-20-leitura-e-escrita","title":"Web 2.0 - Leitura e Escrita","text":"<p>Surgem linguagens de programa\u00e7\u00e3o para Web: JavaScript, PHP que permitem a celebra\u00e7\u00e3o de neg\u00f3cios empresariais; era do com\u00e9rcio eletr\u00f4nico;  Leitura e a escrita de simult\u00e2nea de dados.</p>"},{"location":"fundamentos_web/glossario-web/#web-30-web-semantica","title":"Web 3.0 - Web Sem\u00e2ntica","text":"<p>Processamento significativa das informa\u00e7\u00f5es, tecnologias de personaliza\u00e7\u00e3o; HTML5 e CSS3.</p>"},{"location":"fundamentos_web/glossario-web/#web-40-internet-das-coisas","title":"Web 4.0 - Internet das Coisas","text":"<p>Uso de intelig\u00eancia artificial, aparelhos interconectados(de carros a geladeiras), simbiose da atividade humana com a da m\u00e1quina. A Web 4.0 ainda n\u00e3o se encontre bem definida.</p>"},{"location":"fundamentos_web/glossario-web/#w3-consortium","title":"W3 Consortium","text":"<p>\u00c9 a principal organiza\u00e7\u00e3o de padroniza\u00e7\u00e3o da World Wide Web. Consiste em um cons\u00f3rcio internacional com 450 membros com a finalidade de estabelecer padr\u00f5es para a cria\u00e7\u00e3o e a interpreta\u00e7\u00e3o  de conte\u00fados para a Web.</p>"},{"location":"fundamentos_web/glossario-web/#ip-internet-protocol","title":"IP - Internet Protocol","text":"<p>Protocolo da Internet: \u00e9 um protocolo de comunica\u00e7\u00e3o usado entre todas as m\u00e1quinas  em rede para encaminhamento dos dados, exemplo: 200.20.15.22.</p>"},{"location":"fundamentos_web/glossario-web/#dns-domain-name-system","title":"DNS - Domain Name System","text":"<p>Sistema de Nomes de Dom\u00ednios: \u00e9 um sistema hier\u00e1rquico e distribu\u00eddo de gest\u00e3o de nomes para computadores, servi\u00e7os ou qualquer m\u00e1quina conectada \u00e0 Internet ou a uma rede privada.</p>"},{"location":"fundamentos_web/glossario-web/#http-hypertext-tranfer-protocol","title":"HTTP - Hypertext Tranfer Protocol","text":"<p>Protocolo de Transfer\u00eancia de Hipertexto: \u00e9 um protocolo de comunica\u00e7\u00e3o utilizado para  sistemas de informa\u00e7\u00e3o de hiperm\u00eddia, distribu\u00eddos e colaborativos.</p>"},{"location":"fundamentos_web/glossario-web/#ftp-file-transfer-protocol","title":"FTP - File Transfer Protocol","text":"<p>Protocolo de Transfer\u00eancia de Arquivos: um padr\u00e3o usado para transferir arquivos entre  servidor e cliente.</p>"},{"location":"fundamentos_web/glossario-web/#web-server","title":"Web Server","text":"<p>\u00c9 o software respons\u00e1vel por aceitar uma requisi\u00e7\u00e3o via HTTP. Apache e Nginx s\u00e3o um dos servidores web mais populares.</p>"},{"location":"fundamentos_web/glossario-web/#web-clientbrowser","title":"Web Client/Browser","text":"<p>\u00c9 o software que faz a requisi\u00e7\u00e3o de conte\u00fado da Web a um servidor;  que armazena exibe o conte\u00fado do servidor na tela de cliente, usando o HTTP.</p>"},{"location":"fundamentos_web/glossario-web/#uri-uniform-resource-identifier","title":"URI - Uniform Resource Identifier","text":"<p>Identificador Uniforme de Recursos: sequ\u00eancia \u00fanica de caracteres que identificam  um endere\u00e7o l\u00f3gico ou f\u00edsico usado por tecnologias Web.</p>"},{"location":"fundamentos_web/glossario-web/#url-uniform-resource-locator","title":"URL - Uniform Resource Locator","text":"<p>Lozalizador Uniforme de Recursos: \u00e9 uma refer\u00eancia coloquial ao recurso da Web que especifica um endere\u00e7o. Exemplo: http://www.example.com/index.html. </p>"},{"location":"fundamentos_web/glossario-web/#requisicoes-http","title":"Requisi\u00e7\u00f5es HTTP","text":"<p>Por padr\u00e3o \u00e9 dividida em tr\u00eas partes:</p> <ul> <li>Linha da requisi\u00e7\u00e3o: informa o m\u00e9todo da requisi\u00e7\u00e3o, o recurso e a vers\u00e3o do HTTP. </li> <li>Linhas de cabe\u00e7alhos: inclui informa\u00e7\u00f5es complementares sobre a requisi\u00e7\u00e3o no formato campo e valor.</li> <li>Corpo da entidade:dados adicionais (arquivos, formul\u00e1rios).</li> </ul>"},{"location":"fundamentos_web/glossario-web/#html","title":"HTML","text":"<p>HyperText Markup Language \u00e9 a linguagem padr\u00e3o dos docuentos que cirvulam na web atrav\u00e9s dos protocolos HTTP. \u00c9 u documento leve que se organiza em tags.</p>"},{"location":"fundamentos_web/glossario-web/#css","title":"CSS","text":"<p>Cascading Style Sheet \u00e9 a linguagem usada para apresenta\u00e7\u00e3o do documento HTML. Com ela \u00e9 poss\u00edvel editar o layout, as cores e fontes, etc.  </p>"},{"location":"fundamentos_web/glossario-web/#referencias","title":"Refer\u00eancias","text":"<p>https://www.wikipedia.org</p> <p>https://pt.wikipedia.org/</p> <p>Desconstruindo a Web - William Molinari</p>"},{"location":"fundamentos_web/guias-tutoriais-etc/","title":"Guias, Tutoriais e Refer\u00eancias para os fundamentos da Web","text":""},{"location":"fundamentos_web/guias-tutoriais-etc/#lista-composta-de-materiais-diretamente-relacionados-aos-fundamentos-da-web","title":"Lista composta de materiais diretamente relacionados aos Fundamentos da Web.","text":""},{"location":"fundamentos_web/guias-tutoriais-etc/#ajude-nos-a-construir-essa-lista-de-suas-sugestoes","title":"Ajude-nos a construir essa lista: d\u00ea suas sugest\u00f5es!","text":""},{"location":"fundamentos_web/guias-tutoriais-etc/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Cons\u00f3rcio World Wide Web (pt-BR)</li> <li>IETF - Internet Engineering Task Force (en)</li> <li>W3 Schools  (pt-BR)</li> <li>HTTP - mdn web docs (pt-BR)</li> <li>Vocabul\u00e1rio para microdata (en)</li> <li>Can I Use? - site para verificar suporte dos brownsers a tecnologias web.</li> </ul>"},{"location":"fundamentos_web/guias-tutoriais-etc/#tutoriais","title":"Tutoriais","text":"<ul> <li>Learn to Code HTML &amp; CSS (en)</li> <li>CSS Reference (en)</li> <li>CSS Basics (en)</li> <li>Semantic HTML (en) </li> </ul>"},{"location":"fundamentos_web/guias-tutoriais-etc/#diversos","title":"Diversos","text":"<ul> <li>Os personagens do Simpsons desenhados com CSS puro</li> <li>Unsplash - Imagens de uso livre</li> <li>Figma - Software de design</li> <li>Font Awesome - \u00edcones de uso gratuito</li> <li>Fonts Google - fontes de uso gratuito</li> <li>Gradientes prontos</li> <li>Outros gradientes</li> <li>Exemplos de layouts para se inspirar</li> <li>Web Skills - habilidades Web </li> <li>Origamid - Flex Box</li> <li>CSS Tricks</li> <li>HTTP Cats - um jeito fofinho de entender Status HTTP</li> </ul>"},{"location":"fundamentos_web/html-basico/","title":"Fundamentos HTML","text":""},{"location":"fundamentos_web/html-basico/#organizacao-em-tags","title":"Organiza\u00e7\u00e3o em Tags","text":"<p><pre><code>&lt;!DOCTYPE&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt; Aqui temos um t\u00edtutlo H1&lt;/h1&gt;\n&lt;p&gt; E aqui temos um par\u00e1grafo.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> O documento HTML por padr\u00e3o sempre come\u00e7a com a tag &lt; !DOCTYPE &gt;.</p> <p>A tag &lt; html &gt; identifica o formato do documento e cont\u00e9m todas as outras tags do documento. </p> <p>A &lt; head &gt; \u00e9 a tag que guarda metadados. Seu conte\u00fado n\u00e3o \u00e9 exibido, a n\u00e3o ser no t\u00edtulo do documento, que ser\u00e1 exibido na aba pelo navegador.</p> <p>O &lt; body &gt; \u00e9 o local onde tudo o que for sendo inserido ser\u00e1 exibido na tela principal do navegador.  Dentro do body colocamos todas as outras tags que ir\u00e3o compor o documento como: main, header, navbar, aside, forms, footer.    </p>"},{"location":"fundamentos_web/html-basico/#recursos-do-html","title":"Recursos do HTML","text":"<ul> <li>Uma linguagem f\u00e1cil e simples, pode ser facilmente entendida e rapidamente praticada.</li> <li>F\u00e1cil de fazer documentos impactantes, devido a suass tags sem\u00e2nticas.</li> <li>\u00c9 uma linguagem de marca\u00e7\u00e3o, logo, ela proporciona um design flex\u00edvel.</li> <li>Facilita nossa vida ao nos permitir criar qualquer tipo de link dentro da p\u00e1gina.</li> <li>N\u00e3o depende de plataforma: roda no Windows, Mac, Linux, qualquer smartphone.</li> <li>\u00c9 um grande mundo multim\u00eddia: \u00e9 poss\u00edvel colocar gr\u00e1ficos, v\u00eddeos e sons!</li> </ul>"},{"location":"fundamentos_web/html-basico/#novos-recursos-do-html-5","title":"Novos Recursos do HTML 5","text":"<ul> <li>Novos elementos sem\u00e2nticos!</li> <li>Forms 2.0 - Novos atributos e melhorias para a tag &lt; input &gt;.</li> <li>WebSocket - Uma nova gera\u00e7\u00e3o bidirecional de comunica\u00e7\u00e3o para tecnologias web.</li> <li>Canvas - Permite desenho bidimensional utilizando JavaScript.</li> <li>Audio e V\u00eddeo - Agora isso j\u00e1 vem nativo no HTML, n\u00e3o precisa de terceiros.</li> <li>Server-Sent Events - Permite toda a ind\u00fastria de streaming.</li> <li>Geolocaliza\u00e7\u00e3o - Os visitantes podem decidir compartilhar a geolocaliza\u00e7\u00e3o com a aplica\u00e7\u00e3o web.</li> <li>Drag and drop - Arrastar e jogar, fun\u00e7\u00e3o que permite um jeito interativo de manipular arquivos.</li> <li>Microdata - Permite que o autor customize seus pr\u00f3prio elementos sem\u00e2ntico, rela\u00e7\u00e3o entre item &lt;-&gt; propriedades. </li> </ul>"},{"location":"fundamentos_web/html-basico/#encodando-caracteres","title":"Encodando caracteres","text":"<p>Os autores do documento devem informar o metadado de charset no in\u00edcio do documento:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-BR\"&gt; &lt;!-- define o idioma do documento --&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt; &lt;!-- define o tipo de letra do documento --&gt;\n&lt;title&gt;T\u00edtulo&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"fundamentos_web/html-basico/#linkando-arquivo-css","title":"Linkando arquivo CSS","text":"<p>Para fazer liga\u00e7\u00e3o com um arquivo CSS, ainda dentro da tag &lt; head &gt; abra uma tag &lt; link &gt;:</p> <pre><code>&lt;html&gt;   \n&lt;title&gt;T\u00edtulo&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"style.css\"&gt; &lt;!--linkando CSS --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"fundamentos_web/html-basico/#fazendo-conexao-com-um-arquivo-javascript","title":"Fazendo conex\u00e3o com um arquivo javaScript","text":"<p>Mediante a tag &lt; script &gt;. </p> <pre><code>&lt;html&gt;\n&lt;script src = \"js/meuscript.js\"&gt; &lt;/script&gt;\n&lt;/html&gt;\n</code></pre> <p>Com essas informa\u00e7\u00f5es voc\u00ea j\u00e1 tem seu documento HTML pronto para uso.</p>"},{"location":"fundamentos_web/html-basico/#saiba-mais","title":"Saiba mais:","text":"<ul> <li>W3 Schools</li> <li>MDN Web Docs</li> <li>Principais Tags</li> <li>O que \u00e9 a Web Sem\u00e2ntica </li> </ul>"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/","title":"Agora que voc\u00ea sabe o que \u00e9 uma rede e como ela \u00e9 composta, vamos fazer um projeto simples de rede: A conex\u00e3o entre dois computadores","text":"<p>Para isso vamos usar dois aparelhos conectados a internet, como n\u00e3o sei como voc\u00ea est\u00e1 acessando esse material, vou usar um computador e um aparelho android. Esse teste pode ser feito usando tanto android - android ou PC - PC. Basta que ambos esteja conectados na internet.</p> <p>Vamos precisar tamb\u00e9m do numero IP dos aparelhos. Meu computador tem o IP: 192.168.1.21, e  o do meu celular android \u00e9 192.168.1.3</p> <p>Agora vai no seu terminal e use o ping para se comunicar com o outro dispositivo. <pre><code>ping 192.168.1.3\n</code></pre> Para finalizar o ping digite ctrl+c ou feche o terminal.</p> <p>E ele vai retorna: <pre><code>PING 192.168.1.3 (192.168.1.3) 56(84) bytes de dados.\n64 bytes de 192.168.1.3: icmp_seq=1 ttl=64 tempo=112 ms\n64 bytes de 192.168.1.3: icmp_seq=2 ttl=64 tempo=35.3 ms\n64 bytes de 192.168.1.3: icmp_seq=3 ttl=64 tempo=53.8 ms\n64 bytes de 192.168.1.3: icmp_seq=4 ttl=64 tempo=77.2 ms\n</code></pre></p> <p>Agora se voc\u00ea n\u00e3o tem acesso a outro dispositivo, tenho uma solu\u00e7\u00e3o.</p> <p>Va l\u00e1 no seu terminal e digite: <pre><code>ping 127.0.0.1\n</code></pre></p> <p>Este tipo de endere\u00e7amento chamamos de loopback, em que ele enviar\u00e1 a informa\u00e7\u00e3o para ele mesmo para verificar se est\u00e1 tudo funcionando nesta transmiss\u00e3o interna. Lembrando que os endere\u00e7os que come\u00e7am com 127 s\u00e3o reservados para o loopback.</p> <p>Tamb\u00e9m \u00e9 possivel usar o localhost no lugar do numero IP para realizar o loopback.</p> <pre><code>ping localhost\n</code></pre>"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#para-pesquisar","title":"Para pesquisar:","text":"<p>Hub: \u00e9 um equipamento utilizado para interconectar diversos dispositivos finais. NAT \u00e9 um m\u00e9todo de tradu\u00e7\u00e3o de endere\u00e7os privados e p\u00fablicos. Servidor \u00e9 uma m\u00e1quina centralizada que oferece servi\u00e7os a um cliente (ex: computador) M\u00e1scara de rede \u00e9 usado para determinar se dois equipamentos est\u00e3o na mesma rede</p>"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#protocolos","title":"Protocolos","text":"<p>Os protocolos em redes de telecomunica\u00e7\u00f5es seguem uma hierarquia e cada um \u00e9 respons\u00e1vel por determinada fun\u00e7\u00e3o na comunica\u00e7\u00e3o. Apesar de a tecnologia ter atingido um ponto importante nos protocolos e na sua seguran\u00e7a nem sempre foi assim e dessa forma, foi criado um modelo que tinha como intuito padronizar o desenvolvimento de hardware e software dos mais variados tipos de fabricantes para que pudessem assim se comunicar, mesmo que um tivesse alguns recursos a mais que o do outro fabricante, a comunica\u00e7\u00e3o deveria ser estabelecida. Para isso, foi definido que esses protocolos de comunica\u00e7\u00e3o seriam divididos em 7 camadas de comunica\u00e7\u00e3o, o chamado modelo OSI (Open System Interconnection) . O protocolo TCP por exemplo, encontra-se na camada 4 que \u00e9 conhecida como camada de transporte, o protocolo IP encontra-se na camada 3 que \u00e9 conhecida como camada de rede. A parte de protocolos \u00e9 um assunto muito vasto e sugiro que fa\u00e7a uma pesquisa sobre o modelo OSI e os principais protocolos que temos em cada camada.</p>"},{"location":"rede/Mais%20sobre%20conex%C3%B5es/#links-uteis-para-continuar-a-aprender-sobre-redes","title":"Links uteis para continuar a aprender sobre redes","text":"<p>Para iniciar com os estudos em rede: Recomendo o conte\u00fado do Professor Guanabara que est\u00e1 disponivel no youtube</p> <p>Para se aprofundar com os estudos em rede: Recomendo o conte\u00fado do Hardware Redes Brasil qie est\u00e1 disponivel no youtube</p>"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/","title":"Para iniciar vamos nos perguntar, o que \u00e9 a rede?","text":"<p>Em termos mais simples, uma rede consiste em dois ou mais computadores que est\u00e3o conectados para compartilhar informa\u00e7\u00f5es. Todas as redes, n\u00e3o importa qu\u00e3o complexas sejam, baseiam se neste principio simples. Embora isto possa parecer como uma id\u00e9ia basica, o conceito foi uma grande conquista na \u00e1rea das comunica\u00e7\u00f5es, ou seja, desde um ambiente dom\u00e9stico, em que temos dois computadores e uma impressora, at\u00e9 grandes corpora\u00e7\u00f5es com centenas de usu\u00e1rios, m\u00e1quinas potentes com servidores, at\u00e9 a mais famosa, a internet.</p>"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#endereco-de-ip-como-chegar-la","title":"Endere\u00e7o de IP, como chegar l\u00e1?","text":"<p>Vamos lembrar como era alguns anos atr\u00e1s quando ainda envi\u00e1vamos cartas: era necessario uma carta com o destinario e o endere\u00e7o para que o carteiro saber aonde devia entregar a carta. No mundo da internet, o processo de identifica\u00e7\u00e3o ser\u00e1 parecido. O processo de identifica\u00e7\u00e3o das m\u00e1quinas \u00e9 chamado de endere\u00e7amento IP. </p> <p>Vamos abrir o terminal de comando e verificar nosso endere\u00e7o IP.</p> <p>No Mac e Linux: <pre><code>ifconfig\n</code></pre> Verificar inet</p> <p>No Windows: <pre><code>ipconfig\n</code></pre> Verificar o Endere\u00e7o IPv4</p> <p>Em todo o caso o numero do seu IP parecido com esse 192.168.1.21.</p>"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#certo-agora-sei-o-que-e-endereco-de-ip-mas-para-que-serve","title":"Certo agora sei o que \u00e9 endere\u00e7o de IP, mas para que serve?","text":"<p>Ele serve para dizer seu endere\u00e7o, ou seja, a casa que voc\u00ea mora por exemplo. E vamos tentar encontrar o endere\u00e7o do Google. Mas para isso vamos usar uma ferramenta chamada ping.</p> <p>L\u00e1 no seu terminal digite:</p> <pre><code>ping www.google.com.br\n</code></pre> <p>E voc\u00ea vai recever um retorno parecido com esse:</p> <pre><code>PING www.google.com.br (142.251.129.35) 56(84) bytes de dados.\n64 bytes de gru06s72-in-f3.1e100.net (142.251.129.35): icmp_seq=1 ttl=120 tempo=3.22 ms\n64 bytes de gru06s72-in-f3.1e100.net (142.251.129.35): icmp_seq=2 ttl=120 tempo=4.18 ms\n64 bytes de gru06s72-in-f3.1e100.net (142.251.129.35): icmp_seq=3 ttl=120 tempo=4.12 ms\n64 bytes de gru06s72-in-f3.1e100.net (142.251.129.35): icmp_seq=4 ttl=120 tempo=4.54 ms\n</code></pre> <p>E apareceu um numero estranho na primeira linha ap\u00f3s o Google, o que ser\u00e1 esse numero?</p> <p>Bem se voc\u00ea reparou no seu ip, ele \u00e9 bem parecido n\u00e9? Ent\u00e3o esse \u00e9 o numero IP do Google 142.251.129.35 se voc\u00ea copiar e colar no seu navegador ele vai te direcionar para pagina de pesquisa do Google.</p> <p>Por tr\u00e1s dos panos \u00e9 assim que a rede se conecta, claro que ainda tem um pouco mais de informa\u00e7\u00e3o envolvido mais vamos chegar l\u00e1, vou d\u00e1 algumas dicas para pesquisar: DNS, ICMP, RTT e TTL.</p> <p>DNS - Domain Name System ICMP - Internet Control Message Protocol RTT - Round trip time TTL - Time to Live</p> <p>Curiosidade: O ping usa o protocolo ICMP, para enviar uma requisi\u00e7\u00e3o (Echo Request) para m\u00e1quina remota e aguarda o retorno dessa m\u00e1quina remota (Echo Reply).</p>"},{"location":"rede/O%20que%20%C3%A9%20Rede%3F/#certo-me-conectei-no-site-do-google-que-e-uma-empresa-dos-eua-como-isso-e-possivel","title":"Certo me conectei no site do Google que \u00e9 uma empresa dos EUA, como isso \u00e9 possivel?","text":"<p>Bom, \u00e9 verdade como um computador aqui no Brasil se conectar em um computador l\u00e1 nos EUA?</p> <p>A conex\u00e3o segue por uma rota, entre voc\u00ea e o destino, ou seja, ele vai passar por diversos dispositivos que est\u00e3o mediano essa conex\u00e3o.</p> <p>Vamos abrir o terminal novamente e digite:</p> <p>No Windows: <pre><code>tracert www.google.com.br\n</code></pre></p> <p>No Mac ou Linux: <pre><code>traceroute www.google.com.br\n</code></pre></p> <p>E ele vai te responder dessa forma: <pre><code> 1  _gateway (192.168.1.21)  0.805 ms  0.757 ms  1.620 ms\n 2  10.255.1.2 (10.255.1.2)  2.803 ms  2.880 ms  2.940 ms\n 3  10.55.55.1 (10.55.55.1)  3.245 ms  3.715 ms  3.542 ms\n 4  * * *\n 5  218.30.38.13 (218.30.38.13)  4.907 ms  5.420 ms  5.667 ms\n 6  84.16.7.214 (84.16.7.214)  7.380 ms  7.712 ms  7.973 ms\n</code></pre></p> <p>Veja que o IP est\u00e1 mudando para cada linha que ele retorna, ou seja, ele est\u00e1 indo em dire\u00e7\u00e3o ao endere\u00e7o da Google para se comunicar com ele. Ele pode ter mais ou menos linhas, mas a logica \u00e9 simples a requis\u00e3o vai para o seu provedor de internet e l\u00e1 recebe a resposta do endere\u00e7o que voc\u00ea est\u00e1 procurando. </p> <p>Temos outro detalhe para aborda sobre essa rota: <pre><code>4  * * *\n</code></pre></p> <p>Na rota numero 4* ela retornou diferente das outras com os asterisco, o que significa? Basicamente a pessoa/empresa que administra esse IP pode ter desabilitado a resposta do ICMP da m\u00e1quina, para evitar a sobrecarga de tr\u00e1fego e por quest\u00f5es de seguran\u00e7a.</p>"}]}